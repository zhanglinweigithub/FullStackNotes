import{_ as p,M as c,p as o,q as i,R as n,t as s,N as t,a1 as a}from"./framework-5866ffd3.js";const l="/FullStackNotes/assets/image-20230507124334526-52b99927.png",d="/FullStackNotes/assets/image-20230507124445609-830953bc.png",u="/FullStackNotes/assets/image-20230507124536605-ff30dd1e.png",r="/FullStackNotes/assets/image-20230507115637834-3987cf9a.png",k="/FullStackNotes/assets/image-20230507115849505-be1ec95f.png",m="/FullStackNotes/assets/image-20230507120121983-1c758326.png",v="/FullStackNotes/assets/image-20230507120200417-89b85393.png",b="/FullStackNotes/assets/image-20230507120709823-b4c49814.png",g="/FullStackNotes/assets/image-20230507121021117-2233ae08.png",h="/FullStackNotes/assets/image-20230507121145417-4f371054.png",f="/FullStackNotes/assets/image-20230507121203016-fafa6896.png",y="/FullStackNotes/assets/1674006029180-8c9426e1-c3c4-40cf-85bb-24921257e3db-b6a60a24.png",S="/FullStackNotes/assets/1674010736631-ba95d30a-749a-404d-a5c3-4c481727c32d-0a2b615b.png",w="/FullStackNotes/assets/1674013672669-28666604-01ae-4516-82fe-c72de78d02db-9c98a9e7.png",x="/FullStackNotes/assets/1674013696999-9eb18c3c-e2c3-42ae-ba27-95eeae282195-4d0c97b7.png",R="/FullStackNotes/assets/1674014195912-2fb9cf7f-df53-46bc-93b9-e7e95db10e80-f57b4428.png",q="/FullStackNotes/assets/9f68ivq-c6390d2e.png",_="/FullStackNotes/assets/image-20220609102817435-165735883948534-0fd1ed58.png",E="/FullStackNotes/assets/UFlNIV0-68ecf2e8.png",T="/FullStackNotes/assets/image-20210725144536958-981d82c0.png",F="/FullStackNotes/assets/image-20210725144725943-25f555fc.png",I="/FullStackNotes/assets/image-20210725151319695-ac3eab79.png",N="/FullStackNotes/assets/image-20210725151543640-eeea19b7.png",D="/FullStackNotes/assets/image-20210725151654046-f9697d10.png",O="/FullStackNotes/assets/image-20210725151729118-d827d93a.png",j="/FullStackNotes/assets/image-20210725151940515-33dd1bef.png",L="/FullStackNotes/assets/image-20230407162153720-e5cdcdda.png",A="/FullStackNotes/assets/1653322097736-291ff444.png",B="/FullStackNotes/assets/1653322506393-7b9fae9d.png",H="/FullStackNotes/assets/1653326156516-74557e93.png",K="/FullStackNotes/assets/1653327884526-1674300f.png",M="/FullStackNotes/assets/1653328022622-42d0fd7a.png",P="/FullStackNotes/assets/1653328288627-a0cc94c2.png",U="/FullStackNotes/assets/1653328663897-73da8bb1.png",C="/FullStackNotes/assets/1653357522914-aac9dd71.png",z="/FullStackNotes/assets/image-20210725152037611-36202b4d.png",J="/FullStackNotes/assets/image-20210630113929868-c6aeaea2.png",V="/FullStackNotes/assets/image-20210630183914491-47e437ad.png",Y="/FullStackNotes/assets/image-20210630201258802-0e593f2f.png",G="/FullStackNotes/assets/image-20210725152222497-d2223f19.png",X="/FullStackNotes/assets/image-20210725152700914-0d6d2065.png",Z="/FullStackNotes/assets/image-20210725153201086-ba535b71.png",W="/FullStackNotes/assets/image-20210725153359022-435875fd.png",Q="/FullStackNotes/assets/image-20210725153524190-b370fb4c.png",$="/FullStackNotes/assets/image-20210725153715910-6e3ac8b0.png",nn="/FullStackNotes/assets/image-20210725153937031-15526cc6.png",sn="/FullStackNotes/assets/image-20210725154155984-9ebea34f.png",an="/FullStackNotes/assets/image-20210725154216392-9b347241.png",en="/FullStackNotes/assets/image-20210725154405899-841f6635.png",tn={},pn=a('<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h1><h2 id="一、安装redis" tabindex="-1"><a class="header-anchor" href="#一、安装redis" aria-hidden="true">#</a> 一、安装Redis</h2><h3 id="docker安装redis" tabindex="-1"><a class="header-anchor" href="#docker安装redis" aria-hidden="true">#</a> Docker安装Redis</h3><h4 id="_1、安装docker" tabindex="-1"><a class="header-anchor" href="#_1、安装docker" aria-hidden="true">#</a> 1、安装Docker</h4>',4),cn={href:"http://linwei-zhang.gitee.io/full-stack-notes/guide/Docker/Docker.html#centos7%E5%AE%89%E8%A3%85docker",target:"_blank",rel:"noopener noreferrer"},on=a(`<h4 id="_2、拉取-redis-镜像" tabindex="-1"><a class="header-anchor" href="#_2、拉取-redis-镜像" aria-hidden="true">#</a> 2、拉取 Redis 镜像</h4><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># docker pull &lt;镜像名称&gt;:&lt;版本号&gt;</span>
docker pull redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、挂载配置文件" tabindex="-1"><a class="header-anchor" href="#_3、挂载配置文件" aria-hidden="true">#</a> 3、挂载配置文件</h4><p>本人的配置文件是放在</p><p>liunx 下<code>redis.conf</code>文件位置： <code>/home/redis/myredis/redis.conf</code></p><p>liunx 下<code>redis</code>的<code>data</code>文件位置 ： <code>/home/redis/myredis/data</code></p><p>1）挂载 redis 的配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不存在则创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/redis/myredis
<span class="token builtin class-name">cd</span> /home/redis/myredis
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）挂载 redis 的持久化文件（为了数据的持久化）。</p><h4 id="_4、启动-redis" tabindex="-1"><a class="header-anchor" href="#_4、启动-redis" aria-hidden="true">#</a> 4、启动 Redis</h4><p><code>myredis.conf</code> 文件需自己上传，在本文后面会有，也可上官网查找标准配置文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker run 
	--restart=always 
	--log-opt max-size=100m 
	--log-opt max-file=2 
	-p 6379:6379 
	--name myredis 
	-v /home/redis/myredis/myredis.conf:/etc/redis/redis.conf 
	-v /home/redis/myredis/data:/data 
	-d redis 
	redis-server /etc/redis/redis.conf  
	--appendonly yes  
	--requirepass 000415
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>--restart=always</code> 总是开机启动</li><li><code>--log</code>是日志方面的</li><li><code>-p 6379:6379</code> 将6379端口挂载出去</li><li><code>--name</code> 给这个容器取一个名字</li><li><code>-v</code> 数据卷挂载 <ul><li><code>/home/redis/myredis/myredis.conf:/etc/redis/redis.conf</code> 这里是将 liunx 路径下的<code>myredis.conf</code> 和redis下的<code>redis.conf</code> 挂载在一起。</li><li><code>/home/redis/myredis/data:/data</code> 这个同上</li></ul></li><li><code>-d redis</code> 表示后台启动redis</li><li><code>redis-server /etc/redis/redis.conf</code> 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录 <code>/etc/redis/redis.conf</code> 也就是liunx下的<code>/home/redis/myredis/myredis.conf</code></li><li><code>–appendonly yes</code> 开启redis 持久化</li><li><code>–requirepass 000415</code> 设置密码 （如果你是通过docker 容器内部连接的话，就随意，可设可不设。）</li></ul><h5 id="查看-redis-是否启动成功" tabindex="-1"><a class="header-anchor" href="#查看-redis-是否启动成功" aria-hidden="true">#</a> 查看 redis 是否启动成功</h5><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker ps # 查看启动中的容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看日志" tabindex="-1"><a class="header-anchor" href="#查看日志" aria-hidden="true">#</a> 查看日志</h5><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 命令：docker logs --since 30m &lt;容器名&gt;</span>
<span class="token comment"># --since 30m 是查看此容器30分钟之内的日志情况</span>
docker logs --since 30m myredis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、容器内部连接进行测试" tabindex="-1"><a class="header-anchor" href="#_5、容器内部连接进行测试" aria-hidden="true">#</a> 5、容器内部连接进行测试</h4><h5 id="进入容器" tabindex="-1"><a class="header-anchor" href="#进入容器" aria-hidden="true">#</a> 进入容器</h5><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 命令：docker exec -it &lt;容器名&gt; /bin/bash</span>
docker exec -it myredis redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进入之后，直接输入查看命令</p><p><img src="`+l+`" alt="image-20230507124334526"></p><p>error是没有权限验证</p><h5 id="验证密码" tabindex="-1"><a class="header-anchor" href="#验证密码" aria-hidden="true">#</a> 验证密码</h5><p>就是启动 redis 时设置的密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>auth 000415
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20230507124445609"></p><h5 id="查看当前redis有没有设置密码" tabindex="-1"><a class="header-anchor" href="#查看当前redis有没有设置密码" aria-hidden="true">#</a> 查看当前redis有没有设置密码</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>config get requirepass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt="image-20230507124536605"></p><h4 id="_6、配置文件" tabindex="-1"><a class="header-anchor" href="#_6、配置文件" aria-hidden="true">#</a> 6、配置文件</h4><p>myredis.conf</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1 ::1
#bind 127.0.0.1

protected-mode no
port 6379
tcp-backlog 511
requirepass 000415
timeout 0
tcp-keepalive 300
daemonize no
supervised no
pidfile /var/run/redis_6379.pid
loglevel notice
logfile &quot;&quot;
databases 30
always-show-logo yes
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir ./
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync no
repl-disable-tcp-nodelay no
replica-priority 100
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
appendonly yes
appendfilename &quot;appendonly.aof&quot;
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
lua-time-limit 5000
slowlog-max-len 128
notify-keyspace-events &quot;&quot;
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window安装redis" tabindex="-1"><a class="header-anchor" href="#window安装redis" aria-hidden="true">#</a> window安装Redis</h3><h4 id="_1、下载地址" tabindex="-1"><a class="header-anchor" href="#_1、下载地址" aria-hidden="true">#</a> 1、下载地址</h4><ul><li>Github下载地址：https://github.com/MicrosoftArchive/redis/releases</li><li>百度网盘下载地址：https://pan.baidu.com/s/1PDYbR7PSdHNac2djSPuTRQ 提取码：tilq</li></ul><h4 id="_2、安装" tabindex="-1"><a class="header-anchor" href="#_2、安装" aria-hidden="true">#</a> 2、安装</h4><p>将下载好的 Redis 解压到单独目录</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>安装路径最好不要出现中文和空格</p></div><p><img src="`+r+`" alt="image-20230507115637834"></p><h4 id="_3、启动redis" tabindex="-1"><a class="header-anchor" href="#_3、启动redis" aria-hidden="true">#</a> 3、启动Redis</h4><h5 id="第一种启动方式" tabindex="-1"><a class="header-anchor" href="#第一种启动方式" aria-hidden="true">#</a> 第一种启动方式</h5><p>打开 CMD 进入 Redis 文件目录，运行如下命令，即可启动 Redis</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server redis.windows.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20230507115849505"></p><h5 id="第二种启动方式" tabindex="-1"><a class="header-anchor" href="#第二种启动方式" aria-hidden="true">#</a> 第二种启动方式</h5><p>部署 Redis 在 windows 下的服务</p><p>（1）关闭上一个 CMD 窗口，打开一个新的 CMD 窗口，输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --service-install redis.windows.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+'" alt="image-20230507120121983"></p><p>（2）启动Redis服务，进入服务里，找到Redis服务进行启动</p><p><img src="'+v+`" alt="image-20230507120200417"></p><div class="custom-container tip"><p class="custom-container-title">服务</p><p>右击我的电脑 ==&gt; 管理 ==&gt; 服务和应用程序 ==&gt; 服务</p></div><p>（3）测试</p><p>打开cmd，输入以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli.exe
<span class="token builtin class-name">set</span> name hello
get name
keys *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image-20230507120709823"></p><h4 id="_4、redis使用" tabindex="-1"><a class="header-anchor" href="#_4、redis使用" aria-hidden="true">#</a> 4、Redis使用</h4><p>卸载服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --service-uninstall 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开启服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --service-start 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --service-stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、开启远程访问" tabindex="-1"><a class="header-anchor" href="#_5、开启远程访问" aria-hidden="true">#</a> 5、开启远程访问</h4><p>由于Redis默认只允许本地访问，要使Redis可以远程访问，需修改redis对应的配置文件</p><p>我使用的Redis版本为：<code>redis 3.2</code> ，默认使用的是<code>redis.windows.conf</code></p><div class="custom-container tip"><p class="custom-container-title">查看 Redis 版本信息</p><p>先启动 Redis 服务，再使用<code>redis-cli.exe</code>启动客户端，然后在客户端中输入 <code>info</code> 命令即可查看</p></div><p>（1）确认redis服务运行的配置文件，查找redis服务</p><p><img src="`+g+'" alt="image-20230507121021117"></p><p>（2）修改两个地方即可：</p><p>1）注释掉本地连接对应的 bind 127.0.0.1</p><p><img src="'+h+'" alt="image-20230507121145417"></p><p>2）将redis默认的守护关闭，修改protected-mode yes 为 protected-mode no</p><p><img src="'+f+'" alt="image-20230507121203016"></p><p>3）修改完成，保存重启 Redis 服务</p><h2 id="二、概述" tabindex="-1"><a class="header-anchor" href="#二、概述" aria-hidden="true">#</a> 二、概述</h2>',77),ln={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},dn=a(`<h3 id="springdataredis依赖" tabindex="-1"><a class="header-anchor" href="#springdataredis依赖" aria-hidden="true">#</a> SpringDataRedis依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--redis依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--common-pool--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--Jackson依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springdataredisredis配置" tabindex="-1"><a class="header-anchor" href="#springdataredisredis配置" aria-hidden="true">#</a> SpringDataRedisRedis配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.150.101
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123321</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>  <span class="token comment">#最大连接</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>   <span class="token comment">#最大空闲连接</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>   <span class="token comment">#最小空闲连接</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 100ms <span class="token comment">#连接等待时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、redis常见命令-数据类型" tabindex="-1"><a class="header-anchor" href="#三、redis常见命令-数据类型" aria-hidden="true">#</a> 三、Redis常见命令&amp;数据类型</h2><h3 id="redis数据结构" tabindex="-1"><a class="header-anchor" href="#redis数据结构" aria-hidden="true">#</a> Redis数据结构</h3><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样： <img src="`+y+'" alt="image.png"></p><h3 id="key的层级结构" tabindex="-1"><a class="header-anchor" href="#key的层级结构" aria-hidden="true">#</a> Key的层级结构</h3><p><code>Redis</code>的<code>key</code>允许有多个单词形成层级结构，多个单词之间用&#39;<code>:</code>&#39;隔开，格式如下： <img src="'+S+'" alt="image.png"></p><blockquote><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p></blockquote><h3 id="redis命令" tabindex="-1"><a class="header-anchor" href="#redis命令" aria-hidden="true">#</a> Redis命令</h3>',11),un={href:"https://redis.io/commands",target:"_blank",rel:"noopener noreferrer"},rn=a(`<h4 id="redis通用命令" tabindex="-1"><a class="header-anchor" href="#redis通用命令" aria-hidden="true">#</a> Redis通用命令</h4><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li><strong>KEYS</strong>：查看符合模板的所有<code>key</code></li><li><strong>DEL</strong>：删除一个指定的<code>key</code></li><li><strong>EXISTS</strong>：判断<code>key</code>是否存在</li><li><strong>EXPIRE</strong>：给一个<code>key</code>设置有效期，有效期到期时该<code>key</code>会被自动删除</li><li><strong>TTL</strong>：查看一个<code>KEY</code>的剩余有效期</li></ul><p><strong>示例代码：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># KEYS</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>

<span class="token comment"># 查询以a开头的key</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys a*
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>


<span class="token comment"># DEL</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> del name <span class="token comment">#删除单个</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>  <span class="token comment">#成功删除1个</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MSET k1 v1 k2 v2 k3 v3 <span class="token comment">#批量添加数据</span>
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> del k1 k2 k3 k4
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>   <span class="token comment">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys * <span class="token comment">#再查询全部的key</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>	<span class="token comment">#只剩下一个了</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>


<span class="token comment"># EXISTS</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> exists age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token comment"># 存在</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> exists name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token comment"># 不存在</span>


<span class="token comment"># EXPIRE</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> expire age <span class="token number">10</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-2</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-2</span>  <span class="token comment">#当这个key过期了，那么此时查询出来就是-2 </span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> age <span class="token number">10</span> <span class="token comment">#如果没有设置过期时间</span>
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-1</span>  <span class="token comment"># ttl的返回值就是-1，表示永久存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string类型命令" tabindex="-1"><a class="header-anchor" href="#string类型命令" aria-hidden="true">#</a> String类型命令</h4><p><code>String</code>类型，也就是字符串类型，是<code>Redis</code>中最简单的存储类型。 其<code>value</code>是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串</li><li><code>int</code>：整数类型，可以做自增.自减操作</li><li><code>float</code>：浮点类型，可以做自增.自减操作</li></ul><p><img src="`+w+`" alt="image.png"></p><p><strong>String的常见命令有：</strong></p><ul><li><strong>SET</strong>：添加或者修改已经存在的一个<code>String</code>类型的键值对</li><li><strong>GET</strong>：根据<code>key</code>获取<code>String</code>类型的<code>value</code></li><li><strong>MSET</strong>：批量添加多个<code>String</code>类型的键值对</li><li><strong>MGET</strong>：根据多个<code>key</code>获取多个<code>String</code>类型的<code>value</code></li><li><strong>INCR</strong>：让一个整型的key自增1</li><li><strong>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</strong></li><li><strong>INCRBYFLOAT</strong>：让一个浮点类型的数字自增并指定步长</li><li><strong>SETNX</strong>：添加一个<code>String</code>类型的键值对，前提是这个<code>key</code>不存在，否则不执行</li><li><strong>SETEX</strong>：添加一个<code>String</code>类型的键值对，并且指定有效期</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># SET 和 GET  不存在就是新增，存在就是修改</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name Rose  //原来不存在
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name 
<span class="token string">&quot;Rose&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name Jack //原来存在，就是修改
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;Jack&quot;</span>

<span class="token comment"># MSET 和 MGET</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MSET k1 v1 k2 v2 k3 v3
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MGET name age k1 k2 k3
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Jack&quot;</span> //之前存在的name
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;10&quot;</span>   //之前存在的age
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;v2&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>

<span class="token comment"># INCR 和 INCRBY 和 DECY</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age 
<span class="token string">&quot;10&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr age //增加1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age //获得age
<span class="token string">&quot;11&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token number">2</span> //一次增加2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span> //返回目前的age的值
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">15</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token parameter variable">-1</span> //也可以增加负数，相当于减
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">14</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token parameter variable">-2</span> //一次减少2个
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> DECR age //相当于 incr 负数，减少正常用法
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age 
<span class="token string">&quot;11&quot;</span>

<span class="token comment"># SETNX</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name Jack  //设置名称
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setnx name lisi //如果key不存在，则添加成功
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name //由于name已经存在，所以lisi的操作失败
<span class="token string">&quot;Jack&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setnx name2 lisi //name2 不存在，所以操作成功
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name2 
<span class="token string">&quot;lisi&quot;</span>

<span class="token comment"># SETEX</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex name <span class="token number">10</span> jack
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hash类型命令" tabindex="-1"><a class="header-anchor" href="#hash类型命令" aria-hidden="true">#</a> Hash类型命令</h4><p><code>Hash</code>类型，也叫散列，其<code>value</code>是一个无序字典，类似于<code>Java</code>中的<code>HashMap</code>结构。 <code>String</code>结构是将对象序列化为<code>JSON</code>字符串后存储，当需要修改对象某个字段时很不方便 <code>Hash</code>结构可以将对象中的每个字段独立存储，可以针对单个字段做<code>CRUD</code><img src="`+x+`" alt="image.png"></p><p><strong>Hash类型的常见命令</strong></p><ul><li><strong>HSET key field value</strong>：添加或者修改<code>hash</code>类型<code>key</code>的<code>field</code>的值</li><li><strong>HGET key field</strong>：获取一个<code>hash</code>类型<code>key</code>的<code>field</code>的值</li><li><strong>HMSET</strong>：批量添加多个<code>hash</code>类型<code>key</code>的<code>field</code>的值</li><li><strong>HMGET</strong>：批量获取多个<code>hash</code>类型<code>key</code>的<code>field</code>的值</li><li><strong>HGETALL</strong>：获取一个<code>hash</code>类型的<code>key</code>中的所有的<code>field</code>和<code>value</code></li><li><strong>HKEYS：</strong> 获取一个<code>hash</code>类型的<code>key</code>中的所有的<code>field</code></li><li><strong>HVALS</strong>：获取一个<code>hash</code>类型的<code>key</code>中的所有的<code>value</code></li><li><strong>HINCRBY</strong>:让一个<code>hash</code>类型<code>key</code>的字段值自增并指定步长</li><li><strong>HSETNX</strong>：添加一个<code>hash</code>类型的<code>key</code>的field值，前提是这个<code>field</code>不存在，否则不执行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HSET 和 HGET</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET heima:user:3 name Lucy//大key是 heima:user:3 小key是name，小value是Lucy
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET heima:user:3 age <span class="token number">21</span>// 如果操作不存在的数据，则是新增
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET heima:user:3 age <span class="token number">17</span> //如果操作存在的数据，则是修改
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGET heima:user:3 name 
<span class="token string">&quot;Lucy&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGET heima:user:3 age
<span class="token string">&quot;17&quot;</span>

<span class="token comment"># HMSET 和 HMGET</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMSET heima:user:4 name HanMeiMei
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMSET heima:user:4 name LiLei age <span class="token number">20</span> sex <span class="token function">man</span>
OK

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMGET heima:user:4 name age sex
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;LiLei&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>

<span class="token comment"># HGETALL</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGETALL heima:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;LiLei&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;sex&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>

<span class="token comment"># HKEYS 和 HVALS</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HKEYS heima:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;sex&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HVALS heima:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;LiLei&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>

<span class="token comment"># HINCRBY</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY  heima:user:4 age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">22</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HVALS heima:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;LiLei&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;22&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY  heima:user:4 age <span class="token parameter variable">-2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span>

<span class="token comment"># HSETNX</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSETNX heima:user4 sex woman
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGETALL heima:user:3
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Lucy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;17&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSETNX heima:user:3 sex woman
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGETALL heima:user:3
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Lucy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;17&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;sex&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;woman&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list类型命令" tabindex="-1"><a class="header-anchor" href="#list类型命令" aria-hidden="true">#</a> List类型命令</h4><p><code>Redis</code>中的<code>List</code>类型与<code>Java</code>中的<code>LinkedList</code>类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。 特征也与<code>LinkedList</code>类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li><strong>LPUSH key element ...</strong>：向列表左侧插入一个或多个元素</li><li><strong>LPOP key</strong>：移除并返回列表左侧的第一个元素，没有则返回<code>nil</code></li><li><strong>RPUSH key element ...</strong>：向列表右侧插入一个或多个元素</li><li><strong>RPOP key</strong>：移除并返回列表右侧的第一个元素</li><li><strong>LRANGE key star end</strong>：返回一段角标范围内的所有元素</li><li><strong>BLPOP和BRPOP</strong>：与<code>LPOP</code>和<code>RPOP</code>类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="`+R+`" alt="image.png"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># LPUSH 和 RPUSH</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LPUSH <span class="token function">users</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> RPUSH <span class="token function">users</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>

<span class="token comment"># LPOP 和 RPOP</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LPOP <span class="token function">users</span>
<span class="token string">&quot;3&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> RPOP <span class="token function">users</span>
<span class="token string">&quot;6&quot;</span>

<span class="token comment"># LRANGE</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> LRANGE <span class="token function">users</span> <span class="token number">1</span> <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set类型命令" tabindex="-1"><a class="header-anchor" href="#set类型命令" aria-hidden="true">#</a> Set类型命令</h4><p><code>Redis</code>的<code>Set</code>结构与<code>Java</code>中的<code>HashSet</code>类似，可以看做是一个<code>value</code>为<code>null</code>的<code>HashMap</code>。</p><p>因为也是一个<code>hash</code>表，因此具备与<code>HashSet</code>类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul><p><strong>Set类型的常见命令</strong></p><ul><li><strong>SADD key member ...</strong>：向<code>set</code>中添加一个或多个元素</li><li><strong>SREM key member ...</strong>: 移除<code>set</code>中的指定元素</li><li><strong>SCARD key</strong>： 返回<code>set</code>中元素的个数</li><li><strong>SISMEMBER key member</strong>：判断一个元素是否存在于<code>set</code>中</li><li><strong>SMEMBERS</strong>：获取<code>set</code>中的所有元素</li><li><strong>SINTER key1 key2 ...</strong>：求<code>key1</code>与<code>key2</code>的交集</li><li><strong>SDIFF key1 key2 ...</strong>：求<code>key1</code>与<code>key2</code>的差集</li><li><strong>SUNION key1 key2 ..</strong>：求<code>key1</code>和<code>key2</code>的并集</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd s1 a b c
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers s1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;c&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;b&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;a&quot;</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srem s1 a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER s1 a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER s1 b
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCARD s1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>

* 将下列数据用Redis的Set集合来存储：
* 张三的好友有：李四.王五.赵六
* 李四的好友有：王五.麻子.二狗
* 利用Set的命令实现下列功能：
* 计算张三的好友有几人
* 计算张三和李四有哪些共同好友
* 查询哪些人是张三的好友却不是李四的好友
* 查询张三和李四的好友总共有哪些人
* 判断李四是否是张三的好友
* 判断张三是否是李四的好友
* 将李四从张三的好友列表中移除
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SADD zs lisi wangwu zhaoliu
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SADD <span class="token function">ls</span> wangwu mazi ergou
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCARD zs
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SINTER zs <span class="token function">ls</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SDIFF zs <span class="token function">ls</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;zhaoliu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SUNION zs <span class="token function">ls</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhaoliu&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;mazi&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;ergou&quot;</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER zs lisi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER <span class="token function">ls</span> zhangsan
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SREM zs lisi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
    
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS zs
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;zhaoliu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sortedset类型命令" tabindex="-1"><a class="header-anchor" href="#sortedset类型命令" aria-hidden="true">#</a> SortedSet类型命令</h4><p><code>Redis</code>的<code>SortedSet</code>是一个可排序的<code>set</code>集合，与<code>Java</code>中的<code>TreeSet</code>有些类似，但底层数据结构却差别很大。<code>SortedSet</code>中的每一个元素都带有一个<code>score</code>属性，可以基于<code>score</code>属性对元素排序，底层的实现是一个跳表（SkipList）加 <code>hash</code>表。 <code>SortedSet</code>具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为<code>SortedSet</code>的可排序特性，经常被用来实现排行榜这样的功能。</p><p><strong>SortedSet的常见命令有：</strong></p><ul><li><strong>ZADD key score member</strong>：添加一个或多个元素到<code>sorted set</code> ，如果已经存在则更新其<code>score</code>值</li><li><strong>ZREM key member</strong>：删除<code>sorted set</code>中的一个指定元素</li><li><strong>ZSCORE key member</strong> : 获取<code>sorted set</code>中的指定元素的<code>score</code>值</li><li><strong>ZRANK key member</strong>：获取<code>sorted set</code> 中的指定元素的排名</li><li><strong>ZCARD key</strong>：获取<code>sorted set</code>中的元素个数</li><li><strong>ZCOUNT key min max</strong>：统计<code>score</code>值在给定范围内的所有元素的个数</li><li><strong>ZINCRBY key increment member</strong>：让<code>sorted set</code>中的指定元素自增，步长为指定的<code>increment</code>值</li><li><strong>ZRANGE key min max</strong>：按照<code>score</code>排序后，获取指定排名范围内的元素</li><li><strong>ZRANGEBYSCORE key min max</strong>：按照<code>score</code>排序后，获取指定<code>score</code>范围内的元素</li><li><strong>ZDIFF.ZINTER.ZUNION</strong>：求差集.交集.并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的<code>Z</code>后面添加<code>REV</code>即可，例如：</p><ul><li><strong>升序</strong>获取<code>sorted set</code> 中的指定元素的排名：<code>ZRANK key member</code></li><li><strong>降序</strong>获取<code>sorted set</code> 中的指定元素的排名：<code>ZREVRANK key memeber</code></li></ul><h2 id="四、redis的java客户端" tabindex="-1"><a class="header-anchor" href="#四、redis的java客户端" aria-hidden="true">#</a> 四、Redis的Java客户端</h2><p>在Redis官网中提供了各种语言的客户端，地址：https://redis.io/docs/clients/</p><p><img src="`+q+'" alt=""></p><p>其中Java客户端也包含很多：</p><p><img src="'+_+`" alt="image-20220609102817435"></p><p>标记为*的就是推荐使用的java客户端，包括：</p><ul><li><code>Jedis</code>和<code>Lettuce</code>：这两个主要是提供了<code>Redis</code>命令对应的<code>API</code>，方便我们操作<code>Redis</code></li><li><code>Redisson</code>：是在<code>Redis</code>基础上实现了分布式的可伸缩的<code>java</code>数据结构，例如<code>Map</code>、<code>Queue</code>等，而且支持跨进程的同步机制：<code>Lock</code>、<code>Semaphore</code>等待，比较适合用来实现特殊的功能需求。</li></ul><h3 id="jedis客户端" tabindex="-1"><a class="header-anchor" href="#jedis客户端" aria-hidden="true">#</a> Jedis客户端</h3><p>Jedis的官网地址： https://github.com/redis/jedis</p><h4 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--jedis--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--单元测试--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接" aria-hidden="true">#</a> 建立连接</h4><p>新建一个单元测试类，内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>

<span class="token annotation punctuation">@BeforeEach</span>
<span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.建立连接</span>
    <span class="token comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span>
    jedis <span class="token operator">=</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.设置密码</span>
    jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;123321&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.选择库</span>
    jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存入数据</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;虎哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取数据</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 插入hash数据</span>
    jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;21&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="释放资源" tabindex="-1"><a class="header-anchor" href="#释放资源" aria-hidden="true">#</a> 释放资源</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterEach</span>
<span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="连接池" tabindex="-1"><a class="header-anchor" href="#连接池" aria-hidden="true">#</a> 连接池</h4><p><code>Jedis</code>本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用<code>Jedis</code>连接池代替<code>Jedis</code>的直连方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisConnectionFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 配置连接池</span>
        <span class="token class-name">JedisPoolConfig</span> poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span>
        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span> <span class="token string">&quot;192.168.150.101&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;123321&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springdataredis客户端" tabindex="-1"><a class="header-anchor" href="#springdataredis客户端" aria-hidden="true">#</a> SpringDataRedis客户端</h3><p><code>SpringData</code>是<code>Spring</code>中数据操作的模块，包含对各种数据库的集成，其中对<code>Redis</code>的集成模块就叫做<code>SpringDataRedis</code>，官网地址：https://spring.io/projects/spring-data-redis</p><ul><li>提供了对不同Redis客户端的整合（<code>Lettuce</code>和<code>Jedis</code>）</li><li>提供了<code>RedisTemplate</code>统一<code>API</code>来操作<code>Redis</code></li><li>支持<code>Redis</code>的发布订阅模型</li><li>支持<code>Redis</code>哨兵和<code>Redis</code>集群</li><li>支持基于<code>Lettuce</code>的响应式编程</li><li>支持基于<code>JDK</code>、<code>JSON</code>、字符串、<code>Spring</code>对象的数据序列化及反序列化</li><li>支持基于<code>Redis</code>的<code>JDKCollection</code>实现</li></ul><p><code>SpringDataRedis</code>中提供了<code>RedisTemplate</code>工具类，其中封装了各种对<code>Redis</code>的操作。并且将不同数据类型的操作<code>API</code>封装到了不同的类型中：</p><p><img src="`+E+`" alt=""></p><h4 id="引入依赖-1" tabindex="-1"><a class="header-anchor" href="#引入依赖-1" aria-hidden="true">#</a> 引入依赖</h4><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--redis依赖--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--common-pool--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--Jackson依赖--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置redis" tabindex="-1"><a class="header-anchor" href="#配置redis" aria-hidden="true">#</a> 配置Redis</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.150.101
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123321</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 100ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注入redistemplate" tabindex="-1"><a class="header-anchor" href="#注入redistemplate" aria-hidden="true">#</a> 注入RedisTemplate</h4><p>因为有了SpringBoot的自动装配，我们可以拿来就用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">RedisStringTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编写测试" tabindex="-1"><a class="header-anchor" href="#编写测试" aria-hidden="true">#</a> 编写测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">RedisStringTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> edisTemplate<span class="token punctuation">;</span>
    
    <span class="token comment">// JSON序列化工具,也可用其它的JSON序列化工具</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建对象</span>
    	<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;虎哥&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 手动序列化</span>
    	<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 写入数据</span>
    	stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:200&quot;</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>

    	<span class="token comment">// 获取数据</span>
    	<span class="token class-name">String</span> jsonUser <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 手动反序列化</span>
    	<span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonUser<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user1 = &quot;</span> <span class="token operator">+</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、redis持久化机制" tabindex="-1"><a class="header-anchor" href="#五、redis持久化机制" aria-hidden="true">#</a> 五、Redis持久化机制</h2><h3 id="rdb持久化" tabindex="-1"><a class="header-anchor" href="#rdb持久化" aria-hidden="true">#</a> RDB持久化</h3><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做<code>Redis</code>数据快照。</p><p>简单来说就是把内存中的所有数据都记录到磁盘中。</p><p>当<code>Redis</code>实例故障重启后，从磁盘读取快照文件，恢复数据。</p><p>快照文件称为<code>RDB</code>文件，默认是保存在当前运行目录。</p><h4 id="执行时机" tabindex="-1"><a class="header-anchor" href="#执行时机" aria-hidden="true">#</a> 执行时机</h4><p>RDB持久化在四种情况下会执行：</p><ul><li>执行<code>save</code>命令</li><li>执行<code>bgsave</code>命令</li><li><code>Redis</code>停机时</li><li>触发<code>RDB</code>条件时</li></ul><p><strong>1）save命令</strong></p><p>执行下面的命令，可以立即执行一次RDB：</p><p><img src="`+T+'" alt="image-20210725144536958"></p><p><code>save</code>命令会导致主进程执行<code>RDB</code>，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p><p><strong>2）bgsave命令</strong></p><p>下面的命令可以异步执行RDB：</p><p><img src="'+F+`" alt="image-20210725144725943"></p><p>这个命令执行后会开启独立进程完成<code>RDB</code>，主进程可以持续处理用户请求，不受影响。</p><p><strong>3）停机时</strong></p><p><code>Redis</code>停机时会执行一次<code>save</code>命令，实现<code>RDB</code>持久化。</p><p><strong>4）触发RDB条件</strong></p><p><code>Redis</code>内部有触发<code>RDB</code>的机制，可以在<code>redis.conf</code>文件中找到，格式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">900 1  </span>
<span class="token key attr-name">save</span> <span class="token value attr-value">300 10  </span>
<span class="token key attr-name">save</span> <span class="token value attr-value">60 10000 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RDB</code>的其它配置也可以在<code>redis.conf</code>文件中设置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span>
<span class="token key attr-name">rdbcompression</span> <span class="token value attr-value">yes</span>

<span class="token comment"># RDB文件名称</span>
<span class="token key attr-name">dbfilename</span> <span class="token value attr-value">dump.rdb  </span>

<span class="token comment"># 文件保存的路径目录</span>
<span class="token key attr-name">dir</span> <span class="token value attr-value">./ </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rdb原理" tabindex="-1"><a class="header-anchor" href="#rdb原理" aria-hidden="true">#</a> RDB原理</h4><p><code>bgsave</code>开始时会<code>fork</code>主进程得到子进程，子进程共享主进程的内存数据。完成<code>fork</code>后读取内存数据并写入 <code>RDB</code> 文件。</p><p><code>fork</code>采用的是<code>copy-on-write</code>技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><p><img src="`+I+'" alt="image-20210725151319695"></p><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p><code>RDB</code>方式<code>bgsave</code>的基本流程？</p><ul><li><code>fork</code>主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的<code>RDB</code>文件</li><li>用新<code>RDB</code>文件替换旧的<code>RDB</code>文件</li></ul><p><code>RDB</code>会在什么时候执行？<code>save 60 1000</code>代表什么含义？</p><ul><li>默认是服务停止时</li><li>代表60秒内至少执行1000次修改则触发<code>RDB</code></li></ul><p><code>RDB</code>的缺点？</p><ul><li><code>RDB</code>执行间隔时间长，两次<code>RDB</code>之间写入数据有丢失的风险</li><li><code>fork</code>子进程、压缩、写出<code>RDB</code>文件都比较耗时</li></ul><h3 id="aof持久化" tabindex="-1"><a class="header-anchor" href="#aof持久化" aria-hidden="true">#</a> AOF持久化</h3><h4 id="aof原理" tabindex="-1"><a class="header-anchor" href="#aof原理" aria-hidden="true">#</a> AOF原理</h4><p><code>AOF</code>全称为Append Only File（追加文件）。</p><p><code>Redis</code>处理的每一个写命令都会记录在<code>AOF</code>文件，可以看做是命令日志文件。</p><p><img src="'+N+`" alt="image-20210725151543640"></p><h4 id="aof配置" tabindex="-1"><a class="header-anchor" href="#aof配置" aria-hidden="true">#</a> AOF配置</h4><p><code>AOF</code>默认是关闭的，需要修改<code>redis.conf</code>配置文件来开启<code>AOF</code></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 是否开启AOF功能，默认是no</span>
<span class="token key attr-name">appendonly</span> <span class="token value attr-value">yes</span>
<span class="token comment"># AOF文件的名称</span>
<span class="token key attr-name">appendfilename</span> <span class="token value attr-value">&quot;appendonly.aof&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AOF</code>的命令记录的频率也可以通过<code>redis.conf</code>文件来配：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 表示每执行一次写命令，立即记录到AOF文件</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">always </span>
<span class="token comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">everysec </span>
<span class="token comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">no</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三种策略对比：</p><p><img src="`+D+'" alt="image-20210725151654046"></p><h4 id="aof文件重写" tabindex="-1"><a class="header-anchor" href="#aof文件重写" aria-hidden="true">#</a> AOF文件重写</h4><p>因为是记录命令，<code>AOF</code>文件会比<code>RDB</code>文件大的多。而且<code>AOF</code>会记录对同一个<code>key</code>的多次写操作，但只有最后一次写操作才有意义。</p><p>通过执行<code>bgrewriteaof</code>命令，可以让<code>AOF</code>文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="'+O+`" alt="image-20210725151729118"></p><p>如图，<code>AOF</code>原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对<code>num</code>的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，<code>AOF</code>文件内容就是：<code>mset name jack num 666</code></p><p><code>Redis</code>也会在触发阈值时自动去重写<code>AOF</code>文件。阈值也可以在<code>redis.conf</code>中配置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span>
<span class="token key attr-name">auto-aof-rewrite-percentage</span> <span class="token value attr-value">100</span>
<span class="token comment"># AOF文件体积最小多大以上才触发重写 </span>
<span class="token key attr-name">auto-aof-rewrite-min-size</span> <span class="token value attr-value">64mb </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rdb与aof对比" tabindex="-1"><a class="header-anchor" href="#rdb与aof对比" aria-hidden="true">#</a> RDB与AOF对比</h3><p><code>RDB</code>和<code>AOF</code>各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><p><img src="`+j+'" alt="image-20210725151940515"></p><h2 id="六、redis实战" tabindex="-1"><a class="header-anchor" href="#六、redis实战" aria-hidden="true">#</a> 六、Redis实战</h2><h3 id="短信登录" tabindex="-1"><a class="header-anchor" href="#短信登录" aria-hidden="true">#</a> 短信登录</h3><p><img src="'+L+`" alt="image-20230407162153720"></p><h4 id="配置拦截器" tabindex="-1"><a class="header-anchor" href="#配置拦截器" aria-hidden="true">#</a> 配置拦截器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 登录拦截器</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>
                        <span class="token comment">// 需要登录的路径</span>
                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// token刷新的拦截器</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshTokenInterceptor</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="发送验证码" tabindex="-1"><a class="header-anchor" href="#发送验证码" aria-hidden="true">#</a> 发送验证码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">sendCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.校验手机号</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RegexUtils</span><span class="token punctuation">.</span><span class="token function">isPhoneInvalid</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.如果不符合，返回错误信息</span>
            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;手机号格式错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.符合，生成验证码</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomNumbers</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4.保存验证码到 redis</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">LOGIN_CODE_KEY</span> <span class="token operator">+</span> phone<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 5.发送验证码</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;发送短信验证码成功，验证码：{}&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回ok</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="登陆状态刷新" tabindex="-1"><a class="header-anchor" href="#登陆状态刷新" aria-hidden="true">#</a> 登陆状态刷新</h4><p>这是第一个拦截器，拦截一切路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefreshTokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RefreshTokenInterceptor</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.获取请求头中的token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.基于TOKEN获取redis中的用户</span>
        <span class="token class-name">String</span> key  <span class="token operator">=</span> <span class="token constant">LOGIN_USER_KEY</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.判断用户是否存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 5.将查询到的hash数据转为UserDTO</span>
        <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">fillBeanWithMap</span><span class="token punctuation">(</span>userMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 6.存在，保存用户信息到 ThreadLocal</span>
        <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 7.刷新token有效期</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">LOGIN_USER_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 8.放行</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="登录拦截器" tabindex="-1"><a class="header-anchor" href="#登录拦截器" aria-hidden="true">#</a> 登录拦截器</h4><p>这是第二个拦截器，拦截需要登录的路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.判断是否需要拦截（ThreadLocal中是否有用户）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有，需要拦截，设置状态码</span>
            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 拦截</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 有用户，则放行</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="登录" tabindex="-1"><a class="header-anchor" href="#登录" aria-hidden="true">#</a> 登录</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginFormDTO</span> loginForm<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.校验手机号</span>
    <span class="token class-name">String</span> phone <span class="token operator">=</span> loginForm<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RegexUtils</span><span class="token punctuation">.</span><span class="token function">isPhoneInvalid</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.如果不符合，返回错误信息</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;手机号格式错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.从redis获取验证码并校验</span>
    <span class="token class-name">String</span> cacheCode <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">LOGIN_CODE_KEY</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> code <span class="token operator">=</span> loginForm<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheCode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>cacheCode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不一致，报错</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;验证码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5.判断用户是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 6.不存在，创建新用户并保存</span>
        user <span class="token operator">=</span> <span class="token function">createUserWithPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 7.保存用户信息到 redis中</span>
    <span class="token comment">// 7.1.随机生成token，作为登录令牌</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 7.2.将User对象转为HashMap存储</span>
    <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">beanToMap</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">CopyOptions</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setIgnoreNullValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setFieldValueEditor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> fieldValue<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> fieldValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 7.3.存储</span>
    <span class="token class-name">String</span> tokenKey <span class="token operator">=</span> <span class="token constant">LOGIN_USER_KEY</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span> userMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 7.4.设置token有效期</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span> <span class="token constant">LOGIN_USER_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 8.返回token</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><h4 id="缓存模型和思路" tabindex="-1"><a class="header-anchor" href="#缓存模型和思路" aria-hidden="true">#</a> 缓存模型和思路</h4><p>标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入<code>redis</code>。</p><p><img src="`+A+'" alt="1653322097736"></p><h4 id="缓存更新策略" tabindex="-1"><a class="header-anchor" href="#缓存更新策略" aria-hidden="true">#</a> 缓存更新策略</h4><p><strong>内存淘汰：</strong><code>redis</code>自动进行，当<code>redis</code>内存达到咱们设定的<code>max-memery</code>的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p><p><strong>超时剔除：</strong> 当我们给<code>redis</code>设置了过期时间<code>ttl</code>之后，<code>redis</code>会将超时的数据进行删除，方便咱们继续使用缓存</p><p><strong>主动更新：</strong> 我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p><p><img src="'+B+'" alt="1653322506393"></p><h4 id="数据库缓存不一致解决方案" tabindex="-1"><a class="header-anchor" href="#数据库缓存不一致解决方案" aria-hidden="true">#</a> 数据库缓存不一致解决方案</h4><ul><li><strong>Cache Aside Pattern</strong> ：人工编码方式，缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案</li><li><strong>Read/Write Through Pattern</strong> : 由系统本身完成，数据库与缓存的问题交由系统本身去处理</li><li><strong>Write Behind Caching Pattern</strong> ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</li></ul><p><strong>综合考虑使用方案一</strong></p><ul><li><p>删除缓存还是更新缓存？</p><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存</li></ul></li><li><p>如何保证缓存与数据库的操作的同时成功或失败？</p><ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用TCC等分布式事务方案</li></ul></li><li><p>先操作缓存还是先操作数据库？</p><ul><li>先删除缓存，再操作数据库</li><li>先操作数据库，再删除缓存</li></ul></li></ul><p>应当是先操作数据库，再删除缓存</p><p>原因在于，如果你选择第一种方案，在两个线程并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。</p><h4 id="缓存与数据库双写一致" tabindex="-1"><a class="header-anchor" href="#缓存与数据库双写一致" aria-hidden="true">#</a> 缓存与数据库双写一致</h4><p>核心思路如下：</p><p>根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间</p><p>根据id修改店铺时，先修改数据库，再删除缓存</p><h4 id="缓存穿透问题的解决思路" tabindex="-1"><a class="header-anchor" href="#缓存穿透问题的解决思路" aria-hidden="true">#</a> 缓存穿透问题的解决思路</h4><p><strong>缓存穿透</strong> ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象 <ul><li>优点：实现简单，维护方便</li><li>缺点： <ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li>布隆过滤 <ul><li>优点：内存占用较少，没有多余key</li><li>缺点： <ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><h5 id="缓存空对象" tabindex="-1"><a class="header-anchor" href="#缓存空对象" aria-hidden="true">#</a> 缓存空对象</h5><p>当我们客户端访问不存在的数据时，先请求<code>redis</code>，但是此时<code>redis</code>中没有数据，此时会访问到数据库，但是数据库中也没有数据</p><p>此时我们在<code>redis</code>中存入一个空对象，这样，下次用户过来访问这个不存在的数据，那么在<code>redis</code>中也能找到这个数据就不会进入到数据库了</p><h5 id="布隆过滤" tabindex="-1"><a class="header-anchor" href="#布隆过滤" aria-hidden="true">#</a> 布隆过滤</h5><p>布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问<code>redis</code>，哪怕此时<code>redis</code>中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到<code>redis</code>中，</p><p>假设布隆过滤器判断这个数据不存在，则直接返回</p><p>这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突</p><p><img src="'+H+'" alt="1653326156516"></p><h5 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结" aria-hidden="true">#</a> 小总结</h5><p>缓存穿透产生的原因是什么？</p><ul><li>用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力</li></ul><p>缓存穿透的解决方案有哪些？</p><ul><li>缓存null值</li><li>布隆过滤</li></ul><h4 id="缓存雪崩问题及解决思路" tabindex="-1"><a class="header-anchor" href="#缓存雪崩问题及解决思路" aria-hidden="true">#</a> 缓存雪崩问题及解决思路</h4><p><strong>缓存雪崩</strong>：是指在同一时段大量的缓存<code>key</code>同时失效或者<code>Redis</code>服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>核心思路就是避免大量的<code>key</code>在同一时间到期</p><p>解决方案：</p><ul><li>给不同的<code>Key</code>的<code>TTL</code>添加随机值</li><li>利用<code>Redis</code>集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><p><img src="'+K+'" alt="1653327884526"></p><h4 id="缓存击穿问题及解决思路" tabindex="-1"><a class="header-anchor" href="#缓存击穿问题及解决思路" aria-hidden="true">#</a> 缓存击穿问题及解决思路</h4><p><strong>缓存击穿</strong>：缓存击穿问题也叫热点<code>Key</code>问题，就是一个被高并发访问并且缓存重建业务较复杂的<code>key</code>突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><ul><li>互斥锁</li><li>逻辑过期</li></ul><p>逻辑分析：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大</p><p><img src="'+M+'" alt="1653328022622"></p><h5 id="使用锁来解决" tabindex="-1"><a class="header-anchor" href="#使用锁来解决" aria-hidden="true">#</a> 使用锁来解决</h5><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行</p><p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p><p><img src="'+P+'" alt="1653328288627"></p><h5 id="逻辑过期方案" tabindex="-1"><a class="header-anchor" href="#逻辑过期方案" aria-hidden="true">#</a> 逻辑过期方案</h5><p>方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于我们对<code>key</code>设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题</p><p>但是不设置过期时间，这样数据就一直占用我们内存，我们可以采用逻辑过期方案。</p><p>我们把过期时间设置在 <code>redis</code>的<code>value</code>中，假设线程1去查询缓存，然后从<code>value</code>中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p><p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p><p><img src="'+U+'" alt="1653328663897"></p><p>进行对比</p><p><strong>互斥锁方案：</strong> 由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p><p><strong>逻辑过期方案：</strong> 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p><p><img src="'+C+'" alt="1653357522914"></p><h2 id="七、redis主从" tabindex="-1"><a class="header-anchor" href="#七、redis主从" aria-hidden="true">#</a> 七、Redis主从</h2><h3 id="搭建主从架构" tabindex="-1"><a class="header-anchor" href="#搭建主从架构" aria-hidden="true">#</a> 搭建主从架构</h3><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。</p><h4 id="集群结构" tabindex="-1"><a class="header-anchor" href="#集群结构" aria-hidden="true">#</a> 集群结构</h4><p><img src="'+z+`" alt="image-20210725152037611"></p><p>共包含三个节点，一个主节点，两个从节点。</p><p>这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下：</p><table><thead><tr><th style="text-align:center;">IP</th><th style="text-align:center;">PORT</th><th style="text-align:center;">角色</th></tr></thead><tbody><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7001</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7002</td><td style="text-align:center;">slave</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7003</td><td style="text-align:center;">slave</td></tr></tbody></table><h5 id="准备实例和配置" tabindex="-1"><a class="header-anchor" href="#准备实例和配置" aria-hidden="true">#</a> 准备实例和配置</h5><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>1）创建目录</p><p>我们创建三个文件夹，名字分别叫7001、7002、7003：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图：</p><p><img src="`+J+`" alt="image-20210630113929868"></p><p>2）恢复原始配置</p><p>修改<code>redis.conf</code>文件，将其中的持久化模式改为默认的<code>RDB</code>模式，<code>AOF</code>保持关闭状态。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 开启RDB</span>
<span class="token comment"># save &quot;&quot;</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">3600 1</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">300 100</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">60 10000</span>

<span class="token comment"># 关闭AOF</span>
<span class="token key attr-name">appendonly</span> <span class="token value attr-value">no</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）拷贝配置文件到每个实例目录</p><p>然后将<code>redis.conf</code>文件拷贝到三个目录中（在/tmp目录执行下列命令）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方式一：逐个拷贝</span>
<span class="token function">cp</span> redis-6.2.4/redis.conf <span class="token number">7001</span>
<span class="token function">cp</span> redis-6.2.4/redis.conf <span class="token number">7002</span>
<span class="token function">cp</span> redis-6.2.4/redis.conf <span class="token number">7003</span>

<span class="token comment"># 方式二：管道组合命令，一键拷贝</span>
<span class="token builtin class-name">echo</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">cp</span> redis-6.2.4/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）修改每个实例的端口、工作目录</p><p>修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将<code>rdb</code>文件保存位置都修改为自己所在目录（在/tmp目录执行下列命令）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/6379/7001/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/dir .\\//dir \\/tmp\\/7001\\//g&#39;</span> <span class="token number">7001</span>/redis.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/6379/7002/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/dir .\\//dir \\/tmp\\/7002\\//g&#39;</span> <span class="token number">7002</span>/redis.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/6379/7003/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/dir .\\//dir \\/tmp\\/7003\\//g&#39;</span> <span class="token number">7003</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5）修改每个实例的声明<code>IP</code></p><p>虚拟机本身有多个<code>IP</code>，为了避免将来混乱，我们需要在<code>redis.conf</code>文件中指定每一个实例的绑定<code>ip</code>信息，格式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># redis实例的声明 IP</span>
<span class="token key attr-name">replica-announce-ip</span> <span class="token value attr-value">192.168.150.101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每个目录都要改，我们一键完成修改（在/tmp目录执行下列命令）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 逐一执行</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;1a replica-announce-ip 192.168.150.101&#39;</span> <span class="token number">7001</span>/redis.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;1a replica-announce-ip 192.168.150.101&#39;</span> <span class="token number">7002</span>/redis.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;1a replica-announce-ip 192.168.150.101&#39;</span> <span class="token number">7003</span>/redis.conf

<span class="token comment"># 或者一键修改</span>
<span class="token builtin class-name">printf</span> <span class="token string">&#39;%s\\n&#39;</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-t</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;1a replica-announce-ip 192.168.150.101&#39;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h5><p>为了方便查看日志，我们打开3个<code>ssh</code>窗口，分别启动3个<code>redis</code>实例，启动命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 第1个</span>
redis-server <span class="token number">7001</span>/redis.conf
<span class="token comment"># 第2个</span>
redis-server <span class="token number">7002</span>/redis.conf
<span class="token comment"># 第3个</span>
redis-server <span class="token number">7003</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后：</p><p><img src="`+V+`" alt="image-20210630183914491"></p><p>如果要一键停止，可以运行下面命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> <span class="token string">&#39;%s\\n&#39;</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-t</span> redis-cli <span class="token parameter variable">-p</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="开启主从关系" tabindex="-1"><a class="header-anchor" href="#开启主从关系" aria-hidden="true">#</a> 开启主从关系</h5><p>现在三个实例还没有任何关系，要配置主从可以使用<code>replicaof</code> 或者<code>slaveof</code>（5.0以前）命令。</p><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在<code>redis.conf</code>中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用<code>redis-cli</code>客户端连接到<code>redis</code>服务，执行<code>slaveof</code>命令（重启后失效）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>slaveof <span class="token operator">&lt;</span>masterip<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>masterport<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>注意：在5.0以后新增命令<code>replicaof</code>，与<code>salveof</code>效果一致。</p><p>这里我们为了演示方便，使用方式二。</p><p>通过<code>redis-cli</code>命令连接7002，执行下面命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 连接 7002</span>
redis-cli <span class="token parameter variable">-p</span> <span class="token number">7002</span>
<span class="token comment"># 执行slaveof</span>
slaveof <span class="token number">192.168</span>.150.101 <span class="token number">7001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>redis-cli</code>命令连接7003，执行下面命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 连接 7003</span>
redis-cli <span class="token parameter variable">-p</span> <span class="token number">7003</span>
<span class="token comment"># 执行slaveof</span>
slaveof <span class="token number">192.168</span>.150.101 <span class="token number">7001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后连接 7001节点，查看集群状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 连接 7001</span>
redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span>
<span class="token comment"># 查看状态</span>
info replication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p><img src="`+Y+'" alt="image-20210630201258802"></p><h5 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h5><p>执行下列操作以测试：</p><ul><li><p>利用<code>redis-cli</code>连接7001，执行<code>set num 123</code></p></li><li><p>利用<code>redis-cli</code>连接7002，执行<code>get num</code>，再执行<code>set num 666</code></p></li><li><p>利用<code>redis-cli</code>连接7003，执行<code>get num</code>，再执行<code>set num 888</code></p></li></ul><p>可以发现，只有在7001这个<code>master</code>节点上可以执行写操作，7002和7003这两个<code>slave</code>节点只能执行读操作。</p><h3 id="主从数据同步" tabindex="-1"><a class="header-anchor" href="#主从数据同步" aria-hidden="true">#</a> 主从数据同步</h3><h4 id="全量同步" tabindex="-1"><a class="header-anchor" href="#全量同步" aria-hidden="true">#</a> 全量同步</h4><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将<code>master</code>节点的所有数据都拷贝给<code>slave</code>节点，流程：</p><p><img src="'+G+'" alt="image-20210725152222497"></p><p>这里有一个问题，<code>master</code>如何得知<code>salve</code>是第一次来连接呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><strong>Replication Id</strong>：简称<code>replid</code>，是数据集的标记，<code>id</code>一致则说明是同一数据集。每一个<code>master</code>都有唯一的<code>replid</code>，<code>slave</code>则会继承<code>master</code>节点的<code>replid</code></li><li><strong>offset</strong>：偏移量，随着记录在<code>repl_baklog</code>中的数据增多而逐渐增大。<code>slave</code>完成同步时也会记录当前同步的<code>offset</code>。如果<code>slave</code>的<code>offset</code>小于<code>master</code>的<code>offset</code>，说明<code>slave</code>数据落后于<code>master</code>，需要更新。</li></ul><p>因此<code>slave</code>做数据同步，必须向<code>master</code>声明自己的<code>replication id</code> 和<code>offset</code>，<code>master</code>才可以判断到底需要同步哪些数据。</p><p>因为<code>slave</code>原本也是一个<code>master</code>，有自己的<code>replid</code>和<code>offset</code>，当第一次变成<code>slave</code>，与<code>master</code>建立连接时，发送的<code>replid</code>和<code>offset</code>是自己的<code>replid</code>和<code>offset</code>。</p><p><code>master</code>判断发现<code>slave</code>发送来的<code>replid</code>与自己的不一致，说明这是一个全新的<code>slave</code>，就知道要做全量同步了。</p><p><code>master</code>会将自己的<code>replid</code>和<code>offset</code>都发送给这个<code>slave</code>，<code>slave</code>保存这些信息。以后<code>slave</code>的<code>replid</code>就与<code>master</code>一致了。</p><p>因此，<strong><code>master</code>判断一个节点是否是第一次同步的依据，就是看<code>replid</code>是否一致</strong>。</p><p>如图：</p><p><img src="'+X+'" alt="image-20210725152700914"></p><p>完整流程描述：</p><ul><li><code>slave</code>节点请求增量同步</li><li><code>master</code>节点判断<code>replid</code>，发现不一致，拒绝增量同步</li><li><code>master</code>将完整内存数据生成<code>RDB</code>，发送<code>RDB</code>到<code>slave</code></li><li><code>slave</code>清空本地数据，加载<code>master</code>的<code>RDB</code></li><li><code>master</code>将RDB期间的命令记录在<code>repl_baklog</code>，并持续将<code>log</code>中的命令发送给<code>slave</code></li><li><code>slave</code>执行接收到的命令，保持与<code>master</code>之间的同步</li></ul><h4 id="增量同步" tabindex="-1"><a class="header-anchor" href="#增量同步" aria-hidden="true">#</a> 增量同步</h4><p>全量同步需要先做<code>RDB</code>，然后将<code>RDB</code>文件通过网络传输个<code>slave</code>，成本太高了。因此除了第一次做全量同步，其它大多数时候<code>slave</code>与<code>master</code>都是做<strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新<code>slave</code>与<code>master</code>存在差异的部分数据。如图：</p><p><img src="'+Z+'" alt="image-20210725153201086"></p><p>那么<code>master</code>怎么知道<code>slave</code>与自己的数据差异在哪里呢?</p><h4 id="repl-backlog原理" tabindex="-1"><a class="header-anchor" href="#repl-backlog原理" aria-hidden="true">#</a> repl_backlog原理</h4><p><code>master</code>怎么知道<code>slave</code>与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的<code>repl_baklog</code>文件了。</p><p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p><code>repl_baklog</code>中会记录<code>Redis</code>处理过的命令日志及<code>offset</code>，包括<code>master</code>当前的<code>offset</code>，和<code>slave</code>已经拷贝到的<code>offset</code>：</p><p><img src="'+W+'" alt="image-20210725153359022"></p><p><code>slave</code>与<code>master</code>的<code>offset</code>之间的差异，就是<code>salve</code>需要增量拷贝的数据了。</p><p>随着不断有数据写入，<code>master</code>的<code>offset</code>逐渐变大，<code>slave</code>也不断的拷贝，追赶<code>master</code>的<code>offset</code>：</p><p><img src="'+Q+'" alt="image-20210725153524190"></p><p>直到数组被填满：</p><p><img src="'+$+'" alt="image-20210725153715910"></p><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到<code>slave</code>的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p><p>但是，如果<code>slave</code>出现网络阻塞，导致<code>master</code>的<code>offset</code>远远超过了<code>slave</code>的<code>offset</code>：</p><p><img src="'+nn+'" alt="image-20210725153937031"></p><p>如果<code>master</code>继续写入新数据，其<code>offset</code>就会覆盖旧的数据，直到将<code>slave</code>现在的<code>offset</code>也覆盖：</p><p><img src="'+sn+'" alt="image-20210725154155984"></p><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果<code>slave</code>恢复，需要同步，却发现自己的<code>offset</code>都没有了，无法完成增量同步了。只能做全量同步。</p><p><img src="'+an+'" alt="image-20210725154216392"></p><h4 id="主从同步优化" tabindex="-1"><a class="header-anchor" href="#主从同步优化" aria-hidden="true">#</a> 主从同步优化</h4><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化<code>Redis</code>主从集群：</p><ul><li>在<code>master</code>中配置<code>repl-diskless-sync yes</code>启用无磁盘复制，避免全量同步时的磁盘IO。</li><li><code>Redis</code>单节点上的内存占用不要太大，减少<code>RDB</code>导致的过多磁盘IO</li><li>适当提高<code>repl_baklog</code>的大小，发现<code>slave</code>宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个<code>master</code>上的<code>slave</code>节点数量，如果实在是太多<code>slave</code>，则可以采用主-从-从链式结构，减少<code>master</code>压力</li></ul><p>主从从架构图：</p><p><img src="'+en+`" alt="image-20210725154405899"></p><h4 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h4><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：<code>master</code>将完整内存数据生成<code>RDB</code>，发送<code>RDB</code>到<code>slave</code>。后续命令则记录在<code>repl_baklog</code>，逐个发送给<code>slave</code>。</li><li>增量同步：<code>slave</code>提交自己的<code>offset</code>到<code>master</code>，<code>master</code>获取<code>repl_baklog</code>中从<code>offset</code>之后的命令给<code>slave</code></li></ul><p>什么时候执行全量同步？</p><ul><li><code>slave</code>节点第一次连接<code>master</code>节点时</li><li><code>slave</code>节点断开时间太久，<code>repl_baklog</code>中的<code>offset</code>已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li><code>slave</code>节点断开又恢复，并且在<code>repl_baklog</code>中能找到<code>offset</code>时</li></ul><h2 id="八、redis工具类" tabindex="-1"><a class="header-anchor" href="#八、redis工具类" aria-hidden="true">#</a> 八、Redis工具类</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Redis操作</span>
<span class="token comment">//JSON序列化器使用的是 阿里的</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">EXPIRE_TIME</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> <span class="token constant">EXPIRE_TIME_TYPE</span> <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 数据缓存至redis
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                redisTemplate
                        <span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;数据缓存至redis失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 数据缓存至redis并设置过期时间
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                redisTemplate
                        <span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;数据缓存至redis失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 写入 hash-set,已经是key-value的键值，不能再写入为hash-set
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>    must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">subKey</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>  写入的值
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> SK<span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addHashCache</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">SK</span> subKey<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> subKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 写入 hash-set,并设置过期时间
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>    must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">subKey</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>  写入的值
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> SK<span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addHashCache</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">SK</span> subKey<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> subKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取 hash-setvalue
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>    must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">subKey</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> SK<span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">getHashCache</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">SK</span> subKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>  redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> subKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 从redis中获取缓存数据，转成对象
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>   must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 对象类型
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">V</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">V</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从redis中获取缓存数据，转成list
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>   must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 对象类型
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 功能描述：Get the value of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">key</span></span><span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
     * <span class="token keyword">@return</span> java.lang.String
     * <span class="token keyword">@date</span> 2021/9/19
     **/</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_KEY_PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;从redis缓存中获取缓存数据失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 删除key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 批量删除key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 序列化key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 是否存在key
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 设置过期时间
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 设置过期时间
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">expireAt</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expireAt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 移除 key 的过期时间，key 将持久保持
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">persist</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回 key 的剩余的过期时间
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回 key 的剩余的过期时间
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,320);function kn(mn,vn){const e=c("ExternalLinkIcon");return o(),i("div",null,[pn,n("p",null,[n("a",cn,[s("Linux安装Docker"),t(e)])]),on,n("p",null,[s("Redis的官方网站地址："),n("a",ln,[s("https://redis.io/"),t(e)])]),dn,n("p",null,[s("在官网（ "),n("a",un,[s("https://redis.io/commands"),t(e)]),s(" ）可以查看到不同的命令")]),rn])}const gn=p(tn,[["render",kn],["__file","Redis.html.vue"]]);export{gn as default};
