import{_ as a,a as s,b as n,c as e,d as p,e as t,f as c,g as o,h as i,i as l,j as r}from"./image-20210402164414827-bf1b6248.js";import{_ as d,a as u,b as m,c as k,d as v,e as g,f as h,g as b,h as _,i as f,j as y,k as x,l as w,m as N,n as $,o as A,p as j}from"./image-20210714001728017-ce29e009.js";import{_ as S,a as q,b as C,c as P,d as U,e as D,f as I,g as R,h as E,i as H,j as L,k as M,l as V,m as T,n as z,o as G,p as J}from"./image-20210714174623557-ee3417fc.js";import{_ as Z,p as B,q as F,a1 as K}from"./framework-5866ffd3.js";const O={},W=K('<h1 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> Nacos</h1><h2 id="一、安装nacos" tabindex="-1"><a class="header-anchor" href="#一、安装nacos" aria-hidden="true">#</a> 一、安装Nacos</h2><h3 id="windows安装" tabindex="-1"><a class="header-anchor" href="#windows安装" aria-hidden="true">#</a> Windows安装</h3><p>开发阶段采用单机安装即可。</p><h4 id="下载安装包" tabindex="-1"><a class="header-anchor" href="#下载安装包" aria-hidden="true">#</a> 下载安装包</h4><p>在<code>Nacos</code>的<code>GitHub</code>页面，提供有下载链接，可以下载编译好的<code>Nacos</code>服务端或者源代码：</p><p>GitHub主页：https://github.com/alibaba/nacos</p><p>GitHub的Release下载页：https://github.com/alibaba/nacos/releases</p><p>如图：</p><p><img src="'+a+'" alt="image-20210402161102887"></p><p>windows版本使用<code>nacos-server-x.x.x.zip</code>包即可。</p><h4 id="解压" tabindex="-1"><a class="header-anchor" href="#解压" aria-hidden="true">#</a> 解压</h4><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="'+s+'" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h4 id="端口配置" tabindex="-1"><a class="header-anchor" href="#端口配置" aria-hidden="true">#</a> 端口配置</h4><p><code>Nacos</code>的默认端口是<code>8848</code>，如果你电脑上的其它进程占用了<code>8848</code>端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入<code>nacos</code>的<code>conf</code>目录，修改配置文件中的端口：</p><p><img src="'+n+'" alt="image-20210402162008280"></p><p>修改其中的内容：</p><p><img src="'+e+'" alt="image-20210402162251093"></p><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h4><p>启动非常简单，进入<code>bin</code>目录，结构如下：</p><p><img src="'+p+`" alt="image-20210402162350977"></p><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>startup.cmd -m standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>执行后的效果如图：</p><p><img src="`+t+'" alt="image-20210402162526774"></p><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h4><p>在浏览器输入地址：http://127.0.0.1:8848/nacos即可：</p><p><img src="'+c+'" alt="image-20210402162630427"></p><p>默认的账号和密码都是<code>nacos</code>，进入后：</p><p><img src="'+o+`" alt="image-20210402162709515"></p><h3 id="linux安装" tabindex="-1"><a class="header-anchor" href="#linux安装" aria-hidden="true">#</a> Linux安装</h3><p><code>Linux</code>或者<code>Mac</code>安装方式与<code>Windows</code>类似。</p><h4 id="安装jdk" tabindex="-1"><a class="header-anchor" href="#安装jdk" aria-hidden="true">#</a> 安装JDK</h4><p><code>Nacos</code>依赖于<code>JDK</code>运行，所以<code>Linux</code>上也需要安装<code>JDK</code>才行。</p><p>将<code>jdk</code>安装包上传到某个目录，例如：<code>/usr/local/</code></p><p>然后解压缩：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> jdk-8u144-linux-x64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后重命名为<code>java</code></p><p>配置环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="上传安装包" tabindex="-1"><a class="header-anchor" href="#上传安装包" aria-hidden="true">#</a> 上传安装包</h4><p>如图：</p><p><img src="`+a+'" alt="image-20210402161102887"></p><p><code>linux</code>版本使用<code>nacos-server-x.x.x.tar.zip</code>包即可。</p><p>上传到<code>Linux</code>服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p><p><img src="'+i+`" alt="image-20210402163715580"></p><h4 id="解压-1" tabindex="-1"><a class="header-anchor" href="#解压-1" aria-hidden="true">#</a> 解压</h4><p>命令解压缩安装包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> nacos-server-1.4.1.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后删除安装包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> nacos-server-1.4.1.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目录中最终样式：</p><p><img src="`+l+'" alt="image-20210402163858429"></p><p>目录内部：</p><p><img src="'+r+`" alt="image-20210402164414827"></p><h4 id="端口配置-1" tabindex="-1"><a class="header-anchor" href="#端口配置-1" aria-hidden="true">#</a> 端口配置</h4><p>与<code>windows</code>中类似</p><h4 id="启动-1" tabindex="-1"><a class="header-anchor" href="#启动-1" aria-hidden="true">#</a> 启动</h4><p>在<code>nacos/bin</code>目录中，输入命令启动<code>Nacos</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> startup.sh <span class="token parameter variable">-m</span> standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、nacos注册中心" tabindex="-1"><a class="header-anchor" href="#二、nacos注册中心" aria-hidden="true">#</a> 二、Nacos注册中心</h2><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h3 id="服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#服务注册到nacos" aria-hidden="true">#</a> 服务注册到Nacos</h3><p><code>Nacos</code>是<code>SpringCloudAlibaba</code>的组件，而<code>SpringCloudAlibaba</code>也遵循<code>SpringCloud</code>中定义的服务注册、服务发现规范。因此使用<code>Nacos</code>和使用<code>Eureka</code>对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h4 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1）引入依赖</h4><p>父工程的<code>pom</code>文件中的<code>&lt;dependencyManagement&gt;</code>中引入<code>SpringCloudAlibaba</code>的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的<code>pom</code>文件中引入<code>nacos-discovery</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-配置nacos地址" tabindex="-1"><a class="header-anchor" href="#_2-配置nacos地址" aria-hidden="true">#</a> 2）配置nacos地址</h4><p>在user-service和order-service的<code>application.yml</code>中添加<code>nacos</code>地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-重启" tabindex="-1"><a class="header-anchor" href="#_3-重启" aria-hidden="true">#</a> 3）重启</h4><p>重启微服务后，登录<code>nacos</code>管理页面，可以看到微服务信息：</p><p><img src="`+d+'" alt="image-20210713231439607"></p><h3 id="服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#服务分级存储模型" aria-hidden="true">#</a> 服务分级存储模型</h3><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p><code>Nacos</code>就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="'+u+'" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="'+m+`" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h4 id="给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#给user-service配置集群" aria-hidden="true">#</a> 给user-service配置集群</h4><p>修改user-service的<code>application.yml</code>文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启两个user-service实例后，我们可以在<code>nacos</code>控制台看到下面结果：</p><p><img src="`+k+`" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8083</span> -Dspring.cloud.nacos.discovery.cluster-name<span class="token operator">=</span>SH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如图所示：</p><p><img src="`+v+'" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看<code>nacos</code>控制台：</p><p><img src="'+g+`" alt="image-20210713233727923"></p><h4 id="同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#同集群优先的负载均衡" aria-hidden="true">#</a> 同集群优先的负载均衡</h4><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此<code>Nacos</code>中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的<code>application.yml</code>文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改负载均衡规则</p><p>修改order-service的<code>application.yml</code>文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="权重配置" tabindex="-1"><a class="header-anchor" href="#权重配置" aria-hidden="true">#</a> 权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下<code>NacosRule</code>是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，<code>Nacos</code>提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在<code>nacos</code>控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="`+h+'" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="'+b+'" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h3 id="环境隔离" tabindex="-1"><a class="header-anchor" href="#环境隔离" aria-hidden="true">#</a> 环境隔离</h3><p><code>Nacos</code>提供了<code>namespace</code>来实现环境隔离功能。</p><ul><li><code>nacos</code>中可以有多个<code>namespace</code></li><li><code>namespace</code>下可以有<code>group</code>、<code>service</code>等</li><li>不同<code>namespace</code>之间相互隔离，例如不同<code>namespace</code>的服务互相不可见</li></ul><p><img src="'+_+'" alt="image-20210714000101516"></p><h4 id="创建namespace" tabindex="-1"><a class="header-anchor" href="#创建namespace" aria-hidden="true">#</a> 创建namespace</h4><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="'+f+'" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="'+y+'" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="'+x+'" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="'+w+`" alt="image-20210714000522913"></p><h4 id="给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#给微服务配置namespace" aria-hidden="true">#</a> 给微服务配置namespace</h4><p>给微服务配置<code>namespace</code>只能通过修改配置来实现。</p><p>例如，修改order-service的<code>application.yml</code>文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 492a7d5d<span class="token punctuation">-</span>237b<span class="token punctuation">-</span>46a1<span class="token punctuation">-</span>a99a<span class="token punctuation">-</span>fa8e98e4b0f9 <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="`+N+'" alt="image-20210714000830703"></p><p><img src="'+$+'" alt="image-20210714000837140"></p><p>此时访问order-service，因为<code>namespace</code>不同，会导致找不到userservice，控制台会报错：</p><p><img src="'+A+`" alt="image-20210714000941256"></p><h3 id="nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#nacos与eureka的区别" aria-hidden="true">#</a> Nacos与Eureka的区别</h3><p><code>Nacos</code>的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="`+j+'" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h2 id="三、nacos配置管理" tabindex="-1"><a class="header-anchor" href="#三、nacos配置管理" aria-hidden="true">#</a> 三、Nacos配置管理</h2><p><code>Nacos</code>除了可以做注册中心，同样可以做配置管理来使用。</p><h3 id="统一配置管理" tabindex="-1"><a class="header-anchor" href="#统一配置管理" aria-hidden="true">#</a> 统一配置管理</h3><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p><p><img src="'+S+'" alt="image-20210714164426792"></p><p><code>Nacos</code>一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><h4 id="在nacos中添加配置文件" tabindex="-1"><a class="header-anchor" href="#在nacos中添加配置文件" aria-hidden="true">#</a> 在nacos中添加配置文件</h4><p>如何在<code>nacos</code>中管理配置呢？</p><p><img src="'+q+'" alt="image-20210714164742924"></p><p>然后在弹出的表单中，填写配置信息：</p><p><img src="'+C+'" alt="image-20210714164856664"></p><blockquote><p>注意：项目的核心配置，需要热更新的配置才有放到<code>nacos</code>管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote><h4 id="从微服务拉取配置" tabindex="-1"><a class="header-anchor" href="#从微服务拉取配置" aria-hidden="true">#</a> 从微服务拉取配置</h4><p>微服务要拉取<code>nacos</code>中管理的配置，并且与本地的<code>application.yml</code>配置合并，才能完成项目启动。</p><p>但如果尚未读取<code>application.yml</code>，又如何得知<code>nacos</code>地址呢？</p><p>因此<code>spring</code>引入了一种新的配置文件：<code>bootstrap.yaml</code>文件，会在<code>application.yml</code>之前被读取，流程如下：</p><p><img src="'+P+`" alt="img"></p><p>1）引入nacos-config依赖</p><p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos配置管理依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）添加bootstrap.yaml</p><p>然后，在user-service中添加一个<code>bootstrap.yaml</code>文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice <span class="token comment"># 服务名称</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment">#开发环境，这里是dev </span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># Nacos地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 文件后缀名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会根据<code>spring.cloud.nacos.server-addr</code>获取<code>nacos</code>地址，再根据</p><p><code>\${spring.application.name}-\${spring.profiles.active}.\${spring.cloud.nacos.config.file-extension}</code>作为文件<code>id</code>，来读取配置。</p><p>本例中，就是去读取<code>userservice-dev.yaml</code>：</p><p><img src="`+U+'" alt="image-20210714170845901"></p><p>3）读取nacos配置</p><p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p><p><img src="'+D+`" alt="image-20210714170337448"></p><p>完整代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${pattern.dateformat}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>dateformat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在页面访问，可以看到效果：</p><p><img src="`+I+'" alt="image-20210714170449612"></p><h3 id="配置热更新" tabindex="-1"><a class="header-anchor" href="#配置热更新" aria-hidden="true">#</a> 配置热更新</h3><p>我们最终的目的，是修改<code>nacos</code>中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><p>要实现配置热更新，可以使用两种方式：</p><h4 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一" aria-hidden="true">#</a> 方式一</h4><p>在<code>@Value</code>注入的变量所在类上添加注解<code>@RefreshScope</code></p><p><img src="'+R+`" alt="image-20210714171036335"></p><h4 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二" aria-hidden="true">#</a> 方式二</h4><p>使用<code>@ConfigurationProperties</code>注解代替<code>@Value</code>注解。</p><p>在user-service服务中，添加一个类，读取<code>patterrn.dateformat</code>属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>user<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PatternProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UserController中使用这个类代替<code>@Value</code>：</p><p><img src="`+E+`" alt="image-20210714171316124"></p><p>完整代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PatternProperties</span> patternProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>patternProperties<span class="token punctuation">.</span><span class="token function">getDateformat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置共享" tabindex="-1"><a class="header-anchor" href="#配置共享" aria-hidden="true">#</a> 配置共享</h3><p>其实微服务启动时，会去<code>nacos</code>读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>下面我们通过案例来测试配置共享</p><h4 id="_1-添加一个环境共享配置" tabindex="-1"><a class="header-anchor" href="#_1-添加一个环境共享配置" aria-hidden="true">#</a> 1）添加一个环境共享配置</h4><p>我们在<code>nacos</code>中添加一个userservice.yaml文件：</p><p><img src="`+H+'" alt="image-20210714173233650"></p><h4 id="_2-在user-service中读取共享配置" tabindex="-1"><a class="header-anchor" href="#_2-在user-service中读取共享配置" aria-hidden="true">#</a> 2）在user-service中读取共享配置</h4><p>在user-service服务中，修改<code>PatternProperties</code>类，读取新添加的属性：</p><p><img src="'+L+'" alt="image-20210714173324231"></p><p>在user-service服务中，修改UserController，添加一个方法：</p><p><img src="'+M+'" alt="image-20210714173721309"></p><h4 id="_3-运行两个userapplication-使用不同的profile" tabindex="-1"><a class="header-anchor" href="#_3-运行两个userapplication-使用不同的profile" aria-hidden="true">#</a> 3）运行两个UserApplication，使用不同的profile</h4><p>修改UserApplication2这个启动项，改变其<code>profile</code>值：</p><p><img src="'+V+'" alt="image-20210714173538538"></p><p><img src="'+T+'" alt="image-20210714173519963"></p><p>这样，UserApplication(8081)使用的<code>profile</code>是<code>dev</code>，UserApplication2(8082)使用的<code>profile</code>是<code>test</code>。</p><p>启动UserApplication和UserApplication2</p><p>访问http://localhost:8081/user/prop，结果：</p><p><img src="'+z+'" alt="image-20210714174313344"></p><p>访问http://localhost:8082/user/prop，结果：</p><p><img src="'+G+'" alt="image-20210714174424818"></p><p>可以看出来，不管是<code>dev</code>，还是<code>test</code>环境，都读取到了<code>envSharedValue</code>这个属性的值。</p><h4 id="_4-配置共享的优先级" tabindex="-1"><a class="header-anchor" href="#_4-配置共享的优先级" aria-hidden="true">#</a> 4）配置共享的优先级</h4><p>当<code>nacos</code>、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="'+J+'" alt="image-20210714174623557"></p>',229),Q=[W];function X(Y,aa){return B(),F("div",null,Q)}const ta=Z(O,[["render",X],["__file","Nacos.html.vue"]]);export{ta as default};
