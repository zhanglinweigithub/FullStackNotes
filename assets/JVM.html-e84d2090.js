import{_ as a,p as s,q as n,a1 as e}from"./framework-5866ffd3.js";const c="/FullStackNotes/assets/image-20230408163554243-23a0466e.png",o="/FullStackNotes/assets/image-20230408172427553-1042e9a2.png",p="/FullStackNotes/assets/image-20230408172529037-9f42e1bc.png",t="/FullStackNotes/assets/image-20230408162038562-456aa605.png",l="/FullStackNotes/assets/image-20230408163057563-a4078bfb.png",i="/FullStackNotes/assets/image-20230414155512638-6a542a4a.png",d="/FullStackNotes/assets/image-20230408173150784-c2a3af04.png",r="/FullStackNotes/assets/image-20230408173246584-dcaa7dec.png",u="/FullStackNotes/assets/image-20230408173507408-69e4ba4f.png",k="/FullStackNotes/assets/image-20230408174259989-a8c7f236.png",m="/FullStackNotes/assets/image-20230408174411880-a0e5605b.png",h="/FullStackNotes/assets/1676427599648-4e93e95b-d127-43ca-b24d-7c0d9c7cdf01-9f8158b8.png",v="/FullStackNotes/assets/image-20230408174809046-71594584.png",b="/FullStackNotes/assets/image-20230408174906987-a9818b72.png",g="/FullStackNotes/assets/image-20230414152813389-2ebf7932.png",f="/FullStackNotes/assets/image-20230414153016627-c98e3e57.png",C="/FullStackNotes/assets/image-20230414153149372-fe129f78.png",y="/FullStackNotes/assets/image-20230414153310070-eee96f1d.png",w="/FullStackNotes/assets/image-20230414153405262-326679ae.png",_="/FullStackNotes/assets/image-20230414153440368-5336ad7e.png",S="/FullStackNotes/assets/image-20230414153552069-f1d53dad.png",x="/FullStackNotes/assets/image-20230414153610699-cf9f4a35.png",j="/FullStackNotes/assets/image-20230414153640986-62685e5f.png",M={},F=e('<h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h1><h2 id="一、类加载机制" tabindex="-1"><a class="header-anchor" href="#一、类加载机制" aria-hidden="true">#</a> 一、类加载机制</h2><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p><p>编写的 <code>Java</code> 代码需要经过编译器编译为 <code>class</code> 文件</p><p>代码编译为 <code>class</code> 文件后，需要通过类加载器把 <code>class</code> 文件加载到虚拟机中才能运行和使用</p><h3 id="类加载步骤" tabindex="-1"><a class="header-anchor" href="#类加载步骤" aria-hidden="true">#</a> 类加载步骤</h3><p>类从被加载到内存到使用完成被卸载出内存，需要经历</p><p><strong>加载、验证、准备、解析、初始化、使用、卸载</strong></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>验证、准备、解析统称为连接</p></div><p><img src="'+c+`" alt="image-20230408163554243"></p><h4 id="_1-加载" tabindex="-1"><a class="header-anchor" href="#_1-加载" aria-hidden="true">#</a> （1）加载</h4><p>在加载阶段，虚拟机主要完成三件事情</p><ul><li><p>通过一个类的全限定名来获取定义该类的二进制流；（比如 com.zhang.loadClass.test）</p></li><li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构；</p></li><li><p>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为程序访问方法区中这个类的外部接口。</p></li></ul><p>其中二进制字节流可以从以下方式中获取：</p><ul><li>从 <code>ZIP</code> 包读取，成为 <code>JAR</code>、<code>EAR</code>、<code>WAR</code> 格式的基础。</li><li>从网络中获取，最典型的应用是 <code>Applet</code>。</li><li>运行时计算生成，例如动态代理技术，在 <code>java.lang.reflect.Proxy</code> 使用 <code>ProxyGenerator.generateProxyClass</code> 的代理类的二进制字节流。</li><li>由其他文件生成，例如由 <code>JSP</code> 文件生成对应的 <code>Class</code> 类。</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>JVM在什么情况下会加载一个类？</strong> 也就是说，啥时候会从“<code>.class</code>”字节码文件中加载这个类到<code>JVM</code>内存里来</p><p>在你的代码中用到这个类的时候</p><ol><li>首先你的代码中包含“<code>main()</code>”方法的主类一定会在<code>JVM</code>进程启动之后被加载到内存，开始执行你的“<code>main()</code>”方法中的代码</li><li>接着遇到你使用了别的类，比如“<code>ReplicaManager</code>”，此时就会从对应的“<code>.class</code>”字节码文件加载对应的类到内存里来。</li></ol></div><h4 id="_2-验证" tabindex="-1"><a class="header-anchor" href="#_2-验证" aria-hidden="true">#</a> （2）验证</h4><p>验证的目的是为了确保 <code>class</code> 文件的字节流包含的内容符合虚拟机的要求，且不会危害虚拟机的安全</p><h4 id="_3-准备" tabindex="-1"><a class="header-anchor" href="#_3-准备" aria-hidden="true">#</a> （3）准备</h4><p>正式为【类变量】分配内存并设置类变量【初始值】，这些变量所使用的内存都分配在【方法区】</p><p>【实例变量】不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在【堆】中</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>分配内存的对象是【类变量】而不是实例变量</li><li>是分配【初始值】，而不是赋值</li></ul></div><p>一般数值类型的初始值都为<code>0</code></p><p><code>char</code>类型的初始值 为&#39;<code>\\u0000</code>&#39;（常量池中一个表示<code>Nul</code>的字符串）</p><p><code>boolean</code>类型初始值为<code>false</code></p><p>引用类型初始值为<code>null</code>。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>但是加上<code>final</code>关键字，比如下面这行代码<code>在准备阶段会初始化</code>value<code>的值为</code>123\`；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的代码，类变量 <code>value</code> 被初始化为 0 而不是 123</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h4 id="_4-解析" tabindex="-1"><a class="header-anchor" href="#_4-解析" aria-hidden="true">#</a> （4）解析</h4><p>解析是将常量池中【符号引用】替换为【直接引用】的过程。</p><h5 id="符号引用" tabindex="-1"><a class="header-anchor" href="#符号引用" aria-hidden="true">#</a> 符号引用</h5><p>符号引用是以一组符号来描述所引用的目标</p><p>符号引用与虚拟机实现的内存布局无关，引用的目标不一定已经加载到内存中。</p><p>比如在 <code>com.danny.framework.LoggerFactory</code> 类引用了 <code>com.danny.framework.Logger</code> ，但在编译期 间是不知道 <code>Logger</code> 类的内存地址的，所以只能先用 <code>com.danny.framework.Logger</code> （假设是这个，实际上是由类似于 <code>CONSTANT_Class_info</code> 的常量来表示的）来表示 <code>Logger</code> 类的地址，这就是符号引用。</p><h5 id="直接引用" tabindex="-1"><a class="header-anchor" href="#直接引用" aria-hidden="true">#</a> 直接引用</h5><p>直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</p><p>直接引用和虚拟机实现的内存布局有关，如果有了直接引用，那引用的目标一定在内存中存在。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>解析的时候 <code>class</code> 已经被加载到方法区的内存中，因此要把符号引用转化为直接引用，也就是能直接找到该类实际内存地址的引用。</p></div><h4 id="_5-初始化" tabindex="-1"><a class="header-anchor" href="#_5-初始化" aria-hidden="true">#</a> （5）初始化</h4><p>执行类的初始化代码</p><p>初始化阶段是虚拟机执行类构造器 <code>&lt;clinit\\&gt;()</code> 方法的过程。</p><p>在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源；比如：赋值、 <code>static</code>静态代码块</p><p><code>&lt;clinit&gt;()</code> 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。</p><p>例如以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 给变量赋值可以正常编译通过</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这句编译器会提示“非法向前引用”</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Sub<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 <code>&lt;clinit&gt;()</code> 方法。但接口与类不同的是，执行接口的 <code>&lt;clinit&gt;()</code> 方法不需要先执行父接口的 <code>&lt;clinit&gt;()</code> 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 <code>&lt;clinit&gt;()</code> 方法。</p><p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其它线程都会阻塞等待，直到活动线程执行 <code>&lt;clinit&gt;()</code> 方法完毕。如果在一个类的 <code>&lt;clinit&gt;()</code> 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果初始化一个类的时候，发现他的父类还没初始化，那么必须先初始化他的父类</p></div><p>初始化顺序如下：</p><ol><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ol><h3 id="类初始化时机" tabindex="-1"><a class="header-anchor" href="#类初始化时机" aria-hidden="true">#</a> 类初始化时机</h3><p><strong>1、主动引用</strong></p><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：</p><ul><li>遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code> 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 <code>new</code> 关键字实例化对象的时候；读取或设置一个类的静态字段的时候（被 <code>final</code> 修饰、已在编译期把结果放入常量池的静态字段除外）；以及调用一个类的静态方法的时候。</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 <code>main()</code> 方法的那个类），虚拟机会先初始化这个主类；</li></ul><p><strong>2、被动引用</strong></p><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p><ul><li>通过子类引用父类的静态字段，不会导致父类初始化。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SubClass</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// value 字段在 SuperClass 中定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 <code>Object</code> 的子类，其中包含了数组的属性和方法。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ConstClass</span><span class="token punctuation">.</span><span class="token constant">HELLOWORLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h3><h4 id="类加载器的作用" tabindex="-1"><a class="header-anchor" href="#类加载器的作用" aria-hidden="true">#</a> 类加载器的作用</h4><ul><li>加载 <code>class</code></li><li>确定类的唯一性</li></ul><h5 id="加载-class" tabindex="-1"><a class="header-anchor" href="#加载-class" aria-hidden="true">#</a> 加载 class</h5><p>类加载的加载阶段的第一个步骤，就是通过类加载器来完成的</p><p>类加载器的主要任务就是 “ 通过一个类的全限定名来获取描述此类的二进制字节流 ”</p><p>从程序员的角度来看，类加载器动态加载<code>class</code>文件到虚拟机中，并生成一个 <code>java.lang.Class</code> 实例，每个实例 都代表一个 <code>java</code> 类，可以根据该实例得到该类的信息，还可以通过<code>newInstance()</code>方法生成该类的一个对象。</p><h5 id="确定类的唯一性" tabindex="-1"><a class="header-anchor" href="#确定类的唯一性" aria-hidden="true">#</a> 确定类的唯一性</h5><p>对于每一个类，都需要由加载它的加载器和这个类本身共同确立这个类在 Java 虚拟机中的唯一性</p><p>两个相同的类，只有是在同一个加载器加载的情况下才 “ 相等 ”</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这里的 “ 相等 ” 是指代表类的 <code>Class</code> 对象的 <code>equals()</code> 方法、 <code>isAssignableFrom()</code> 方法、 <code>isInstance()</code> 方法的返回结果，也包括 <code>instanceof</code> 关键字对对象所属关系的 判定结果</p></div><h4 id="类加载器的分类" tabindex="-1"><a class="header-anchor" href="#类加载器的分类" aria-hidden="true">#</a> 类加载器的分类</h4><ul><li>启动类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器 （Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li><li>自定义类加载器（User ClassLoader）</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>其中启动类加载器属于 <code>JVM</code> 的一部分,使用 <code>C++</code> 实现</p><p>其他类加载器都用 <code>java</code> 实现，独立于虚拟机，并且最终都继承自 <code>java.lang.ClassLoader</code></p></div><h5 id="启动类加载器" tabindex="-1"><a class="header-anchor" href="#启动类加载器" aria-hidden="true">#</a> 启动类加载器</h5><p>启动类加载器主要负责加载 <code>JAVA_HOME\\lib</code> 目录或者被 <code>-Xbootclasspath</code> 参数指定目录中的部分类</p><p>具体加载哪些类可以通过 <code>System.getProperty(&quot;sun.boot.class.path&quot;)</code> 来查看。</p><h5 id="扩展类加载器" tabindex="-1"><a class="header-anchor" href="#扩展类加载器" aria-hidden="true">#</a> 扩展类加载器</h5><p>负责加载 <code>JAVA_HOME\\lib\\ext</code> 目录或者被 <code>java.ext.dirs</code> 系统变量指定的路径中的所有类库</p><p>可以通过 <code>System.getProperty(&quot;java.ext.dirs&quot;)</code> 来查看具体都加载哪些类</p><h5 id="应用程序类加载器" tabindex="-1"><a class="header-anchor" href="#应用程序类加载器" aria-hidden="true">#</a> 应用程序类加载器</h5><p>负责加载用户类路径（我们通常指定的 <code>classpath</code>）上的类</p><p>如果程序中没有自定义类加载器，应用程序类加载器就是程序<strong>默认</strong>的类加载器。</p><h5 id="自定义类加载器" tabindex="-1"><a class="header-anchor" href="#自定义类加载器" aria-hidden="true">#</a> 自定义类加载器</h5><p><code>JVM</code> 提供的类加载器只能加载指定目录的类（<code>jar</code> 和 <code>class</code>），如果我们想从其他地方甚至网络上获取 <code>class</code> 文件，就需要自定义类加载器来实现</p><p>自定义类加载器主要都是通过继承 <code>ClassLoader</code> 或者它的子类来实现，但无论是通过继承 <code>ClassLoader</code> 还是它的子类，最终自定义类加载器的父加载器都是<strong>应用程序类加载器</strong></p><p>因为不管调用哪个父类加载器，创建的对象都必须最终调用 <code>java.lang.ClassLoader.getSystemClassLoader()</code> 作为父加载器， <code>getSystemClassLoader()</code> 方法的返回值是 <code>sun.misc.Launcher.AppClassLoader</code> 即应用程序类加载器。</p><h5 id="自定义类加载器实现" tabindex="-1"><a class="header-anchor" href="#自定义类加载器实现" aria-hidden="true">#</a> <strong>自定义类加载器实现</strong></h5><p>以下代码中的 <code>FileSystemClassLoader</code> 是自定义类加载器，继承自 <code>java.lang.ClassLoader</code>，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（<code>.class</code> 文件），然后读取该文件内容，最后通过 <code>defineClass()</code> 方法来把这些字节代码转换成 <code>java.lang.Class</code> 类的实例。</p><p><code>java.lang.ClassLoader</code> 的 <code>loadClass()</code> 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 <code>findClass()</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileSystemClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> rootDir<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FileSystemClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> rootDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rootDir <span class="token operator">=</span> rootDir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classData <span class="token operator">=</span> <span class="token function">getClassData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>classData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> classData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getClassData</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token function">classNameToPath</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InputStream</span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> bytesNumRead<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesNumRead <span class="token operator">=</span> ins<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesNumRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">classNameToPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> rootDir <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar
                <span class="token operator">+</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.class&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制" aria-hidden="true">#</a> 双亲委派机制</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>双亲委派模型要求除了顶层的启动类加载器之外，其他的类加载器都应该有一个父类加载器</p><p>但是这种父子关系并不是继承关系，而是组合关系</p></div><p>就是当一个类加载器加载类的时候，如果有父加载器就先尝试让父加载器加载</p><p>如果父加载器还有父加载器就一直往上抛，一直把类加载的任务交给启动类加载器</p><p>然后启动类加载器如果加载不到类就会抛出 <code>ClassNotFoundException</code> 异常，之后把类加载的任务往下抛</p><p><img src="`+o+'" alt="image-20230408172427553"></p><p><img src="'+p+`" alt="image-20230408172529037"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这样做的好处是，避免重复加载某一个类，保证类的唯一性</p></div><p><strong>实现</strong></p><p>以下是抽象类 <code>java.lang.ClassLoader</code> 的代码片段，其中的 <code>loadClass()</code> 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 <code>ClassNotFoundException</code>，此时尝试自己去加载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>
    <span class="token comment">// The parent class loader for delegation</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// First, check if the class has already been loaded</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// ClassNotFoundException thrown if class not found</span>
                    <span class="token comment">// from the non-null parent class loader</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// If still not found, then invoke findClass in order</span>
                    <span class="token comment">// to find the class.</span>
                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、jvm内存区域" tabindex="-1"><a class="header-anchor" href="#二、jvm内存区域" aria-hidden="true">#</a> 二、JVM内存区域</h2><p><code>Java</code>虚拟机在运行时，会把内存空间分为若干个区域</p><p>Java虚拟机所管理的内存区域分为如下部分：</p><ul><li>方法区</li><li>堆内存：存放对象和数组 <ul><li>年轻代</li><li>老年代</li><li>永久代（方法区）</li></ul></li><li>虚拟机栈</li><li>本地方法栈</li><li>程序计数器</li></ul><p><img src="`+t+'" alt="image-20230408162038562"></p><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> 方法区</h3><p>用于存储虚拟机加载的类信息、常量、静态变量，以及编译器编译后的代码等数据</p><p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 <code>OutOfMemoryError</code> 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>jdk1.8</code>中，方法区已经不存在，原方法区中存储的类信息、编译后的代码数据等已经移动到了元空间</p><p>元空间并没有处于堆内存上，而是直接占用的本地内存</p><p>原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中。</p><p><img src="'+l+`" alt="image-20230408163057563"></p></div><h4 id="运行时常量池" tabindex="-1"><a class="header-anchor" href="#运行时常量池" aria-hidden="true">#</a> 运行时常量池</h4><p>运行时常量池是方法区的一部分。</p><p><code>Class</code> 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</p><p>除了在编译期生成的常量，还允许动态生成，例如 <code>String</code> 类的 <code>intern()</code>。</p><h4 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存" aria-hidden="true">#</a> 直接内存</h4><p>在 <code>JDK 1.4</code> 中新引入了 <code>NIO</code> 类，它可以使用 <code>Native</code> 函数库直接分配堆外内存，然后通过 <code>Java</code> 堆里的 <code>DirectByteBuffer</code> 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。</p><h4 id="去除永久代的原因" tabindex="-1"><a class="header-anchor" href="#去除永久代的原因" aria-hidden="true">#</a> 去除永久代的原因</h4><p>（1）字符串存在永久代中，容易出现性能问题和内存溢出。</p><p>（2）类及方法的信息等比较难确定其大小，因此对 于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</p><p>（3）永久代会为 <code>GC</code> 带来不必要的复杂度，并且回收效率偏低</p><h3 id="堆内存" tabindex="-1"><a class="header-anchor" href="#堆内存" aria-hidden="true">#</a> 堆内存</h3><p>存放我们在代码中创建的各种对象，是垃圾收集的主要区域（&quot;GC 堆&quot;）。</p><p>堆还可以分为</p><ul><li>新生代（YoungGeneration）</li><li>老年代（OldGeneration）</li></ul><p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 <code>OutOfMemoryError</code> 异常。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以通过 <code>-Xms</code> 和 <code>-Xmx</code> 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span><span class="token class-name">Xms1M</span> <span class="token operator">-</span><span class="token class-name">Xmx2M</span> <span class="token class-name">HackTheJava</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="虚拟机栈" tabindex="-1"><a class="header-anchor" href="#虚拟机栈" aria-hidden="true">#</a> 虚拟机栈</h3><p>调用执行任何方法时，都会给方法创建栈帧然后入栈, 方法执行完毕之后就出栈</p><p>每个线程都有自己的<code>Java</code>虚拟机栈</p><p>栈帧用于存储局部变量表、操作数栈、常量池引用等信息</p><p><img src="`+i+`" alt="image-20230414155512638"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以通过 <code>-Xss</code> 这个虚拟机参数来指定每个线程的 <code>Java</code> 虚拟机栈内存大小</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span><span class="token class-name">Xss2M</span> <span class="token class-name">HackTheJava</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><p>该区域可能抛出以下异常：</p><ul><li>当线程请求的栈深度超过最大值，会抛出 <code>StackOverflowError</code> 异常；</li><li>栈进行动态扩展时如果无法申请到足够内存，会抛出 <code>OutOfMemoryError</code> 异常。</li></ul><h3 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a> 本地方法栈</h3><p>本地方法栈与虚拟机栈的区别是，虚拟机栈执行的是 <code>Java</code> 方法，本地方法栈执行的是本地方法（<code>Native Method</code>）</p><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器" aria-hidden="true">#</a> 程序计数器</h3><p>程序计数器就是用来记录当前执行的字节码指令的位置的，也就是记录目前执行到了哪一条字节码指令</p><p>每个线程都有一个独立的程序计数器</p><p>程序计数器是<code>Java</code>虚拟机规定的唯一不会发生内存溢出的区域</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果正在执行的是本地方法则为空</p></div><h3 id="元空间" tabindex="-1"><a class="header-anchor" href="#元空间" aria-hidden="true">#</a> 元空间</h3><p><code>jdk1.8</code> 中，已经不存在永久代（方法区），替代它的一块空间叫做 “ 元空间 ”</p><p>和永久代类似，都是 <code>JVM</code> 规范对方法区的实现，但是元空间并不在虚拟机中，而是使用本地内存，元空间的大小仅受本地内存限制，但 可以通过 -<code>XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> 来指定元空间的大小。</p><h2 id="三、jvm垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#三、jvm垃圾回收机制" aria-hidden="true">#</a> 三、JVM垃圾回收机制</h2><p>垃圾回收，就是通过垃圾收集器把内存中没用的对象清理掉。主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收</p><p>垃圾回收涉及到的内容有：</p><ol><li>判断对象是否已死；</li><li>选择垃圾收集算法；</li><li>选择垃圾收集的时间；</li><li>选择适当的垃圾收集器清理垃圾 （已死的对象）;</li></ol><h3 id="判断对象是否已死" tabindex="-1"><a class="header-anchor" href="#判断对象是否已死" aria-hidden="true">#</a> 判断对象是否已死</h3><p>判断对象是否已死有引用计数算法和可达性分析算法。</p><h4 id="_1-引用计数算法-不再使用" tabindex="-1"><a class="header-anchor" href="#_1-引用计数算法-不再使用" aria-hidden="true">#</a> （1）引用计数算法（不再使用）</h4><p>给每一个对象添加一个引用计数器，每当有一个地方引用它时，计数器值加 1；每当有一个地方不再引用它时，计 数器值减 1；这样只要计数器的值不为 0，就说明还有地方引用它，它就不是无用的对象。</p><p><img src="`+d+'" alt="image-20230408173150784"></p><p><strong>不再使用原因</strong></p><p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p><p><img src="'+r+'" alt="image-20230408173246584"></p><h4 id="_2-可达性分析算法" tabindex="-1"><a class="header-anchor" href="#_2-可达性分析算法" aria-hidden="true">#</a> （2）可达性分析算法</h4><p>以 <code>GC Roots</code> 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p><p>了解可达性分析算法之前先了解一个概念——<code>GC Roots</code> 垃圾收集的起点</p><p>可以作为 <code>GC Roots</code> 的有</p><ul><li>虚拟机栈中本地变量表中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI（Native 方 法）引用的对象</li></ul><p>当一个对象到 <code>GC Roots</code> 没有任何引用链相连（<code>GC Roots</code> 到这个对象不可达）时，就说明此对象是不可用的，是死对象</p><p><img src="'+u+`" alt="image-20230408173507408"></p><p>上面被判了死刑的对象（object5、object6、object7）并不是必死无疑，还有挽救的余地。</p><p>进行可达性分析后对象和 <code>GC Roots</code> 之间没有引用链相连时，对象将会被进行一次标记，接着会判断如果对象没有覆盖 <code>Object</code>的 <code>finalize()</code> 方法或者 <code>finalize()</code> 方法已经被虚拟机调用过，那么它们就会被行刑（清除）；</p><p>如果对象覆盖了 <code>finalize()</code> 方法且还没有被调用，则会执行 <code>finalize()</code> 方法中的内容，所以在 <code>finalize()</code> 方法中如果重新与 <code>GC Roots</code> 引用链上的对象关联就可以拯救自己，但是一般不建议这么做</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>建议大家完全可以忘掉这个方法</p></div><h4 id="_3-方法区回收" tabindex="-1"><a class="header-anchor" href="#_3-方法区回收" aria-hidden="true">#</a> （3）方法区回收</h4><p>上面说的都是对堆内存中对象的判断，方法区中主要回收的是废弃的常量和无用的类。</p><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</p><p>为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。</p><p>类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：</p><ul><li>该类所有的实例已经被回收（堆中不存在任何该类的实例）。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象在任何地方没有被引用（无法通过反射访问该类的方法）。</li></ul><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p><p><code>Java</code> 提供了四种强度不同的引用类型。</p><h4 id="_1、强引用" tabindex="-1"><a class="header-anchor" href="#_1、强引用" aria-hidden="true">#</a> 1、强引用</h4><p>被强引用关联的对象不会被回收。</p><p>使用 new 一个新对象的方式来创建强引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、软引用" tabindex="-1"><a class="header-anchor" href="#_2、软引用" aria-hidden="true">#</a> 2、软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p><p>使用 SoftReference 类来创建软引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 使对象只被软引用关联</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、弱引用" tabindex="-1"><a class="header-anchor" href="#_3、弱引用" aria-hidden="true">#</a> 3、弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p><p>使用 WeakReference 类来创建弱引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> wf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、虚引用" tabindex="-1"><a class="header-anchor" href="#_4、虚引用" aria-hidden="true">#</a> 4、虚引用</h4><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p><p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p><p>使用 PhantomReference 来创建虚引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#常用垃圾回收算法" aria-hidden="true">#</a> 常用垃圾回收算法</h3><p>常用的垃圾回收算法有三种</p><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-整理算法</li></ul><h4 id="_1-标记-清除算法" tabindex="-1"><a class="header-anchor" href="#_1-标记-清除算法" aria-hidden="true">#</a> （1）标记-清除算法</h4><p>分为标记和清除两个阶段</p><p>首先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象</p><p>缺点：</p><ol><li>标记和清除两个过程效率都不高；</li><li>标记清除之后会产生大量不连续的内存碎片</li></ol><p><img src="`+k+'" alt="image-20230408174259989"></p><h4 id="_2-复制算法" tabindex="-1"><a class="header-anchor" href="#_2-复制算法" aria-hidden="true">#</a> （2）复制算法</h4><p>把内存分为大小相等的两块，每次存储只用其中一块，当这一块用完了，就把存活的对象全部复制到另一块上</p><p>同时把使用过的这块内存空间全部清理掉，往复循环</p><p>缺点：</p><p>实际可使用的内存空间缩小为原来的一半。</p><p><img src="'+m+'" alt="image-20230408174411880"></p><h4 id="复制算法优化" tabindex="-1"><a class="header-anchor" href="#复制算法优化" aria-hidden="true">#</a> 复制算法优化</h4><p>实际上真正的复制算法会做出如下优化，把内存区域划分为三块</p><p>1个Eden区，2个Survivor区</p><p>其中Eden区占80%内存空间，每一块Survivor区各占10%内存空间</p><p>比如说Eden区有800MB内存，每 一块Survivor区就100MB内存</p><p><img src="'+h+'" alt="image.png"></p><p>平时可以使用的，就是Eden区和其中一块Survivor区，那么相当于就是有900MB的内存是可以使用的</p><ul><li>刚开始对象都是分配在Eden区内的，如果Eden区快满了，此时就会触发垃圾回收</li><li>此时就会把Eden区中的存活对象都一次性转移到一块空着的Survivor区。</li><li>接着Eden区就会被清空，然后再次分配新对象到Eden区里，</li><li>然后就会如上图所示，Eden区和一块Survivor区里是有对象的，其中Survivor区里放的是上一次Minor GC后存活的对象。</li><li>如果下次再次Eden区满，那么再次触发Minor GC，就会把Eden区和放着上一次Minor GC后存活对象的Survivor区内的存活对象，转移到另外一块Survivor区去</li><li><strong>始终保持一块Survivor区是空着的</strong>，就这样一直<strong>循环使用这三 块内存区域。</strong></li></ul><h4 id="_3-标记-整理算法" tabindex="-1"><a class="header-anchor" href="#_3-标记-整理算法" aria-hidden="true">#</a> （3）标记-整理算法</h4><p>先对可用的对象进行标记，然后所有被标记的对象向一段移动，最后清除可用对象边界以外的内存</p><p><img src="'+v+'" alt="image-20230408174809046"></p><p>优点:</p><ul><li>不会产生内存碎片</li></ul><p>不足:</p><ul><li>需要移动大量对象，处理效率比较低</li></ul><h4 id="_4-分代收集算法" tabindex="-1"><a class="header-anchor" href="#_4-分代收集算法" aria-hidden="true">#</a> （4）分代收集算法</h4><p>把堆内存分为新生代和老年代</p><ul><li>新生代使用：复制算法</li><li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li></ul><p>一 般新生代中的对象基本上都是朝生夕灭的，每次只有少量对象存活，因此采用复制算法，只需要复制那些少量存活的对象就可以完成垃圾收集；</p><p>老年代中的对象存活率较高，就采用标记-清除和标记-整理算法来进行回收。</p><p><img src="'+b+'" alt="image-20230408174906987"></p><h3 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器" aria-hidden="true">#</a> 垃圾收集器</h3><p><img src="'+g+'" alt="image-20230414152813389"></p><p>以上是虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；</li><li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。</li><li><div class="custom-container tip"><p class="custom-container-title">提示</p></div></li></ul><p>除了 <code>CMS</code> 和 <code>G1</code> 之外，其它垃圾收集器都是以串行的方式执行。</p><p>:::</p><h4 id="_1、serial-收集器" tabindex="-1"><a class="header-anchor" href="#_1、serial-收集器" aria-hidden="true">#</a> 1、Serial 收集器</h4><p><img src="'+f+'" alt="image-20230414153016627"></p><p><code>Serial</code> 翻译为串行，也就是说它以串行的方式执行。</p><p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p><p>**优点：**简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是 Client 场景下的<strong>默认新生代收集器</strong>，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的</p><h4 id="_2、parnew-收集器" tabindex="-1"><a class="header-anchor" href="#_2、parnew-收集器" aria-hidden="true">#</a> 2、ParNew 收集器</h4><p><img src="'+C+'" alt="image-20230414153149372"></p><p>它是 <code>Serial</code> 收集器的多线程版本。</p><p>它是 <code>Server</code> 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 <code>Serial</code> 收集器，只有它能与 <code>CMS</code> 收集器配合使用。</p><h4 id="_3、parallel-scavenge-收集器" tabindex="-1"><a class="header-anchor" href="#_3、parallel-scavenge-收集器" aria-hidden="true">#</a> 3、Parallel Scavenge 收集器</h4><p>与 <code>ParNew</code> 一样是多线程收集器。</p><p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p><p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p><h4 id="_4、serial-old-收集器" tabindex="-1"><a class="header-anchor" href="#_4、serial-old-收集器" aria-hidden="true">#</a> 4、Serial Old 收集器</h4><p><img src="'+y+'" alt="image-20230414153310070"></p><p>是 <code>Serial</code> 收集器的老年代版本，也是给 <code>Client</code> 场景下的虚拟机使用。如果用在 <code>Server</code> 场景下，它有两大用途：</p><ul><li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 <code>Parallel Scavenge</code> 收集器搭配使用。</li><li>作为 <code>CMS</code> 收集器的后备预案，在并发收集发生 <code>Concurrent Mode Failure</code> 时使用。</li></ul><h4 id="_5、parallel-old-收集器" tabindex="-1"><a class="header-anchor" href="#_5、parallel-old-收集器" aria-hidden="true">#</a> 5、Parallel Old 收集器</h4><p><img src="'+w+'" alt="image-20230414153405262"></p><p>是 <code>Parallel Scavenge</code> 收集器的老年代版本。</p><p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 <code>Parallel Scavenge</code> 加 <code>Parallel Old</code> 收集器</p><h4 id="_6、cms-收集器" tabindex="-1"><a class="header-anchor" href="#_6、cms-收集器" aria-hidden="true">#</a> 6、CMS 收集器</h4><p><img src="'+_+'" alt="image-20230414153440368"></p><p><code>CMS</code>（Concurrent Mark Sweep），<code>Mark Sweep</code> 指的是标记 - 清除算法。</p><p>分为以下四个流程：</p><ul><li>初始标记：仅仅只是标记一下 <code>GC Roots</code> 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：进行 <code>GC Roots Tracing</code> 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除：不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点：</p><ul><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li><li>无法处理浮动垃圾，可能出现 <code>Concurrent Mode Failure</code>。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 <code>Concurrent Mode Failure</code>，这时虚拟机将临时启用 <code>Serial Old</code> 来替代 CMS。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 <code>Full GC</code>。</li></ul><h4 id="g1-收集器" tabindex="-1"><a class="header-anchor" href="#g1-收集器" aria-hidden="true">#</a> G1 收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p><p><img src="'+S+'" alt="image-20230414153552069"></p><p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p><p><img src="'+x+'" alt="image-20230414153610699"></p><p>通过引入 <code>Region</code> 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 <code>Region</code> 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 <code>Region</code>。</p><p>每个 <code>Region</code> 都有一个 <code>Remembered Set</code>，用来记录该 <code>Region</code> 对象的引用对象所在的 <code>Region</code>。通过使用 <code>Remembered Set</code>，在做可达性分析的时候就可以避免全堆扫描。</p><p><img src="'+j+'" alt="image-20230414153640986"></p><p>如果不计算维护 <code>Remembered Set</code> 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 <code>Remembered Set Logs</code> 里面，最终标记阶段需要把 <code>Remembered Set Logs</code> 的数据合并到 <code>Remembered Set</code> 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个 <code>Region</code> 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 <code>Region</code>，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点：</p><ul><li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul><h2 id="四、内存分配与回收策略" tabindex="-1"><a class="header-anchor" href="#四、内存分配与回收策略" aria-hidden="true">#</a> 四、内存分配与回收策略</h2><h3 id="minor-gc-和-full-gc" tabindex="-1"><a class="header-anchor" href="#minor-gc-和-full-gc" aria-hidden="true">#</a> Minor GC 和 Full GC</h3><ul><li><code>Minor GC</code>：回收新生代，因为新生代对象存活时间很短，因此 <code>Minor GC</code> 会频繁执行，执行的速度一般也会比较快。</li><li><code>Full GC</code>：回收老年代和新生代，老年代对象其存活时间长，因此 <code>Full GC</code> 很少执行，执行速度会比 <code>Minor GC</code> 慢很多。</li></ul><h3 id="内存分配策略" tabindex="-1"><a class="header-anchor" href="#内存分配策略" aria-hidden="true">#</a> 内存分配策略</h3><h4 id="_1、对象优先在-eden-分配" tabindex="-1"><a class="header-anchor" href="#_1、对象优先在-eden-分配" aria-hidden="true">#</a> 1、对象优先在 Eden 分配</h4><p>大多数情况下，对象在新生代 <code>Eden</code> 上分配，当 <code>Eden</code> 空间不够时，发起 <code>Minor GC</code>。</p><h4 id="_2、大对象直接进入老年代" tabindex="-1"><a class="header-anchor" href="#_2、大对象直接进入老年代" aria-hidden="true">#</a> 2、大对象直接进入老年代</h4><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p><p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p><p><code>-XX:PretenureSizeThreshold</code>，大于此值的对象直接在老年代分配，避免在 <code>Eden</code> 和 <code>Survivor</code> 之间的大量内存复制。</p><h4 id="_3、长期存活的对象进入老年代" tabindex="-1"><a class="header-anchor" href="#_3、长期存活的对象进入老年代" aria-hidden="true">#</a> 3、长期存活的对象进入老年代</h4><p>为对象定义年龄计数器，对象在 <code>Eden</code> 出生并经过 <code>Minor GC</code> 依然存活，将移动到 <code>Survivor</code> 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。默认15岁进入老年代</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以用<code>-XX:MaxTenuringThreshold</code> 来定义年龄的阈值</p></div><h4 id="_4、动态对象年龄判定" tabindex="-1"><a class="header-anchor" href="#_4、动态对象年龄判定" aria-hidden="true">#</a> 4、动态对象年龄判定</h4><p>虚拟机并不是永远要求对象的年龄必须达到 <code>MaxTenuringThreshold</code> 才能晋升老年代，如果在 <code>Survivor</code> 中相同年龄所有对象大小的总和大于 <code>Survivor</code> 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</p><h4 id="_5、空间分配担保" tabindex="-1"><a class="header-anchor" href="#_5、空间分配担保" aria-hidden="true">#</a> 5、空间分配担保</h4><p>在发生 <code>Minor GC</code> 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 <code>Minor GC</code> 可以确认是安全的。</p><p>如果不成立的话虚拟机会查看 <code>HandlePromotionFailure</code> 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 <code>Minor GC</code>；如果小于，或者 <code>HandlePromotionFailure</code> 的值不允许冒险，那么就要进行一次 <code>Full GC</code>。</p><p>如果经过 <code>Full GC</code> 后，空间仍然不够，那么虚拟机会抛出 <code>java.lang.OutOfMemoryError</code>。</p><h3 id="full-gc-的触发条件" tabindex="-1"><a class="header-anchor" href="#full-gc-的触发条件" aria-hidden="true">#</a> Full GC 的触发条件</h3><p>对于 <code>Minor GC</code>，其触发条件非常简单，当 <code>Eden</code> 空间满时，就将触发一次 <code>Minor GC</code>。而 <code>Full GC</code> 则相对复杂，有以下条件：</p><h4 id="_1、调用-system-gc" tabindex="-1"><a class="header-anchor" href="#_1、调用-system-gc" aria-hidden="true">#</a> 1、调用 System.gc()</h4><p>只是建议虚拟机执行 <code>Full GC</code>，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p><h4 id="_2-老年代空间不足" tabindex="-1"><a class="header-anchor" href="#_2-老年代空间不足" aria-hidden="true">#</a> 2. 老年代空间不足</h4><p>老年代空间不足的常见场景为上面所说的大对象直接进入老年代、长期存活的对象进入老年代等。</p><p>为了避免以上原因引起的 <code>Full GC</code>，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 <code>-Xmn</code> 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 <code>-XX:MaxTenuringThreshold</code> 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p><h4 id="_3-空间分配担保失败" tabindex="-1"><a class="header-anchor" href="#_3-空间分配担保失败" aria-hidden="true">#</a> 3. 空间分配担保失败</h4><p>使用复制算法的 <code>Minor GC</code> 需要老年代的内存空间作担保，如果担保失败会执行一次 <code>Full GC</code>。参考上面所说内容。</p><h4 id="_4-jdk-1-7-及以前的永久代空间不足" tabindex="-1"><a class="header-anchor" href="#_4-jdk-1-7-及以前的永久代空间不足" aria-hidden="true">#</a> 4. JDK 1.7 及以前的永久代空间不足</h4><p>在 <code>JDK 1.7</code> 及以前，<code>HotSpot</code> 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 <code>Class</code> 的信息、常量、静态变量等数据。</p><p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 <code>CMS GC</code> 的情况下也会执行 <code>Full GC</code>。如果经过 <code>Full GC</code> 仍然回收不了，那么虚拟机会抛出 <code>java.lang.OutOfMemoryError</code>。</p><p>为避免以上原因引起的 <code>Full GC</code>，可采用的方法为增大永久代空间或转为使用 <code>CMS GC</code>。</p><h4 id="_5-concurrent-mode-failure" tabindex="-1"><a class="header-anchor" href="#_5-concurrent-mode-failure" aria-hidden="true">#</a> 5. Concurrent Mode Failure</h4><p>执行 <code>CMS GC</code> 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 <code>GC</code> 过程中浮动垃圾过多导致暂时性的空间不足），便会报 <code>Concurrent Mode Failure</code> 错误，并触发 <code>Full GC</code>。</p>',320),G=[F];function N(E,O){return s(),n("div",null,G)}const L=a(M,[["render",N],["__file","JVM.html.vue"]]);export{L as default};
