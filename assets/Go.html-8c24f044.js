import{_ as n,a as s,b as a,c as t,d as e,e as p,f as o,g as i,h as l,i as c,j as u,k as r}from"./image-20230422182313455-ac07379b.js";import{_ as d,p as k,q as m,a1 as v}from"./framework-5866ffd3.js";const b="/FullStackNotes/assets/image-20230422140758272-a46d0787.png",g="/FullStackNotes/assets/image-20230422134023106-24612e0c.png",h={},f=v('<h1 id="go" tabindex="-1"><a class="header-anchor" href="#go" aria-hidden="true">#</a> Go</h1><p>官网：https://golang.org/#</p><p>Go中文网：https://studygolang.com/pkgdoc</p><p>dordon 金华鼠</p><p><img src="'+n+'" alt="image-20230422130547461"></p><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><h3 id="搭建环境" tabindex="-1"><a class="header-anchor" href="#搭建环境" aria-hidden="true">#</a> 搭建环境</h3><p>SDK下载：https://golang.google.cn/dl/。</p><p>下载完后傻瓜式安装</p><h3 id="验证是否安装成功" tabindex="-1"><a class="header-anchor" href="#验证是否安装成功" aria-hidden="true">#</a> 验证是否安装成功</h3><p>进入Go安装目录下的bin文件夹 --&gt; 打开 cmd --&gt; 输入 go version，如下证明安装成功</p><p><img src="'+s+'" alt="image-20230422133330495"></p><h3 id="配置环境变量" tabindex="-1"><a class="header-anchor" href="#配置环境变量" aria-hidden="true">#</a> 配置环境变量</h3><p>右击我的电脑 ---&gt; 属性 ---&gt; 高级系统设置 --- &gt; 环境变量，添加如下内容</p><p><img src="'+a+'" alt="image-20230422141010657"></p><p><img src="'+b+'" alt="image-20230422140758272"></p><p>PATH下</p><p><img src="'+t+'" alt="image-20230422133758491"></p><p><img src="'+g+'" alt="image-20230422134023106"></p><p>GOPATH表示GO项目的工作目录，即你存放GO项目的目录</p><h3 id="验证环境变量" tabindex="-1"><a class="header-anchor" href="#验证环境变量" aria-hidden="true">#</a> 验证环境变量</h3><p>重新打开 cmd 窗口---&gt; 输入 go version，输出如下说明成功</p><p><img src="'+e+'" alt="image-20230422134252050"></p><h3 id="目录层级" tabindex="-1"><a class="header-anchor" href="#目录层级" aria-hidden="true">#</a> 目录层级</h3><p><img src="'+p+`" alt="image-20230422134827244"></p><h3 id="helloworld" tabindex="-1"><a class="header-anchor" href="#helloworld" aria-hidden="true">#</a> helloworld</h3><p>在main下新建 hello.go 文件，内容如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main  <span class="token comment">// 把 test.go 归属到main</span>
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  <span class="token comment">// 引入一个包</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 输出hello</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 go 中，每个文件都必须属于一个包</p><p>go 文件的后缀是 .go</p><ul><li><p>package main： 表示 hello.go 文件所在包是 main</p></li><li><p>import &quot;fmt&quot;：表示引入一个包，引入该包后，就可以使用该包的函数</p></li><li><p>func main()：</p><ul><li>func 是关键字，表示一个函数</li><li>main 是函数名，是一个主函数，即我们程序的入口</li></ul></li><li><p>fmt.Println(&quot;hello&quot;)：调用 fmt 包的 Println 函数，输出 hello</p></li></ul><p>通过 go build 对 go 文件进行编译，生成 .exe 文件</p><p><img src="`+o+'" alt="image-20230422141150359"></p><p>也可以使用 go run 命令</p><p><img src="'+i+'" alt="image-20230422141226852"></p><h3 id="go执行流程" tabindex="-1"><a class="header-anchor" href="#go执行流程" aria-hidden="true">#</a> GO执行流程</h3><p>go build</p><p><img src="'+l+'" alt="image-20230422141436969"></p><p>go run</p><p><img src="'+c+'" alt="image-20230422141451875"></p><p><strong>区别：</strong></p><ul><li>如果我们先 go build 编译生成了 .exe 可执行文件，那么我们可以将该可执行文件拷贝到没有 go 开发环境的机器上，仍然可以运行</li><li>如果直接 go run ，那么在没有 go 开发环境的机器上，无法运行</li><li>在编译时，编译器会将程序运行依赖库的库文件包含在可执行文件中，所以，可执行文件变大了很多</li></ul><p><img src="'+u+`" alt="image-20230422143623318"></p><p><strong>注意事项：</strong></p><ul><li><p>有了 go 源文件，通过编译器将其编译成机器可以识别的二进制码文件</p></li><li><p>可以指定生成的可执行文件名，在 window 下必须以 .exe 结尾</p></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> build <span class="token operator">-</span>o myhello<span class="token punctuation">.</span>exe hello<span class="token punctuation">.</span><span class="token keyword">go</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果程序没有错误，则没有任何提示，会在当前目录下生成 .exe 可执行文件</p></li><li><p>如果程序有错误，编译时，会在错误的那一行报错</p></li></ul><h3 id="go程序开发注意事项" tabindex="-1"><a class="header-anchor" href="#go程序开发注意事项" aria-hidden="true">#</a> GO程序开发注意事项</h3><ul><li>Go源文件以 .go 结尾</li><li>Go应用程序的执行入口是 main() 方法</li><li>Go语言严格区分大小写</li><li>Go语句后不需要分号（Go语言会在每行后自动加分号）</li><li>Go编译器是一行一行进行编译的，因此一行只写一条语句，不要把多条语句写在同一行，否则报错</li><li>Go语言定义的变量或import的包如果没有用到，代码不能编译通过</li><li>大括号都是成对出现的，缺一不可</li></ul><h3 id="go语言的常用转义字符" tabindex="-1"><a class="header-anchor" href="#go语言的常用转义字符" aria-hidden="true">#</a> GO语言的常用转义字符</h3><p><code>\\t \\n \\\\ \\&quot; \\t</code></p><p><code>\\t</code> 一个制表位</p><p><code>\\n</code> 换行</p><p><code>\\\\</code> 一个\\</p><p><code>\\&quot;</code> 一个 &quot;</p><p><code>\\r</code> 一个回车（会从当前行的最前面开始输出，覆盖掉以前的内容）</p><h3 id="go语言代码风格" tabindex="-1"><a class="header-anchor" href="#go语言代码风格" aria-hidden="true">#</a> GO语言代码风格</h3><p>正确</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main  <span class="token comment">// 把 test.go 归属到main</span>
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  <span class="token comment">// 引入一个包</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 输出hello</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main  <span class="token comment">// 把 test.go 归属到main</span>
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  <span class="token comment">// 引入一个包</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
	<span class="token comment">// 输出hello</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、语法" tabindex="-1"><a class="header-anchor" href="#二、语法" aria-hidden="true">#</a> 二、语法</h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><p>GO有注释有两种</p><ul><li>行注释</li><li>块注释（多行）</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main  <span class="token comment">// 把 test.go 归属到main</span>
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  <span class="token comment">// 引入一个包</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 输出hello</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main 
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span> 
<span class="token comment">/*
func main() {
	fmt.Println(&quot;hello&quot;)
}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块注释不允许嵌套块注释</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>变量是程序的基本组成单位</p><p>变量相当于内存中一个数据存储空间得表示</p><p>变量使用得三种方式</p><ul><li>指定变量类型，声明后若不赋值，使用默认值</li><li>根据值自行判定为变量类型（类型推导）</li><li>省略 var，注意： = 左侧得变量不应该是已经声明过得</li><li>支持多变量声明</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main  
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> i <span class="token builtin">int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10.11</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num=&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    
    <span class="token comment">// 等价于 var name string	name = &quot;tom&quot;</span>
    name <span class="token operator">:=</span> <span class="token string">&quot;tom&quot;</span>
    
    <span class="token keyword">var</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3 <span class="token builtin">int</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;n1=&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token string">&quot;n2=&quot;</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">&quot;n3=&quot;</span><span class="token punctuation">,</span> n3<span class="token punctuation">)</span>
    
    <span class="token keyword">var</span> c1<span class="token punctuation">,</span> user<span class="token punctuation">,</span> c3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">777</span>
    
    b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3 <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;lucy&quot;</span><span class="token punctuation">,</span> <span class="token number">999</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">package</span> main  
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 定义变量 i 类型为 int</span>
	<span class="token keyword">var</span> i <span class="token builtin">int</span>
	<span class="token comment">// 给 i 赋值</span>
	i <span class="token operator">=</span> <span class="token number">10</span>
	<span class="token comment">// 使用变量 i</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>全局变量</strong></p><p>在函数外声明的变量就是全局变量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main  
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>  

<span class="token comment">// 定义全局变量</span>
<span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> n2 <span class="token operator">=</span> <span class="token number">200</span>
<span class="token keyword">var</span> n3 <span class="token operator">=</span> <span class="token string">&quot;zlw&quot;</span>

<span class="token comment">// 第二种方式</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
	n4 <span class="token operator">=</span> <span class="token number">90</span>
	n5 <span class="token operator">=</span> <span class="token string">&quot;mary&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n4<span class="token punctuation">,</span> n5<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>数字类型</td><td>整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td>字符串类型</td><td>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td>布尔型</td><td>布尔型的值只可以是常量 true 或者 false</td></tr><tr><td>派生类型</td><td>包括：指针类型（Pointer）、数组类型、结构化类型(struct)、Channel 类型、函数类型、切片类型、接口类型（interface）、Map 类型</td></tr></tbody></table><h4 id="数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型" aria-hidden="true">#</a> 数字类型</h4><p>超出范围报错</p><table><thead><tr><th>类型</th><th>描述</th><th>占用空间</th><th>表示范围</th></tr></thead><tbody><tr><td>uintptr</td><td>无符号整型，用于存放一个指针</td><td></td><td></td></tr><tr><td>uint</td><td>32 或 64 位</td><td>32位系统4字节，64位系统8字节</td><td>0 ~ 2^32-1，0 ~ 2^64-1</td></tr><tr><td>uint8</td><td>无符号 8 位整型 (0 到 255)</td><td>1字节</td><td>0 ~ 255</td></tr><tr><td>uint16</td><td>无符号 16 位整型 (0 到 65535)</td><td>2字节</td><td>0 ~ 2^16-1</td></tr><tr><td>uint32</td><td>无符号 32 位整型 (0 到 4294967295)</td><td>4字节</td><td>0 ~ 2^32-1</td></tr><tr><td>uint64</td><td>无符号 64 位整型 (0 到 18446744073709551615)</td><td>8字节</td><td>0 ~ 2^64-1</td></tr><tr><td>int</td><td>与 uint 一样大小</td><td>32位系统4字节，64位系统8字节</td><td>-2^31 ~ 2^31-1，-2^63 ~ 2^63-1</td></tr><tr><td>int8</td><td>有符号 8 位整型 (-128 到 127)</td><td>1字节</td><td>-128 ~ 127</td></tr><tr><td>int16</td><td>有符号 16 位整型 (-32768 到 32767)</td><td>2字节</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>int32</td><td>有符号 32 位整型 (-2147483648 到 2147483647)</td><td>4字节</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>int64</td><td>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td><td>8字节</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>byte</td><td>类似 uint8，无符号，当要存储字符时先用byte，go的字符串是由字节组成的</td><td>1字节</td><td>0 ~ 255</td></tr><tr><td>rune</td><td>类似 int32，有符号，表示一个 Unicode 码</td><td>4字节</td><td>-2^31 ~ 2^31-1</td></tr></tbody></table><h4 id="字符型" tabindex="-1"><a class="header-anchor" href="#字符型" aria-hidden="true">#</a> 字符型</h4><p>当要存储字符时选用byte，go的字符串是由字节组成的</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>byte</td><td>类似 uint8，无符号</td><td>1字节</td><td>0 ~ 255</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
<span class="token keyword">var</span> c2 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c1=&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>	<span class="token comment">// 97</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c2=&quot;</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span>	<span class="token comment">// 48</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>直接输出byte，相当于输出对应的字符的码值</p></li><li><p>如果我们希望输出对应字符，需要格式化输出</p></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
<span class="token keyword">var</span> c2 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c1=%c&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>	<span class="token comment">// a</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c2=%c&quot;</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span>	<span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>byte 不能存汉字，会报错</p></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token char">&#39;北&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c3=&quot;</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span>	<span class="token comment">// overflow 溢出</span>

<span class="token keyword">var</span> c4 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token char">&#39;北&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c4=%c, 码值=%d&quot;</span><span class="token punctuation">,</span> c4<span class="token punctuation">,</span>c4<span class="token punctuation">)</span>	<span class="token comment">// 北 21271</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果我们保存的字符在 ASCII 表，可直接使用 byte</p></li><li><p>如果我们保存的字符对应码值大于 255，这时考虑用 int</p></li><li><p>如果我们需要按照字符的方式输出，这时需要格式化输出</p></li></ul><h4 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型" aria-hidden="true">#</a> 布尔型</h4><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>bool</td><td>适合逻辑运算，true false</td><td>1字节</td><td>true false</td></tr></tbody></table><ul><li>不可以 0 或非 0 的整数替代 false或true</li></ul><h4 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h4><ul><li>GO语言字符串的字节使用 UTF-8 编码表示 Unicode 文本，不会有中文乱码问题</li><li>字符串一旦赋值，就不能修改，在Go中字符串是不可变的</li><li>字符串的表示形式 <ul><li>双引号，会识别转义字符</li><li>反引号，以字符串的原生形式输出，可防止攻击、输出源代码等效果</li></ul></li></ul><h4 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型" aria-hidden="true">#</a> 浮点型</h4><table><thead><tr><th>类型</th><th>描述</th><th>占用空间</th><th>表示范围</th></tr></thead><tbody><tr><td>float32</td><td>单精度浮点型数，有符号</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>float64</td><td>双精度浮点型数，有符号</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td></tr><tr><td>complex64</td><td>32 位实数和虚数</td><td></td><td></td></tr><tr><td>complex128</td><td>64 位实数和虚数</td><td></td><td></td></tr></tbody></table><p>浮点数 = 符号位 + 指数位 + 尾数位</p><p>尾数部分可能丢失，造成精度损失</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123.0000901</span>
<span class="token keyword">var</span> num2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123.0000901</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token comment">// 输出 -123.00009   -123.0000901</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>float64 比 float32 更准确</li><li>若要表示准确数，使用 float64</li></ul><h3 id="整型的使用细节" tabindex="-1"><a class="header-anchor" href="#整型的使用细节" aria-hidden="true">#</a> 整型的使用细节</h3><p>go 的整型默认声明为int</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;n1 的数据类型 %T&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token comment">// 输出 int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序中查看某个变量的字节大小和数据类型（使用较多）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;unsafe&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> n2 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;n2 的数据类型 %T, n2占用的字节数 %d&quot;</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 int64 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点型使用细节" tabindex="-1"><a class="header-anchor" href="#浮点型使用细节" aria-hidden="true">#</a> 浮点型使用细节</h3><p>go 的浮点型默认位 float64</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">1.1</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1 的数据类型 %T&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span> <span class="token comment">// 输出 float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点型有两种表示形式</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 十进制数形式  5.12   .512（必须有小数点）</span>
num2 <span class="token operator">:=</span> <span class="token number">5.12</span>
num3 <span class="token operator">:=</span> <span class="token number">.123</span>  <span class="token comment">// 等价于 0.123</span>

<span class="token comment">// 科学计数法形式</span>
num4 <span class="token operator">:=</span> <span class="token number">5.1234e2</span>  <span class="token comment">// 等价于 5.1234 * 10 的2次方</span>
num5 <span class="token operator">:=</span> <span class="token number">5.1234E2</span>  <span class="token comment">// 等价于 5.1234 * 10 的2次方</span>
num6 <span class="token operator">:=</span> <span class="token number">5.1234E-2</span>  <span class="token comment">// 等价于 5.1234 / 10 的2次方</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符类型使用细节" tabindex="-1"><a class="header-anchor" href="#字符类型使用细节" aria-hidden="true">#</a> 字符类型使用细节</h3><p>GO语言的字符使用 UTF-8编码</p><p>字符类型，可以进行运算，相当于一个整数，因为都有对应的 Unicode 码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">&#39;a&#39;</span>  <span class="token comment">// 10 + 97 = 107</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a1&quot;</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span> <span class="token comment">// 输出 107</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>英文字母1个字节，汉字3个字节</p><p>直接给某个变量赋一个数字，然后按格式化输出时 %c 会输出该数字对应的 Unicode 字符</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> c5 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">22269</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;c5 %c&quot;</span><span class="token punctuation">,</span> c5<span class="token punctuation">)</span> <span class="token comment">// 输出 国</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符型存储到计算机中，需要将字符对应的码值找出来</p><ul><li>存储： 字符 ---&gt; 找到对应码值 ---&gt; 转为二进制 ---&gt; 存储</li><li>读取: 拿到对应二进制 ---&gt; 转为对应码值 ---&gt; 找到对应字符 ---&gt; 读取</li></ul><p>utf8码值表：http://www.mytju.com/classcode/tools/encode_utf8.asp</p><h3 id="string使用细节" tabindex="-1"><a class="header-anchor" href="#string使用细节" aria-hidden="true">#</a> string使用细节</h3><p>加号拼接时， <code>+</code>要留在上面一行，否则报错</p><h3 id="基本数据类型默认值" tabindex="-1"><a class="header-anchor" href="#基本数据类型默认值" aria-hidden="true">#</a> 基本数据类型默认值</h3><p>默认值又叫零值</p><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>整型</td><td>0</td></tr><tr><td>浮点型</td><td>0</td></tr><tr><td>字符串</td><td>&quot;&quot;</td></tr><tr><td>布尔类型</td><td>false</td></tr></tbody></table><h3 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h3><p>GO在不同类型的变量之间赋值时，需要显示转换。也就是说Go中数据类型不能自动转换</p><p>语法：T(v) 将值v转换为类型T</p><ul><li>T：就是数据类型，如int32...</li><li>v：就是需要转换的变量</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> n1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">var</span> n2 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">var</span> n3 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 低精度 ==》 高精度 也需要转换</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v, %v, %v, %v&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span> <span class="token comment">// 100 100 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>细节</strong></p><ul><li>GO，数据类型转换可以从 小=&gt; 大，也可以从 大=&gt;小</li><li>被转换的是变量存储的数据，变量本身的数据类型没有变化</li><li>int64 =&gt; int8 不会报错，知识转换结果按溢出处理，和期望结果不一样</li></ul><h3 id="基本数据类型和string转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型和string转换" aria-hidden="true">#</a> 基本数据类型和string转换</h3><p>两种方式</p><ul><li>fmt.Sprintf(&quot;%参数&quot;, 表达式)</li><li>strconv 包的函数</li></ul><p><strong>fmt.Sprintf(&quot;%参数&quot;, 表达式)</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span>
<span class="token keyword">var</span> num2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">23.456</span>
<span class="token keyword">var</span> b <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">var</span> myChar <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;h&#39;</span>
<span class="token keyword">var</span> str <span class="token builtin">string</span>  <span class="token comment">// 空的str</span>

str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string 99</span>

str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string 23.456000</span>

str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%t&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string true</span>

str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>strconv</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> num3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span>
<span class="token keyword">var</span> num4 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">23.456</span>
<span class="token keyword">var</span> b2 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>

str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string 99</span>

<span class="token comment">// &#39;f&#39;：格式  10：保留10位小数   64：表示这个小数是float64</span>
str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>num4<span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string 23.4560000000</span>

str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;str Type %T str=%v&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>  <span class="token comment">// string true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string转基本数据类型" tabindex="-1"><a class="header-anchor" href="#string转基本数据类型" aria-hidden="true">#</a> string转基本数据类型</h3><p>使用 strconv 包</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span>
<span class="token keyword">var</span> b <span class="token builtin">bool</span>

<span class="token comment">// strconv.ParseBool() 会返回两个值 bool, error</span>
<span class="token comment">// 因为我只想获取 bool, 所以 使用 _ 忽略另一个值</span>
b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;b Type %T b=%v&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 输出 bool true</span>

<span class="token keyword">var</span> str2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;1234590&quot;</span>
<span class="token keyword">var</span> n1 <span class="token builtin">int64</span>
n1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;n1 Type %T n1=%v&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token comment">// 输出 int64 1234590</span>

<span class="token keyword">var</span> str3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;123.456&quot;</span>
<span class="token keyword">var</span> f1 <span class="token builtin">float64</span>
f1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;f1 Type %T f1=%v&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token comment">// 输出 float64 123.456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在进行 string 与基本数据类型时，要确保 string 能转换成有效的数据，否则 GO 会直接转换成转换后类型的默认值</li><li>如： &quot;123&quot; =&gt; 123 &quot;hello&quot; =&gt; 0</li></ul><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h2><p>基本数据类型，变量存的就是值，也叫值类型</p><p>获取变量的地址，用 &amp; 如： var num int 获取num的地址： &amp;num</p><p>指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值 。如： var ptr *int = &amp;num</p><p>获取指针类型所指向的值，使用 <code>*</code>。比如：var ptr *int。使用 *ptr获取ptr指向的值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num的地址=%v&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span>	   <span class="token comment">// 0xc042052038</span>
<span class="token comment">// ptr 是一个指针变量 </span>
<span class="token comment">// ptr 的类型是 *int</span>
<span class="token comment">// ptr 本身的值是 &amp;num </span>
<span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>num
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;ptr=%v&quot;</span><span class="token punctuation">,</span> prt<span class="token punctuation">)</span> 			<span class="token comment">// 0xc042052038</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;ptr的地址=%v&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>prt<span class="token punctuation">)</span>	  <span class="token comment">// 0xc042064020</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;ptr指向的值=%v&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>prt<span class="token punctuation">)</span>	 <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image-20230422182313455"></p><p><strong>细节：</strong></p><ul><li>每个值类型，都有对应的指针类型，形式为 <code>*数据类型</code>，比如： int 对应的指针类型为 <code>*int</code>，float32对应的指针类型就是 <code>*float</code>，依此类推</li><li>值类型包括： <ul><li>基本数据类型： int，float，bool，string</li><li>数组</li><li>结构体struct</li></ul></li></ul><h2 id="值类型和引用类型" tabindex="-1"><a class="header-anchor" href="#值类型和引用类型" aria-hidden="true">#</a> 值类型和引用类型</h2><p>值类型：基本数据类型、数组、结构体struct</p><p>引用类型：指针、slice切片、map、chan管道、interface等</p><p><strong>区别：</strong></p><p>值类型：变量直接存储值，内存通常分配在栈中</p><p>引用类型：变量存储地址，这个地址对应的空间才真正存储值，内存通常分配在堆中，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收</p><h2 id="标识符命名规范" tabindex="-1"><a class="header-anchor" href="#标识符命名规范" aria-hidden="true">#</a> 标识符命名规范</h2><p>GO对各种变量、方法、函数等命名时使用的字符序列称为标识符</p><p>通俗的讲：凡是自己起名字的地方都叫标识符</p><p>标识符命名规则：</p><ul><li>由字母、数字、_ 组成，不能以数字开头</li><li>严格区分大小写</li><li>不能有空格</li><li>不能以系统保留关键字作为标识符</li><li>_ 下划线不能单独使用</li></ul><p>下划线本身在GO中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是他对应的值会被忽略（比如：忽略某个返回值）。座椅</p><p><strong>注意事项：</strong></p><p>包名：保持package的名字和目录保持一致</p><p>变量名、函数名、常量名：采用驼峰法</p><p>go特性：若 变量名、函数名、常量名 首字母大写，则可以被其它包访问，小写则只能在本包使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> model

<span class="token keyword">var</span> heroName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;张林伟&quot;</span>
<span class="token keyword">var</span> Age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">24</span>

<span class="token comment">// = = = = = = = = = = = = = = = 分割线 = = = = = = = = = = = =</span>

<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;go_code/model/model&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>heroName<span class="token punctuation">)</span>  <span class="token comment">// 报错，因为heroName首字母小写，不可在其它包使用</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>  <span class="token comment">// 没有问题，正常使用</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,166),q=[f];function y(w,x){return k(),m("div",null,q)}const G=d(h,[["render",y],["__file","Go.html.vue"]]);export{G as default};
