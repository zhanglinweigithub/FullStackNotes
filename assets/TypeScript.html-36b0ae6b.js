import{_ as s,p as n,q as a,a1 as e}from"./framework-5866ffd3.js";const p="/FullStackNotes/assets/image-20221211150724784-8d43834f.png",t="/FullStackNotes/assets/image-20221211154936587-048fa667.png",o="/FullStackNotes/assets/image-20221211155006990-d79a40a5.png",r="/FullStackNotes/assets/image-20221211155130121-790eecc2.png",l="/FullStackNotes/assets/image-20221211155847573-b530ffc0.png",c="/FullStackNotes/assets/image-20221211155936251-146ece22.png",i="/FullStackNotes/assets/image-20221211160007391-4ea2f384.png",d="/FullStackNotes/assets/image-20221211160031581-6b3ee272.png",u={},k=e(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><p>TypeScript属于静态类型，在代码运行前，就对他的行为作出预测</p><p>TypeScript代码不能直接运行，需要通过编译器编译成JavaScript代码运行，最终运行的还是JavaScript代码</p><p>TypeScript只是在我们写代码时，做一个检查</p><p>例：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//TypeScript	hello.ts
function test (obj:string) {
    console.log(obj.toUpperCase())
}

test(&quot;hello&quot;)//不会报错
test(123) //会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript编译器" tabindex="-1"><a class="header-anchor" href="#typescript编译器" aria-hidden="true">#</a> TypeScript编译器</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>npm install -g sypescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tsc .\\hello.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译之后会生成一个同名的js文件,内容会进行类型的擦除，文件有错误的话是不能通过编译的</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//JavaScript	hello.js
function test (obj) {
    console.log(obj.toUpperCase());
}

test(&quot;hello&quot;);//不会报错
//test(123) //会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript支持的类型" tabindex="-1"><a class="header-anchor" href="#typescript支持的类型" aria-hidden="true">#</a> TypeScript支持的类型</h2><p>注意大小写</p><p><img src="`+p+`" alt="image-20221211150724784"></p><p>前5个为简单类型</p><h3 id="可标注的位置" tabindex="-1"><a class="header-anchor" href="#可标注的位置" aria-hidden="true">#</a> <strong>可标注的位置</strong></h3><p>标注变量、标注参数、标注返回值</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//标注变量，一般可以省略，可以根据后面的字面量推断出前面变量类型
let message:string = &#39;hello,world&#39;
let message = &#39;hello,world&#39;//省略写法

//标注参数
function greet(name:string){
    
}
const names = [&#39;Alice&#39;,&#39;Bob&#39;,&#39;Eve&#39;]
const lowercaseNames = name.map((e:string) =&gt; e.toLowerCase())//这个e的类型也可以省略，name里的参数只有string
console.log(lowercaseNames)

//标注返回值
function add(a:number,b:number):number{//返回值类型也可以省略，因为a+b得到的肯定是数字类型
    return a+b
}
console.log(add(10,20))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂类型的定义" tabindex="-1"><a class="header-anchor" href="#复杂类型的定义" aria-hidden="true">#</a> 复杂类型的定义</h2><p>type、interface</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//必须跟指定的类型一样，多一个参数不行，少一个参数也不行</span>
type Cat <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">cl</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小白&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">c2</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">}</span><span class="token comment">//报错</span>
<span class="token keyword">const</span> <span class="token literal-property property">c3</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小蓝&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;公&#39;</span><span class="token punctuation">}</span><span class="token comment">//报错</span>
<span class="token comment">//分割线</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">cl</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小白&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">c2</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">}</span><span class="token comment">//报错</span>
<span class="token keyword">const</span> <span class="token literal-property property">c3</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小蓝&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;公&#39;</span><span class="token punctuation">}</span><span class="token comment">//报错</span>

<span class="token comment">//分割线</span>
<span class="token comment">//参数后面加上 ？ 表示可选，可以不传</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    age<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">cl</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小白&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">c2</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">c3</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小蓝&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;公&#39;</span><span class="token punctuation">}</span><span class="token comment">//报错</span>

<span class="token comment">//分割线</span>
<span class="token comment">//当一个参数没有指定类型时，他传给一个指定类型的参数时，会采用鸭子类型，即他俩长得像就可以赋值</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    age<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">cl</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小白&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">c2</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> c3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小蓝&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;公&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cat</span><span class="token operator">:</span>Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token comment">//报错</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字面量类型" tabindex="-1"><a class="header-anchor" href="#字面量类型" aria-hidden="true">#</a> 字面量类型</h3><p>这样写我们的第二个参数在传递时就只能是给定的几个之一</p><p><img src="`+t+'" alt="image-20221211154936587"></p><h3 id="nullish类型" tabindex="-1"><a class="header-anchor" href="#nullish类型" aria-hidden="true">#</a> nullish类型</h3><p>null、undefined不属于字符串类型</p><p><img src="'+o+'" alt="image-20221211155006990"></p><p>？表示可选，不传就是undefined</p><p><img src="'+r+'" alt="image-20221211155130121"></p><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>正常定义对象</p><p><img src="'+l+'" alt="image-20221211155847573"></p><p>使用泛型改进</p><p><img src="'+c+'" alt="image-20221211155936251"></p><p>正常定义函数</p><p><img src="'+i+'" alt="image-20221211160007391"></p><p>使用泛型进行改进</p><p><img src="'+d+'" alt="image-20221211160031581"></p>',40),m=[k];function v(b,y){return n(),a("div",null,m)}const h=s(u,[["render",v],["__file","TypeScript.html.vue"]]);export{h as default};
