import{_ as c,M as o,p as l,q as i,R as n,N as e,V as t,t as a,a1 as u}from"./framework-5866ffd3.js";const d="/FullStackNotes/assets/image-20210718174328383-8bd94c61.png",r="/FullStackNotes/assets/image-20210718174416160-a054c24d.png",p="/FullStackNotes/assets/image-20210718174506856-b6f7e1ae.png",k="/FullStackNotes/assets/image-20210821073801398-0bf18f0f.png",m="/FullStackNotes/assets/image-20210718182643311-38ab6213.png",g="/FullStackNotes/assets/image-20210718191657478-65182d6d.png",v="/FullStackNotes/assets/image-20210718191738706-64272140.png",b="/FullStackNotes/assets/image-20210718191939140-4c00060c.png",h="/FullStackNotes/assets/image-20210718192004662-d82a3197.png",f="/FullStackNotes/assets/image-20210718192529342-7c8e7569.png",x="/FullStackNotes/assets/image-20210713104511055-1ba38326.png",q="/FullStackNotes/assets/image-20210713105135701-8e3afb2f.png",_="/FullStackNotes/assets/image-20210713105339785-b39744a3.png",y="/FullStackNotes/assets/image-20210713105829435-4baf92e3.png",w="/FullStackNotes/assets/image-20210718193747649-acab4a34.png",D="/FullStackNotes/assets/image-20210718193831076-567bf376.png",T="/FullStackNotes/assets/image-20210718193917009-36270fc8.png",Q={},S=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),B={class:"table-of-contents"},E=u('<h2 id="死信交换机" tabindex="-1"><a class="header-anchor" href="#死信交换机" aria-hidden="true">#</a> 死信交换机</h2><p>什么是死信？</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用<code>basic.reject</code>或 <code>basic.nack</code>声明消费失败，并且消息的<code>requeue</code>参数设置为<code>false</code></li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果这个包含死信的队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，简称DLX）。</p><p>如图，一个消息被消费者拒绝了，变成了死信：</p><p><img src="'+d+'" alt="image-20210718174328383"></p><p>因为<code>simple.queue</code>绑定了死信交换机 <code>dl.direct</code>，因此死信会投递给这个交换机：</p><p><img src="'+r+'" alt="image-20210718174416160"></p><p>如果这个死信交换机也绑定了一个队列，则消息最终会进入这个存放死信的队列：</p><p><img src="'+p+'" alt="image-20210718174506856"></p><p>另外，队列将死信投递给死信交换机时，必须知道两个信息：</p><ul><li>死信交换机名称</li><li>死信交换机与死信队列绑定的<code>RoutingKey</code></li></ul><p>这样才能确保投递的消息能到达死信交换机，并且正确的路由到死信队列。</p><p><img src="'+k+'" alt="image-20210821073801398"></p><h3 id="利用死信交换机接收死信" tabindex="-1"><a class="header-anchor" href="#利用死信交换机接收死信" aria-hidden="true">#</a> 利用死信交换机接收死信</h3><p>在失败重试策略中，默认的<code>RejectAndDontRequeueRecoverer</code>会在本地重试次数耗尽后，发送<code>reject</code>给<code>RabbitMQ</code>，消息变成死信，被丢弃。</p><p>我们可以给<code>simple.queue</code>添加一个死信交换机，给死信交换机绑定一个队列。这样消息变成死信后也不会丢弃，而是最终投递到死信交换机，路由到与死信交换机绑定的队列。</p><p><img src="'+p+`" alt="image-20210718174506856"></p><p>我们在<code>consumer</code>服务中，定义一组死信交换机、死信队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 声明普通的 simple.queue队列，并且为其指定死信交换机：dl.direct</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>
        <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.direct&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 声明死信交换机 dl.direct</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 声明存储死信的队列 dl.queue</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;dl.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将死信队列 与 死信交换机绑定</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">dlBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;simple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>什么样的消息会成为死信？</p><ul><li>消息被消费者<code>reject</code>或者返回<code>nack</code></li><li>消息超时未消费</li><li>队列满了</li></ul><p>死信交换机的使用场景是什么？</p><ul><li>如果队列绑定了死信交换机，死信会投递到死信交换机；</li><li>可以利用死信交换机收集所有消费者处理失败的消息（死信），交由人工处理，进一步提高消息队列的可靠性。</li></ul><h2 id="ttl" tabindex="-1"><a class="header-anchor" href="#ttl" aria-hidden="true">#</a> TTL</h2><p>一个队列中的消息如果超时未消费，则会变为死信，超时分为两种情况：</p><ul><li>消息所在的队列设置了超时时间</li><li>消息本身设置了超时时间</li></ul><p><img src="`+m+`" alt="image-20210718182643311"></p><h3 id="接收超时死信的死信交换机" tabindex="-1"><a class="header-anchor" href="#接收超时死信的死信交换机" aria-hidden="true">#</a> 接收超时死信的死信交换机</h3><p>在<code>consumer</code>服务的<code>SpringRabbitListener</code>中，定义一个新的消费者，并且声明 死信交换机、死信队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dl.ttl.queue&quot;</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dl.ttl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    key <span class="token operator">=</span> <span class="token string">&quot;ttl&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenDlQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到 dl.ttl.queue的延迟消息：{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明一个队列-并且指定ttl" tabindex="-1"><a class="header-anchor" href="#声明一个队列-并且指定ttl" aria-hidden="true">#</a> 声明一个队列，并且指定TTL</h3><p>要给队列设置超时时间，需要在声明队列时配置<code>x-message-ttl</code>属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>
        <span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment">// 设置队列的超时时间，10秒</span>
        <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.ttl.direct&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这个队列设定了死信交换机为<code>dl.ttl.direct</code></p><p>声明交换机，将ttl与交换机绑定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">ttlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">ttlBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">ttlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;ttl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息，但是不要指定TTL：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTTLQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建消息</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, ttl queue&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttl&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录日志</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息的日志：</p><p><img src="`+g+'" alt="image-20210718191657478"></p><p>查看下接收消息的日志：</p><p><img src="'+v+`" alt="image-20210718191738706"></p><p>因为队列的<code>TTL</code>值是10000ms，也就是10秒。可以看到消息发送与接收之间的时差刚好是10秒。</p><h3 id="发送消息时-设定ttl" tabindex="-1"><a class="header-anchor" href="#发送消息时-设定ttl" aria-hidden="true">#</a> 发送消息时，设定TTL</h3><p>在发送消息时，也可以指定<code>TTL</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTTLMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建消息</span>
    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
        <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello, ttl message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token string">&quot;5000&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttl&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看发送消息日志：</p><p><img src="`+b+'" alt="image-20210718191939140"></p><p>接收消息日志：</p><p><img src="'+h+'" alt="image-20210718192004662"></p><p>这次，发送与接收的延迟只有5秒。说明当队列、消息都设置了<code>TTL</code>时，任意一个到期就会成为死信。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>消息超时的两种方式是？</p><ul><li>给队列设置<code>ttl</code>属性，进入队列后超过<code>ttl</code>时间的消息变为死信</li><li>给消息设置<code>ttl</code>属性，队列接收到消息超过<code>ttl</code>时间后变为死信</li></ul><h2 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列" aria-hidden="true">#</a> 延迟队列</h2><p>利用<code>TTL</code>结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为延迟队列（Delay Queue）模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15 分钟内未支付，则自动取消</li><li>预约工作会议，20分钟后自动通知所有参会人员</li></ul><p>因为延迟队列的需求非常多，所以<code>RabbitMQ</code>的官方也推出了一个插件，原生支持延迟队列效果。</p><p>这个插件就是<code>DelayExchange</code>插件。</p><p>参考<code>RabbitMQ</code>的插件列表页面：https://www.rabbitmq.com/community-plugins.html</p><p><img src="'+f+'" alt="image-20210718192529342"></p><p>使用方式可以参考官网地址：https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</p><h3 id="安装delayexchange插件" tabindex="-1"><a class="header-anchor" href="#安装delayexchange插件" aria-hidden="true">#</a> 安装DelayExchange插件</h3><p>这里为基于Docker来安装RabbitMQ插件。</p><blockquote><p>基于linux原生安装RabbitMQ，然后安装插件指南地址为：https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</p></blockquote><h4 id="下载插件" tabindex="-1"><a class="header-anchor" href="#下载插件" aria-hidden="true">#</a> 下载插件</h4><p><code>RabbitMQ</code>有一个官方的插件社区，地址为：https://www.rabbitmq.com/community-plugins.html</p><p>其中包含各种各样的插件，包括我们要使用的<code>DelayExchange</code>插件：</p><p><img src="'+x+`" alt="image-20210713104511055"></p><p>大家可以去对应的<code>GitHub</code>页面下载<code>3.8.9</code>版本的插件，地址为https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9这个对应<code>RabbitMQ</code>的<code>3.8.5</code>以上版本。</p><h4 id="上传插件" tabindex="-1"><a class="header-anchor" href="#上传插件" aria-hidden="true">#</a> 上传插件</h4><p>因为我们是基于<code>Docker</code>安装，所以需要先查看<code>RabbitMQ</code>的插件目录对应的数据卷。</p><p>我们之前设定的<code>RabbitMQ</code>的数据卷名称为<code>mq-plugins</code>，所以我们使用下面命令查看数据卷：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect mq-plugins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以得到下面结果：</p><p><img src="`+q+'" alt="image-20210713105135701"></p><p>接下来，将插件上传到这个目录即可：</p><p><img src="'+_+`" alt="image-20210713105339785"></p><h4 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件" aria-hidden="true">#</a> 安装插件</h4><p>最后就是安装了，需要进入<code>MQ</code>容器内部来执行安装。我的容器名为<code>mq</code>，所以执行下面命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行时，请将其中的 <code>-it</code> 后面的<code>mq</code>替换为你自己的容器名.</p><p>进入容器内部后，执行下面命令开启插件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下：</p><p><img src="`+y+'" alt="image-20210713105829435"></p><h3 id="delayexchange原理" tabindex="-1"><a class="header-anchor" href="#delayexchange原理" aria-hidden="true">#</a> DelayExchange原理</h3><p><code>DelayExchange</code>需要将一个交换机声明为<code>delayed</code>类型。当我们发送消息到<code>delayExchange</code>时，流程如下：</p><ul><li>接收消息</li><li>判断消息是否具备x-delay属性</li><li>如果有<code>x-delay</code>属性，说明是延迟消息，持久化到硬盘，读取<code>x-delay</code>值，作为延迟时间</li><li>返回<code>routing not found</code>结果给消息发送者</li><li><code>x-delay</code>时间到期后，重新投递消息到指定队列</li></ul><h3 id="使用delayexchange" tabindex="-1"><a class="header-anchor" href="#使用delayexchange" aria-hidden="true">#</a> 使用DelayExchange</h3><p>插件的使用也非常简单：声明一个交换机，交换机的类型可以是任意类型，只需要设定<code>delayed</code>属性为<code>true</code>即可，然后声明队列与其绑定即可。</p><h4 id="_1-声明delayexchange交换机" tabindex="-1"><a class="header-anchor" href="#_1-声明delayexchange交换机" aria-hidden="true">#</a> 1）声明DelayExchange交换机</h4><p>基于注解方式（推荐）：</p><p><img src="'+w+'" alt="image-20210718193747649"></p><p>也可以基于@Bean的方式：</p><p><img src="'+D+'" alt="image-20210718193831076"></p><h4 id="_2-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-发送消息" aria-hidden="true">#</a> 2）发送消息</h4><p>发送消息时，一定要携带<code>x-delay</code>属性，指定延迟的时间：</p><p><img src="'+T+'" alt="image-20210718193917009"></p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><p>延迟队列插件的使用步骤包括哪些？</p><p>•声明一个交换机，添加<code>delayed</code>属性为<code>true</code></p><p>•发送消息时，添加<code>x-delay</code>头，值为超时时间</p>',107);function j(N,L){const s=o("router-link");return l(),i("div",null,[S,n("nav",B,[n("ul",null,[n("li",null,[e(s,{to:"#死信交换机"},{default:t(()=>[a("死信交换机")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#利用死信交换机接收死信"},{default:t(()=>[a("利用死信交换机接收死信")]),_:1})]),n("li",null,[e(s,{to:"#总结"},{default:t(()=>[a("总结")]),_:1})])])]),n("li",null,[e(s,{to:"#ttl"},{default:t(()=>[a("TTL")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#接收超时死信的死信交换机"},{default:t(()=>[a("接收超时死信的死信交换机")]),_:1})]),n("li",null,[e(s,{to:"#声明一个队列-并且指定ttl"},{default:t(()=>[a("声明一个队列，并且指定TTL")]),_:1})]),n("li",null,[e(s,{to:"#发送消息时-设定ttl"},{default:t(()=>[a("发送消息时，设定TTL")]),_:1})]),n("li",null,[e(s,{to:"#总结-1"},{default:t(()=>[a("总结")]),_:1})])])]),n("li",null,[e(s,{to:"#延迟队列"},{default:t(()=>[a("延迟队列")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#安装delayexchange插件"},{default:t(()=>[a("安装DelayExchange插件")]),_:1})]),n("li",null,[e(s,{to:"#delayexchange原理"},{default:t(()=>[a("DelayExchange原理")]),_:1})]),n("li",null,[e(s,{to:"#使用delayexchange"},{default:t(()=>[a("使用DelayExchange")]),_:1})]),n("li",null,[e(s,{to:"#总结-2"},{default:t(()=>[a("总结")]),_:1})])])])])]),E])}const R=c(Q,[["render",j],["__file","DelayQueue.html.vue"]]);export{R as default};
