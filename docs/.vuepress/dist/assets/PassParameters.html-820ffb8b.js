import{_ as p,M as o,p as c,q as l,R as n,N as t,V as e,t as s,a1 as i}from"./framework-5866ffd3.js";const u={},r=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),d={class:"table-of-contents"},k=i(`<h2 id="mybatis传参的几种方式" tabindex="-1"><a class="header-anchor" href="#mybatis传参的几种方式" aria-hidden="true">#</a> MyBatis传参的几种方式</h2><h3 id="传递一个参数" tabindex="-1"><a class="header-anchor" href="#传递一个参数" aria-hidden="true">#</a> <strong>传递一个参数</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> <span class="token function">getByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Mapper.xml</code>引用这个<code>name</code>参数：<code>#{任意合法名称}</code></p><ul><li>当一个参数的 时候 <code>#{变量名称}</code> 中变量名称可以随意写，都可以取到传入的参数</li></ul><h3 id="传递一个map参数" tabindex="-1"><a class="header-anchor" href="#传递一个map参数" aria-hidden="true">#</a> <strong>传递一个Map参数</strong></h3><p>如果我们需要传递的参数比较多，参数个数是动态的，那么我们可以将这些参数放在一个<code>map</code>中，<code>key</code> 为参数名称，<code>value</code>为参数的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//我们传递</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张学友&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Mapper接口中可以这么定义</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//对应的mapper xml中可以通过 #{map中的key} 可以获取key在map中对应的value的值作为参数</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_user <span class="token class-name">WHERE</span> id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token class-name">OR</span> name <span class="token operator">=</span> #<span class="token punctuation">{</span>name<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传递一个java对象参数" tabindex="-1"><a class="header-anchor" href="#传递一个java对象参数" aria-hidden="true">#</a> <strong>传递一个java对象参数</strong></h3><p>当参数比较多，但是具体有多少个参数我们是确定的时候，我们可以将这些参数放在一个<code>javabean</code>对象 中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Mapper</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">&gt;</span></span> <span class="token function">getListByUserFindDto</span><span class="token punctuation">(</span><span class="token class-name">UserFindDto</span> userFindDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//对应的UserMapper.xml中这么写</span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getListByUserFindDto&quot;</span>
	parameterType<span class="token operator">=</span><span class="token string">&quot;com.javacode2018.chat03.demo4.dto.UserFindDto&quot;</span>
	resultType<span class="token operator">=</span><span class="token string">&quot;com.javacode2018.chat03.demo4.model.UserModel&quot;</span><span class="token operator">&gt;</span>
    
	<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_user <span class="token class-name">WHERE</span> id<span class="token operator">=</span>#<span class="token punctuation">{</span>userId<span class="token punctuation">}</span> <span class="token class-name">OR</span> name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>传递<code>java</code>对象的方式相对于<code>map</code>的方式更清晰一些，可以明确知道具体有哪些参数，而传递<code>map</code>，我们是不知道这个<code>map</code>中具体需要哪些参数的，<code>map</code>对参数也没有约束，参数可以随意传，建议多个参 数的情况下选择通过<code>java</code>对象进行传参</li></ul><h3 id="传递多个参数" tabindex="-1"><a class="header-anchor" href="#传递多个参数" aria-hidden="true">#</a> 传递多个参数</h3><p>上面我们介绍的都是传递一个参数，那么是否可以传递多个参数呢？我们来试试吧</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Mapper</span>
<span class="token class-name">UserModel</span> <span class="token function">getByIdOrName</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Mapper.xml</span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getByIdOrName&quot;</span>
	resultType<span class="token operator">=</span><span class="token string">&quot;com.javacode2018.chat03.demo4.model.UserModel&quot;</span><span class="token operator">&gt;</span>

	<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_user <span class="token class-name">WHERE</span> id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token class-name">OR</span> name <span class="token operator">=</span> #<span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token constant">LIMIT</span> <span class="token number">1</span>  <span class="token comment">//报错 Available parameters are [arg1, arg0, param1, param2]</span>
	<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_user <span class="token class-name">WHERE</span> id<span class="token operator">=</span>#<span class="token punctuation">{</span>arg0<span class="token punctuation">}</span> <span class="token class-name">OR</span> name <span class="token operator">=</span> #<span class="token punctuation">{</span>arg1<span class="token punctuation">}</span> <span class="token constant">LIMIT</span> <span class="token number">1</span>  <span class="token comment">//正常</span>
    <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_user <span class="token class-name">WHERE</span> id<span class="token operator">=</span>#<span class="token punctuation">{</span>param1<span class="token punctuation">}</span> <span class="token class-name">OR</span> name <span class="token operator">=</span> #<span class="token punctuation">{</span>param2<span class="token punctuation">}</span> <span class="token constant">LIMIT</span> <span class="token number">1</span>  <span class="token comment">//正常</span>
    
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mybatis处理多个参数的时候，会将多个参数封装到一个map中，map的key为参数的名称，java可以通 过反射获取方法参数的名称</li><li>编译之后，方法参数的名称通过反射获取的并不是 <code>id</code>、<code>name</code> ，而是 <code>arg0</code>、<code>arg1</code></li><li>也就是说编译之 后，方法真实的参数名称会丢失，会变成 arg+参数下标 的格式</li></ul><h3 id="传递1个collection参数" tabindex="-1"><a class="header-anchor" href="#传递1个collection参数" aria-hidden="true">#</a> 传递1个Collection参数</h3><p>当传递的参数类型是 java.util.Collection 的时候，会被放在<code>map</code>中，<code>key</code>为 <code>collection</code> ，<code>value</code> 为参数的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Mapper</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">&gt;</span></span> <span class="token function">getListByIdCollection</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idCollection<span class="token punctuation">)</span>
    
<span class="token comment">//xml</span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getListByIdCollection&quot;</span>
resultType<span class="token operator">=</span><span class="token string">&quot;com.javacode2018.chat03.demo4.model.UserModel&quot;</span><span class="token operator">&gt;</span>

	<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_user <span class="token constant">WHERE</span> id <span class="token constant">IN</span> <span class="token punctuation">(</span>#<span class="token punctuation">{</span>collection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>collection<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集合参数，<code>mybatis</code>会进行一些特殊处理,源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;collection&quot;</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> map<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> map<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断参数是否是 <code>java.util.Collection</code> 类型，如果是，会放在<code>map</code>中，key为 <code>collection</code> 。</li><li>如果参数是 <code>java.util.List</code> 类型的，会在<code>map</code>中继续放一个 <code>list</code> 作为<code>key</code>来引用这个对象。</li><li>如果参数是数组类型的，会通过 <code>array</code> 来引用这个对象</li></ul>`,22);function m(v,b){const a=o("router-link");return c(),l("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#mybatis传参的几种方式"},{default:e(()=>[s("MyBatis传参的几种方式")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#传递一个参数"},{default:e(()=>[s("传递一个参数")]),_:1})]),n("li",null,[t(a,{to:"#传递一个map参数"},{default:e(()=>[s("传递一个Map参数")]),_:1})]),n("li",null,[t(a,{to:"#传递一个java对象参数"},{default:e(()=>[s("传递一个java对象参数")]),_:1})]),n("li",null,[t(a,{to:"#传递多个参数"},{default:e(()=>[s("传递多个参数")]),_:1})]),n("li",null,[t(a,{to:"#传递1个collection参数"},{default:e(()=>[s("传递1个Collection参数")]),_:1})])])])])]),k])}const h=p(u,[["render",m],["__file","PassParameters.html.vue"]]);export{h as default};
