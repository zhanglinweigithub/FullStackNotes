import{_ as t,M as l,p as c,q as o,R as a,N as e,V as i,t as n,a1 as r}from"./framework-5866ffd3.js";const p="/FullStackNotes/assets/image-20210718220843323-4beadc93.png",d="/FullStackNotes/assets/image-20210717222833196-62143779.png",m="/FullStackNotes/assets/image-20210717223057902-4021e495.png",u="/FullStackNotes/assets/image-20210717223421750-e6095333.png",b="/FullStackNotes/assets/image-20210717223320238-56ec0ef4.png",v="/FullStackNotes/assets/image-20210717223603628-a407fd64.png",k="/FullStackNotes/assets/image-20210717223800203-b706ca9d.png",h={},g=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),q={class:"table-of-contents"},f=r('<h2 id="mq集群" tabindex="-1"><a class="header-anchor" href="#mq集群" aria-hidden="true">#</a> MQ集群</h2><h3 id="集群分类" tabindex="-1"><a class="header-anchor" href="#集群分类" aria-hidden="true">#</a> 集群分类</h3><p><code>RabbitMQ</code>的是基于<code>Erlang</code>语言编写，而<code>Erlang</code>又是一个面向并发的语言，天然支持集群模式。<code>RabbitMQ</code>的集群有两种模式：</p><p>•<strong>普通集群</strong>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p><p>•<strong>镜像集群</strong>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p><p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在<code>RabbitMQ的3.8</code>版本以后，推出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采用<code>Raft</code>协议确保主从的数据一致性。</p><h2 id="普通集群" tabindex="-1"><a class="header-anchor" href="#普通集群" aria-hidden="true">#</a> 普通集群</h2><h3 id="集群结构和特征" tabindex="-1"><a class="header-anchor" href="#集群结构和特征" aria-hidden="true">#</a> 集群结构和特征</h3><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul><p>结构如图：</p><p><img src="'+p+`" alt="image-20210718220843323"></p><h3 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h3><p>我们的计划部署3节点的<code>mq</code>集群</p><table><thead><tr><th>主机名</th><th>控制台端口</th><th>amqp通信端口</th></tr></thead><tbody><tr><td>mq1</td><td>8081 ---&gt; 15672</td><td>8071 ---&gt; 5672</td></tr><tr><td>mq2</td><td>8082 ---&gt; 15672</td><td>8072 ---&gt; 5672</td></tr><tr><td>mq3</td><td>8083 ---&gt; 15672</td><td>8073 ---&gt; 5672</td></tr></tbody></table><p>集群中的节点标示默认都是：<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为：</p><ul><li>rabbit@mq1</li><li>rabbit@mq2</li><li>rabbit@mq3</li></ul><h3 id="获取cookie" tabindex="-1"><a class="header-anchor" href="#获取cookie" aria-hidden="true">#</a> 获取cookie</h3><p>集群模式中的每个<code>RabbitMQ</code> 节点使用 <code>cookie</code> 来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。<code>cookie</code> 只是一串最多 <code>255</code> 个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p><p>我们先在之前启动的<code>mq</code>容器中获取一个<code>cookie</code>值，作为集群的<code>cookie</code>。执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到<code>cookie</code>值如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FXZMCVGLBIXZCDEMMVZQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，停止并删除当前的<code>mq</code>容器，我们重新搭建集群。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="准备集群配置" tabindex="-1"><a class="header-anchor" href="#准备集群配置" aria-hidden="true">#</a> 准备集群配置</h3><p>在/tmp目录新建一个配置文件 <code>rabbitmq.conf</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> rabbitmq.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件内容如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>loopback_users.guest = false
listeners.tcp.default = 5672
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
cluster_formation.classic_config.nodes.1 = rabbit@mq1
cluster_formation.classic_config.nodes.2 = rabbit@mq2
cluster_formation.classic_config.nodes.3 = rabbit@mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再创建一个文件，记录<code>cookie</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建cookie文件</span>
<span class="token function">touch</span> .erlang.cookie
<span class="token comment"># 写入cookie</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;FXZMCVGLBIXZCDEMMVZQ&quot;</span> <span class="token operator">&gt;</span> .erlang.cookie
<span class="token comment"># 修改cookie文件的权限</span>
<span class="token function">chmod</span> <span class="token number">600</span> .erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备三个目录,mq1、mq2、mq3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> mq1 mq2 mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后拷贝<code>rabbitmq.conf</code>、<code>cookie</code>文件到mq1、mq2、mq3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 拷贝</span>
<span class="token function">cp</span> rabbitmq.conf mq1
<span class="token function">cp</span> rabbitmq.conf mq2
<span class="token function">cp</span> rabbitmq.conf mq3
<span class="token function">cp</span> .erlang.cookie mq1
<span class="token function">cp</span> .erlang.cookie mq2
<span class="token function">cp</span> .erlang.cookie mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动集群" tabindex="-1"><a class="header-anchor" href="#启动集群" aria-hidden="true">#</a> 启动集群</h3><p>创建一个网络：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create mq-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume create</p><p>运行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq1 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq1 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8071</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8081</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq2 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq2 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8072</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8082</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq3 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq3 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8073</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8083</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p>在mq1这个节点上添加一个队列：</p><p><img src="`+d+'" alt="image-20210717222833196"></p><p>如图，在mq2和mq3两个控制台也都能看到：</p><p><img src="'+m+'" alt="image-20210717223057902"></p><h3 id="数据共享测试" tabindex="-1"><a class="header-anchor" href="#数据共享测试" aria-hidden="true">#</a> 数据共享测试</h3><p>点击这个队列，进入管理页面：</p><p><img src="'+u+'" alt="image-20210717223421750"></p><p>然后利用控制台发送一条消息到这个队列：</p><p><img src="'+b+'" alt="image-20210717223320238"></p><p>结果在mq2、mq3上都能看到这条消息：</p><p><img src="'+v+`" alt="image-20210717223603628"></p><h3 id="可用性测试" tabindex="-1"><a class="header-anchor" href="#可用性测试" aria-hidden="true">#</a> 可用性测试</h3><p>我们让其中一台节点mq1宕机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后登录mq2或mq3的控制台，发现simple.queue也不可用了：</p><p><img src="`+k+'" alt="image-20210717223800203"></p><blockquote><p>说明数据并没有拷贝到mq2和mq3。</p></blockquote>',64);function _(x,M){const s=l("router-link");return c(),o("div",null,[g,a("nav",q,[a("ul",null,[a("li",null,[e(s,{to:"#mq集群"},{default:i(()=>[n("MQ集群")]),_:1}),a("ul",null,[a("li",null,[e(s,{to:"#集群分类"},{default:i(()=>[n("集群分类")]),_:1})])])]),a("li",null,[e(s,{to:"#普通集群"},{default:i(()=>[n("普通集群")]),_:1}),a("ul",null,[a("li",null,[e(s,{to:"#集群结构和特征"},{default:i(()=>[n("集群结构和特征")]),_:1})]),a("li",null,[e(s,{to:"#部署"},{default:i(()=>[n("部署")]),_:1})]),a("li",null,[e(s,{to:"#获取cookie"},{default:i(()=>[n("获取cookie")]),_:1})]),a("li",null,[e(s,{to:"#准备集群配置"},{default:i(()=>[n("准备集群配置")]),_:1})]),a("li",null,[e(s,{to:"#启动集群"},{default:i(()=>[n("启动集群")]),_:1})]),a("li",null,[e(s,{to:"#测试"},{default:i(()=>[n("测试")]),_:1})]),a("li",null,[e(s,{to:"#数据共享测试"},{default:i(()=>[n("数据共享测试")]),_:1})]),a("li",null,[e(s,{to:"#可用性测试"},{default:i(()=>[n("可用性测试")]),_:1})])])])])]),f])}const S=t(h,[["render",_],["__file","NormalCluster.html.vue"]]);export{S as default};
