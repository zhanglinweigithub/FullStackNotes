import{_ as t,M as l,p as i,q as s,R as e,N as a,V as d,t as o,a1 as n}from"./framework-5866ffd3.js";const r={},p=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),o(" 目录")],-1),h={class:"table-of-contents"},u=n('<h2 id="mybatis-是否支持延迟加载" tabindex="-1"><a class="header-anchor" href="#mybatis-是否支持延迟加载" aria-hidden="true">#</a> MyBatis 是否支持延迟加载</h2><p><code>Mybatis</code>仅支持<code>association</code>关联对象和<code>collection</code>关联集合对象的延迟加载，</p><blockquote><p><code>association</code>指的就是一对一， <code>collection</code>指的就是一对多查询。</p></blockquote><p>在<code>Mybatis</code>配置文件中，<strong>可以全局配置是否启用延迟加载</strong></p><ul><li><p>​ <code>lazyLoadingEnabled</code>：这个属性比较好理解，是否开启延迟加载，默认为<code>false</code>，如果需要开启延迟加载，将其设置为<code>true</code></p></li><li><p>​ <code>aggressiveLazyLoading</code>：当为<code>true</code>的时候，调用任意延迟属性，会去加载所有延迟属性，如果为 <code>false</code>，则调用某个属性的时候，只会加载指定的属性</p></li></ul><p>全局的方式会对所有的关联查询起效，影响范围比较大，<code>mybatis</code>也提供了在关联查询中进行设置的方 式，只会对当前设置的关联查询起效。</p><p>关联查询，一般我们使用 <code>association</code>、<code>collection</code> ，这两个元素都有个属性 <code>fetchType</code> ，通过这个 属性可以指定关联查询的加载方式</p><p>​ <code>fetchType</code>值有2种，</p><ul><li><code>eager</code>：立即加载；</li><li><code>lazy</code>：延迟加载。</li></ul><h2 id="延迟加载的基本原理" tabindex="-1"><a class="header-anchor" href="#延迟加载的基本原理" aria-hidden="true">#</a> 延迟加载的基本原理</h2><p>比如：查询订单并且关联查询用户信息。如果先查询订单信息即可满足要求，当我们需要查询用户信息时再查询用户信息。</p><p>把对用户信息的按需去查询就是延迟加载 。</p><p>所以延迟加载即先从单表查询、需要时再从关联表去关联查 询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快</p>',13);function _(f,y){const c=l("router-link");return i(),s("div",null,[p,e("nav",h,[e("ul",null,[e("li",null,[a(c,{to:"#mybatis-是否支持延迟加载"},{default:d(()=>[o("MyBatis 是否支持延迟加载")]),_:1})]),e("li",null,[a(c,{to:"#延迟加载的基本原理"},{default:d(()=>[o("延迟加载的基本原理")]),_:1})])])]),u])}const m=t(r,[["render",_],["__file","DelayLoad.html.vue"]]);export{m as default};
