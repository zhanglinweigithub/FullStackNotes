import{_ as s,M as t,p,q as d,R as n,N as o,V as c,t as e,a1 as i}from"./framework-5866ffd3.js";const l="/FullStackNotes/assets/1675490318624-71d0e066-0e6e-4db4-bf2f-6ec8c98e2140-aeb17d7e.png",r={},u=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),e(" 目录")],-1),h={class:"table-of-contents"},k=i(`<h2 id="spring-ioc" tabindex="-1"><a class="header-anchor" href="#spring-ioc" aria-hidden="true">#</a> Spring IOC</h2><p><code>IOC</code>就是控制反转，是一个<code>Spring</code>容器</p><p>使用者之前要使用<code>B</code>对象的时候都需要自己去创建和组装，而现在这些创建和组装都交给<code>Spring</code>容器去给完成了，使用者只需要去<code>Spring</code>容器中查找需要使用的对象就可以了</p><p>这个过程中<code>B</code>对象的创建和组装，之前是由开发者控制的，现在交给了<code>Spring</code>去控制，即控制反转</p><p>作用： 主要是为了降低系统代码的耦合度，让系统利于维护和扩展</p><h2 id="di" tabindex="-1"><a class="header-anchor" href="#di" aria-hidden="true">#</a> DI</h2><p><code>DI</code>，依赖注入</p><blockquote><p><code>IOC</code>是一种设计理念，而<code>DI</code>是这种理念的实现</p></blockquote><p>依赖注入是<code>spring</code>容器中创建对象时给其设置依赖对象的方式</p><p>比如给<code>spring</code>一个清单，清单中列出了需要创建<code>B</code>对象以及其他的一些对象（可能包含了<code>B</code>类型中需要依赖对象），此时<code>spring</code>在创建<code>B</code>对象的时候，会看<code>B</code>对象需要依赖于哪些对象，然后去查找一下清单中有没有包含这些被依赖的对象，如果有就去将其创建好，然后将其传递给<code>B</code>对象；</p><p>可能<code>B</code>需要依赖于很多对象，<code>B</code>创建之前完全不需要知道其他对象是否存在或者其他对象在哪里以及被他们是如何创建，而<code>spring</code>容器会将<code>B</code>依赖对象主动创建好并将其注入到<code>B</code>中去</p><p>比如<code>spring</code>容器创建<code>B</code>的时候，发现<code>B</code>需要依赖于<code>A</code>，那么<code>spring</code>容器在清单中找到<code>A</code> 的定义并将其创建好之后，注入到<code>B</code>对象中。</p><h2 id="spring-容器对象" tabindex="-1"><a class="header-anchor" href="#spring-容器对象" aria-hidden="true">#</a> Spring 容器对象</h2><h3 id="beanfactory接口" tabindex="-1"><a class="header-anchor" href="#beanfactory接口" aria-hidden="true">#</a> BeanFactory接口</h3><p><code>spring</code>容器中具有代表性的容器就是<code>BeanFactory</code>接口，这个是<code>spring</code>容器的顶层接口，提供了容器最 基本的功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//按bean的id或者别名查找容器中的bean</span>
<span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span>
    
<span class="token comment">//按照bean的id或者别名查找指定类型的bean，返回指定类型的bean对象</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

<span class="token comment">//返回容器中指定类型的bean对象</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

<span class="token comment">//获取指定类型bean对象的获取器，这个方法比较特别，以后会专门来讲</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="applicationcontext接口" tabindex="-1"><a class="header-anchor" href="#applicationcontext接口" aria-hidden="true">#</a> ApplicationContext接口</h3><p>这个接口继承了<code>BeanFactory</code>接口，所以内部包含了<code>BeanFactory</code>所有的功能，并且在其上进行了扩 展，增加了很多企业级功能，比如<code>AOP</code>、国际化、事件支持等等</p><h3 id="classpathxmlapplicationcontext类" tabindex="-1"><a class="header-anchor" href="#classpathxmlapplicationcontext类" aria-hidden="true">#</a> ClassPathXmlApplicationContext类</h3><p>这个类实现了<code>ApplicationContext</code>接口，注意一下这个类名称包含了<code>ClassPathXml</code>，说明这个容器类 可以从<code>classpath</code>中加载<code>bean.xml</code>配置文件，然后创建<code>xml</code>中配置的<code>bean</code>对象</p><h3 id="annotationconfigapplicationcontext类" tabindex="-1"><a class="header-anchor" href="#annotationconfigapplicationcontext类" aria-hidden="true">#</a> AnnotationConfigApplicationContext类</h3><p>这个类也实现了<code>ApplicationContext</code>接口，注意其类名包含了<code>Annotation</code>和<code>config</code>两个单词，当我们使用注解的方式定义<code>bean</code>的时候，就需要用到这个容器来装载了，这个容器内部会解析注解来构建构建和管理需要的<code>bean</code>。</p><h2 id="applicationcontext-和-beanfactory-的区别" tabindex="-1"><a class="header-anchor" href="#applicationcontext-和-beanfactory-的区别" aria-hidden="true">#</a> ApplicationContext 和 BeanFactory 的区别</h2><p><code>BeanFactory</code> 是 <code>Spring</code> 框架的基础设施，面向 <code>Spring</code> 本身；</p><p>而 <code>ApplicationContext</code> 面向使用 <code>Spring</code> 的开发者， 相比 <code>BeanFactory</code> 提供了更多面向实际应用的功能，几乎所有场合都可以直接使用 <code>ApplicationContext</code>，而不是 底层的 <code>BeanFactory</code>。 <img src="`+l+'" alt="image.png"></p><h3 id="_1、延迟加载" tabindex="-1"><a class="header-anchor" href="#_1、延迟加载" aria-hidden="true">#</a> 1、延迟加载</h3><ul><li><p><code>BeanFactroy</code> 采用的是延迟加载形式来注入 <code>Bean</code> 的，即只有在使用到某个 <code>Bean</code> 时(调用 <code>getBean()</code>)，才对 该 <code>Bean</code> 进行加载实例化。</p><p>这样，我们就不能发现一些存在的 <code>spring</code> 的配置问题</p></li><li><p><code>ApplicationContext</code> 则是在容器启动时，一次性创建了所有的 <code>Bean</code>。</p><p>这样，在容器启动时，我们就可以发现 <code>Spring</code> 中存 在的配置错误</p></li></ul><h3 id="_2、国际化" tabindex="-1"><a class="header-anchor" href="#_2、国际化" aria-hidden="true">#</a> 2、国际化</h3><ul><li><code>BeanFactory</code> 是不支持国际化功能的，因为 <code>BeanFactory</code> 没有扩展 <code>Spring</code> 中 <code>MessageResource</code> 接口</li><li>由于 <code>ApplicationContext</code> 扩展了 <code>MessageResource</code> 接口，因而具有消息处理的能力（<code>i18N</code>）</li></ul><h3 id="_3、事件机制-event" tabindex="-1"><a class="header-anchor" href="#_3、事件机制-event" aria-hidden="true">#</a> 3、事件机制（Event）</h3><p><code>ApplicationContext</code> 的事件机制主要通过 <code>ApplicationEvent</code> 和 <code>ApplicationListener</code> 这两个接口来提供的 ， 当 <code>ApplicationContext</code> 中发布一个事件时，所有扩展了 <code>ApplicationListener</code> 的 <code>Bean</code> 都将接受到这个事件，并进行相应的处理</p><h3 id="_4、底层资源的访问" tabindex="-1"><a class="header-anchor" href="#_4、底层资源的访问" aria-hidden="true">#</a> 4、底层资源的访问</h3><ul><li><code>BeanFactory</code> 是没有扩展 <code>ResourceLoader</code></li><li><code>ApplicationContext</code> 扩展了 <code>ResourceLoader</code>（资源加载器）接口，从而可以用来加载多个 <code>Resource</code></li></ul>',33);function g(m,x){const a=t("router-link");return p(),d("div",null,[u,n("nav",h,[n("ul",null,[n("li",null,[o(a,{to:"#spring-ioc"},{default:c(()=>[e("Spring IOC")]),_:1})]),n("li",null,[o(a,{to:"#di"},{default:c(()=>[e("DI")]),_:1})]),n("li",null,[o(a,{to:"#spring-容器对象"},{default:c(()=>[e("Spring 容器对象")]),_:1}),n("ul",null,[n("li",null,[o(a,{to:"#beanfactory接口"},{default:c(()=>[e("BeanFactory接口")]),_:1})]),n("li",null,[o(a,{to:"#applicationcontext接口"},{default:c(()=>[e("ApplicationContext接口")]),_:1})]),n("li",null,[o(a,{to:"#classpathxmlapplicationcontext类"},{default:c(()=>[e("ClassPathXmlApplicationContext类")]),_:1})]),n("li",null,[o(a,{to:"#annotationconfigapplicationcontext类"},{default:c(()=>[e("AnnotationConfigApplicationContext类")]),_:1})])])]),n("li",null,[o(a,{to:"#applicationcontext-和-beanfactory-的区别"},{default:c(()=>[e("ApplicationContext 和 BeanFactory 的区别")]),_:1}),n("ul",null,[n("li",null,[o(a,{to:"#_1、延迟加载"},{default:c(()=>[e("1、延迟加载")]),_:1})]),n("li",null,[o(a,{to:"#_2、国际化"},{default:c(()=>[e("2、国际化")]),_:1})]),n("li",null,[o(a,{to:"#_3、事件机制-event"},{default:c(()=>[e("3、事件机制（Event）")]),_:1})]),n("li",null,[o(a,{to:"#_4、底层资源的访问"},{default:c(()=>[e("4、底层资源的访问")]),_:1})])])])])]),k])}const f=s(r,[["render",g],["__file","SpringIOC.html.vue"]]);export{f as default};
