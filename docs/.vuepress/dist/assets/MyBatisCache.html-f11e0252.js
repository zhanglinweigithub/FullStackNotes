import{_ as c,M as t,p as d,q as l,R as e,N as n,V as o,t as a,a1 as i}from"./framework-5866ffd3.js";const p={},r=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),u={class:"table-of-contents"},h=i(`<h2 id="mybatis的缓存机制" tabindex="-1"><a class="header-anchor" href="#mybatis的缓存机制" aria-hidden="true">#</a> Mybatis的缓存机制</h2><p><code>mybatis</code>中分为一级缓存和二级缓存</p><h3 id="一级缓存" tabindex="-1"><a class="header-anchor" href="#一级缓存" aria-hidden="true">#</a> <strong>一级缓存</strong></h3><p>​ 是<code>SqlSession</code>级别的缓存，在操作数据库时需要构造 <code>sqlSession</code>对象，在对象中有一个数据结 构（HashMap）用于存储缓存数据，不同的<code>sqlSession</code>之</p><p>​ 间的缓存数据区域（<code>HashMap</code>）是互相不影响的，<code>mybatis</code>中一级缓存是默认自动开启的</p><p>工作原理：</p><p>​ 在同一个<code>SqlSession</code>中去多次去执行同样的查询，每次执行的时候会先到一级缓存 中查找，如果缓存中有就直接返回，如果一级缓存中没有相关数据，<code>mybatis</code></p><p>​ 就会去<code>db</code>中进行查找，然 后将查找到的数据放入一级缓存中，第二次执行同样的查询的时候，会发现缓存中已经存在了，会直接 返回。一级缓存的存储介质是</p><p>​ 内存，是用一个<code>HashMap</code>来存储数据的，所以访问速度是非常快的</p><p>让一级缓存失效有3种方式：</p><ol><li><code>SqlSession</code>中执行增、删、改操作，此时<code>sqlsession</code>会自动清理其内部的一级缓存</li><li>调用<code>SqlSession</code>中的<code>clearCache</code>方法清理其内部的一级缓存</li><li>设置<code>Mapper</code> <code>xml</code>中<code>select</code>元素的<code>flushCache</code>属性值为<code>true</code>，那么执行查询的时候会先清空一级 缓存中的所有数据，然后去<code>db</code>中获取数据</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一级缓存使用上存在局限性，必须要在同一个SqlSession中执行同样的查询，一级缓存才能提升查询速
度，如果想在不同的SqlSession之间使用缓存来加快查询速度，此时我们需要用到二级缓存了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二级缓存" tabindex="-1"><a class="header-anchor" href="#二级缓存" aria-hidden="true">#</a> <strong>二级缓存</strong></h3><p>​ 二级缓存是<code>mapper</code>级别的缓存，每个<code>mapper.xml</code>有个<code>namespace</code>，二级缓存和<code>namespace</code>绑定的， 每个<code>namespace</code>关联一个二级缓存，多个<code>SqlSession</code>可</p><p>​ 以共用二级缓存，二级缓存是跨<code>SqlSession</code>的</p><p>​ 二级缓存默认是没有开启的，需要我们在<code>mybatis</code>全局配置文件中进行开启</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 开启二级缓存 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 上面配置好了以后，还需要在对应的mapper.xml加上下面配置，表示这个mapper中的查询开启二级缓存 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一二级缓存共存时查询原理" tabindex="-1"><a class="header-anchor" href="#一二级缓存共存时查询原理" aria-hidden="true">#</a> <strong>一二级缓存共存时查询原理</strong></h3><ol><li>当发起一个查询的时候，<code>mybatis</code>会先访问这个<code>namespace</code>对应的二级缓存，如果二级缓存中有 数据则直接返回，否则继续向下</li><li>查询一级缓存中是否有对应的数据，如果有则直接返回，否则继续向下</li><li>访问db获取需要的数据，然后放在当前<code>SqlSession</code>对应的二级缓存中，并且在本地内存中的另外 一个地方存储一份（这个地方我们就叫<code>TransactionalCache</code>）</li><li>当<code>SqlSession</code>关闭的时候，也就是调用<code>SqlSession</code>的<code>close</code>方法的时候，此时会将 <code>TransactionalCache</code>中的数据放到二级缓存中，并且会清空当前<code>SqlSession</code>一级缓存中的数据</li></ol><h3 id="清空或者跳过二级缓存的3种方式" tabindex="-1"><a class="header-anchor" href="#清空或者跳过二级缓存的3种方式" aria-hidden="true">#</a> <strong>清空或者跳过二级缓存的3种方式</strong></h3><p>1.对应的<code>mapper</code>中执行增删改查会清空二级缓存中数据</p><ol start="2"><li><code>select</code>元素的<code>flushCache</code>属性置为<code>true</code>，会先清空二级缓存中的数据，然后再去<code>db</code>中查询数据， 然后将数据再放到二级缓存中</li><li>select元素的<code>useCache</code>属性置为<code>true</code>，可以使这个查询跳过二级缓存，然后去查询数据</li></ol>`,22);function m(b,g){const s=t("router-link");return d(),l("div",null,[r,e("nav",u,[e("ul",null,[e("li",null,[n(s,{to:"#mybatis的缓存机制"},{default:o(()=>[a("Mybatis的缓存机制")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#一级缓存"},{default:o(()=>[a("一级缓存")]),_:1})]),e("li",null,[n(s,{to:"#二级缓存"},{default:o(()=>[a("二级缓存")]),_:1})]),e("li",null,[n(s,{to:"#一二级缓存共存时查询原理"},{default:o(()=>[a("一二级缓存共存时查询原理")]),_:1})]),e("li",null,[n(s,{to:"#清空或者跳过二级缓存的3种方式"},{default:o(()=>[a("清空或者跳过二级缓存的3种方式")]),_:1})])])])])]),h])}const v=c(p,[["render",m],["__file","MyBatisCache.html.vue"]]);export{v as default};
