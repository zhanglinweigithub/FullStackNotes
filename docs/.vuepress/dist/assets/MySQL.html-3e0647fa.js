import{_ as c}from"./image-20230405121108492-42ac7a06.js";import{_ as l}from"./image-20230405131436509-068a3e80.js";import{_ as d,a as i,b as r,c as k}from"./image-20230405163041946-5b1b2637.js";import{_ as u,a as m,b as v}from"./image-20230405193553498-06375fd3.js";import{_ as b,M as e,p as y,q as h,R as n,t as s,N as t,V as w,a1 as a}from"./framework-5866ffd3.js";const g={},E=a('<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h1><h2 id="mysql的数据类型" tabindex="-1"><a class="header-anchor" href="#mysql的数据类型" aria-hidden="true">#</a> MySQL的数据类型</h2><p>主要分为三类：数值类型、字符串类型、日期时间类型</p><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h3><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>有符号范围SIGNED</strong></th><th><strong>无符号范围UNSIGNED</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整 数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整 数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整 数值</td></tr><tr><td>INT/INTEGER</td><td>4bytes</td><td>(-2147483648， 2147483647)</td><td>(0，4294967295)</td><td>大整 数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大 整数 值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38， 3.402823466351 E+38)</td><td>0 和</td><td></td></tr><tr><td>(1.175494351 E-38，3.402823466 E+38)</td><td>单精 度浮 点数 值</td><td></td><td></td><td></td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308， 1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308， 1.7976931348623157 E+308)</td><td>双精 度浮 点数 值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度) 的值</td><td>依赖于M(精度)和D(标度)的 值</td><td>小数 值(精 确定 点数)</td></tr></tbody></table><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h3><ul><li>char 相对 varchar char的性能会更高些</li><li>varchar 后面的数字表示长度</li><li>int 后面的数字表示位数，不够则补0，需要配合 zerofill 使用</li></ul><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><h3 id="日期时间类型" tabindex="-1"><a class="header-anchor" href="#日期时间类型" aria-hidden="true">#</a> 日期时间类型</h3><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>范围</strong></th><th><strong>格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续 时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时 间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时 间值，时间戳</td></tr></tbody></table><h2 id="mysql运算符" tabindex="-1"><a class="header-anchor" href="#mysql运算符" aria-hidden="true">#</a> MySQL运算符</h2><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN ... AND ...</td><td>在某个范围之内（含最小、最大值）</td></tr><tr><td>IN( ... )</td><td>在 in 之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（ _ 匹配单个字符， % 匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是 NULL</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 | |</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><h2 id="mysql常见函数" tabindex="-1"><a class="header-anchor" href="#mysql常见函数" aria-hidden="true">#</a> MySQL常见函数</h2><h3 id="常见的聚合函数" tabindex="-1"><a class="header-anchor" href="#常见的聚合函数" aria-hidden="true">#</a> 常见的聚合函数</h3><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><h3 id="常见的字符串函数" tabindex="-1"><a class="header-anchor" href="#常见的字符串函数" aria-hidden="true">#</a> 常见的字符串函数</h3><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>CONCAT(S1,S2,...Sn)</td><td>字符串拼接，将S1，S2，... Sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符 串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符 串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><h3 id="常见的数值函数" tabindex="-1"><a class="header-anchor" href="#常见的数值函数" aria-hidden="true">#</a> 常见的数值函数</h3><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x/y的模</td></tr><tr><td>RAND( )</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><h3 id="常见的日期函数" tabindex="-1"><a class="header-anchor" href="#常见的日期函数" aria-hidden="true">#</a> 常见的日期函数</h3><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>CURDATE( )</td><td>返回当前日期</td></tr><tr><td>CURTIME( )</td><td>返回当前时间</td></tr><tr><td>NOW( )</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后，的 时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回起始时间date1 和 结束时间date2之间的天 数</td></tr></tbody></table><h3 id="常见的流程函数" tabindex="-1"><a class="header-anchor" href="#常见的流程函数" aria-hidden="true">#</a> 常见的流程函数</h3><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>IF(value , t , f)</td><td>如果value为true，则返回t，否则返回 f</td></tr><tr><td>IFNULL(value1 , value2)</td><td>如果value1不为空，返回value1，否则 返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [res1] ... ELSE [ default ] END</td><td>如果val1为true，返回res1，... 否 则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [res1] ... ELSE [ default ] END</td><td>如果expr的值等于val1，返回 res1，... 否则返回default默认值</td></tr></tbody></table><h2 id="mysql常用权限" tabindex="-1"><a class="header-anchor" href="#mysql常用权限" aria-hidden="true">#</a> MySQL常用权限</h2>',28),M={href:"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html",target:"_blank",rel:"noopener noreferrer"},I=a(`<table><thead><tr><th><strong>权限</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据权限</td></tr><tr><td>INSERT</td><td>插入数据权限</td></tr><tr><td>UPDATE</td><td>修改数据权限</td></tr><tr><td>DELETE</td><td>删除数据权限</td></tr><tr><td>ALTER</td><td>修改表权限</td></tr><tr><td>DROP</td><td>删除数据库、表、视图权限</td></tr><tr><td>CREATE</td><td>创建数据库、表权限</td></tr></tbody></table><h2 id="mysql约束" tabindex="-1"><a class="header-anchor" href="#mysql约束" aria-hidden="true">#</a> MySQL约束</h2><p><strong>概念：</strong> 约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><p><strong>目的：</strong> 保证数据库中数据的正确、有效性和完整性。</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束(8.0.16版本 之后)</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致 性和完整 性</td><td>FOREIGN KEY</td></tr></tbody></table><p><strong>注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_user<span class="token punctuation">(</span>
	id <span class="token keyword">int</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID唯一标识&#39;</span><span class="token punctuation">,</span>
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span> <span class="token punctuation">,</span>
	age <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span> <span class="token punctuation">,</span>
	<span class="token keyword">status</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;状态&#39;</span><span class="token punctuation">,</span>
	gender <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;性别&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql语法" tabindex="-1"><a class="header-anchor" href="#sql语法" aria-hidden="true">#</a> SQL语法</h2><h3 id="dcl-data-control-language" tabindex="-1"><a class="header-anchor" href="#dcl-data-control-language" aria-hidden="true">#</a> DCL（Data Control Language）</h3><p>数据控制语言，用来管理数据库用户、控制数据库的访问权限</p><p><strong>在MySQL中需要通过Host和User来唯一标识一 个用户。</strong></p><p>执行 select * from mysql.user; 查询结果如下</p><p><img src="`+c+`" alt="image-20230405121108492"></p><p><strong>含义解析：</strong></p><ul><li>Host：代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。</li><li>User：代表的是访问该数据库的用户名。</li></ul><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h4><ul><li>在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户</li><li>主机名可以使用 % 通配</li><li>多个权限之间，使用逗号分隔</li><li>授权时， 数据库名和表名可以使用 * 进行通配，代表所有</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建用户</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;zhanglinwei&#39;</span><span class="token variable">@&#39;localhost&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;linwei&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改用户密码</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;新密码&#39;</span> <span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">&#39;linwei&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">&#39;1234&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除用户</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> <span class="token punctuation">;</span>

<span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">&#39;zhanglinwei&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询权限</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> <span class="token punctuation">;</span>

<span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">&#39;linwei&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 授予权限</span>
<span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">TO</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> ilovemysql<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">&#39;linwei&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 撤销权限</span>
<span class="token keyword">REVOKE</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">FROM</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> ilovemysql<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;linwei&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ddl-data-definition-language" tabindex="-1"><a class="header-anchor" href="#ddl-data-definition-language" aria-hidden="true">#</a> DDL(Data Definition Language)</h3><p>数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p><p>用于创建或修改数据库、表、表结构</p><h4 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作" aria-hidden="true">#</a> 数据库操作</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询所有数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询当前数据库</span>
<span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建数据库 方式一</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token punctuation">[</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span> <span class="token keyword">default</span> <span class="token keyword">charset</span> 字符集 <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token keyword">collate</span> 排序规则 <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">database</span> ilovemysql<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> ilovemysql<span class="token punctuation">;</span> <span class="token comment">-- ilovemysql不存在就创建，存在不创建</span>

<span class="token keyword">create</span> <span class="token keyword">database</span> ilikemysql <span class="token keyword">default</span> <span class="token keyword">charset</span> utf8mb4<span class="token punctuation">;</span> <span class="token comment">-- 指定字符集</span>

<span class="token comment">-- 创建数据库 方式二</span>
<span class="token keyword">create</span> <span class="token keyword">schema</span> 数据库名<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">schema</span> db01<span class="token punctuation">;</span>


<span class="token comment">-- 删除数据库</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token punctuation">[</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span>

<span class="token keyword">drop</span> <span class="token keyword">database</span> ilovemysql<span class="token punctuation">;</span>

<span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> ilovemysql<span class="token punctuation">;</span> <span class="token comment">-- 若存在 itcast 数据库，就删除</span>

<span class="token comment">-- 切换数据库</span>
<span class="token keyword">use</span> 数据库名<span class="token punctuation">;</span>

<span class="token keyword">use</span> ilikemysql<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="表操作" tabindex="-1"><a class="header-anchor" href="#表操作" aria-hidden="true">#</a> 表操作</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询当前数据库所有表</span>
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看指定表结构</span>
<span class="token comment">-- 通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信息</span>
<span class="token keyword">desc</span> 表名<span class="token punctuation">;</span>

<span class="token comment">--  查询指定表的建表语句</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>

<span class="token comment">-- 创建表结构</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span>
	字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">2</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span>
	字段<span class="token number">3</span> 字段<span class="token number">3</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">3</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释 <span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 表注释 <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">--  添加字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表面 <span class="token keyword">ADD</span> 字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 注释 <span class="token punctuation">]</span> <span class="token punctuation">[</span> 约束 <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">ADD</span> nickname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;昵称&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改数据类型</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 新数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改字段名和字段类型</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 注释 <span class="token punctuation">]</span> <span class="token punctuation">[</span> 约束 <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp CHANGE nickname username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;昵称&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">DROP</span> username<span class="token punctuation">;</span>

<span class="token comment">-- 修改表名</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> employee<span class="token punctuation">;</span>

<span class="token comment">-- 删除表</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> 表名<span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> tb_user<span class="token punctuation">;</span>

<span class="token comment">--  删除指定表, 并重新创建表 （在删除表时，数据也会被删除）</span>
<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dml-data-manipulation-language" tabindex="-1"><a class="header-anchor" href="#dml-data-manipulation-language" aria-hidden="true">#</a> DML（Data Manipulation Language）</h3><p>数据操作语言，用来对数据库中表的数据记录进 行增、删、改操作</p><h4 id="insert-添加" tabindex="-1"><a class="header-anchor" href="#insert-添加" aria-hidden="true">#</a> insert 添加</h4><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--  给指定字段添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> employee<span class="token punctuation">(</span>id<span class="token punctuation">,</span>workno<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>age<span class="token punctuation">,</span>idcard<span class="token punctuation">,</span>entrydate<span class="token punctuation">)</span>
<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Itcast&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;123456789012345678&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2000-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 给全部字段添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;123456789012345670&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2005-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 批量添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值
<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;韦一笑&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token string">&#39;123456789012345670&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2005-01-
01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;赵敏&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;123456789012345670&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2005-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-修改" tabindex="-1"><a class="header-anchor" href="#update-修改" aria-hidden="true">#</a> update 修改</h4><p>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span> <span class="token punctuation">,</span> 字段名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">]</span> <span class="token punctuation">;</span>

<span class="token keyword">update</span> employee <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;itheima&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">update</span> employee <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;小昭&#39;</span> <span class="token punctuation">,</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">update</span> employee <span class="token keyword">set</span> entrydate <span class="token operator">=</span> <span class="token string">&#39;2008-01-01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delete-删除" tabindex="-1"><a class="header-anchor" href="#delete-删除" aria-hidden="true">#</a> delete 删除</h4><ul><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</li><li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即 可)。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">]</span> <span class="token punctuation">;</span>

<span class="token keyword">delete</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">delete</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dql-data-querylanguage" tabindex="-1"><a class="header-anchor" href="#dql-data-querylanguage" aria-hidden="true">#</a> DQL（Data QueryLanguage）</h3><p>数据查询语言，用来查询数据库中表的记录。</p><h4 id="语法结构" tabindex="-1"><a class="header-anchor" href="#语法结构" aria-hidden="true">#</a> 语法结构</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	字段列表
<span class="token keyword">FROM</span>
	表名列表
<span class="token keyword">WHERE</span>
	条件列表
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
	分组字段列表
<span class="token keyword">HAVING</span>
	分组后条件列表
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
	排序字段列表
<span class="token keyword">LIMIT</span>
	分页参数

<span class="token comment">-- 语句执行顺序</span>
<span class="token keyword">FROM</span>
	表名列表
<span class="token keyword">WHERE</span>
	条件列表
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
	分组字段列表
<span class="token keyword">HAVING</span>
	分组后条件列表
<span class="token keyword">SELECT</span>
	字段列表
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
	排序字段列表
<span class="token keyword">LIMIT</span>
	分页参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本查询" tabindex="-1"><a class="header-anchor" href="#基本查询" aria-hidden="true">#</a> 基本查询</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询多个字段</span>
<span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> 字段<span class="token number">3</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">;</span> <span class="token comment">-- 查询指定字段</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">;</span> <span class="token comment">-- 查询全部字段(少用 * ，不直观，影响效率)</span>

<span class="token keyword">select</span> name<span class="token punctuation">,</span>workno<span class="token punctuation">,</span>age <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 字段设置别名</span>
<span class="token keyword">SELECT</span> 字段<span class="token number">1</span> <span class="token punctuation">[</span> <span class="token keyword">AS</span> 别名<span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token punctuation">[</span> <span class="token keyword">AS</span> 别名<span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> 字段<span class="token number">1</span> <span class="token punctuation">[</span> 别名<span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token punctuation">[</span> 别名<span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>

<span class="token keyword">select</span> workaddress <span class="token keyword">as</span> <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> workaddress <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- as 可以省略</span>

<span class="token comment">-- 去除重复记录</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span> <span class="token comment">-- DISTINCT 为去重</span>

<span class="token keyword">select</span> <span class="token keyword">distinct</span> workaddress <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="where-条件查询" tabindex="-1"><a class="header-anchor" href="#where-条件查询" aria-hidden="true">#</a> where 条件查询</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 根据 where 条件查询</span>
<span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表 <span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">88</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&lt;&gt;</span> <span class="token number">88</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">15</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">15</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">15</span> <span class="token operator">and</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span> <span class="token operator">and</span> age <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> age <span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;__&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- _表示匹配一个任意字符</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">like</span> <span class="token string">&#39;%X&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- %表示匹配多个任意字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用函数" tabindex="-1"><a class="header-anchor" href="#使用函数" aria-hidden="true">#</a> 使用函数</h4><p>NULL值是不参与所有聚合函数运算的。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 聚合函数</span>
<span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计的是总记录数</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>idcard<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计的是idcard字段不为null的记录数</span>

<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计该企业员工的平均年龄</span>

<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计该企业员工的最大年龄</span>

<span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 统计该企业员工的最小年龄</span>

<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> workaddress <span class="token operator">=</span> <span class="token string">&#39;西安&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 统计西安地区员工的年龄之和</span>

<span class="token comment">-- 字符串函数</span>
<span class="token comment">-- 企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如： 1号员工的工号应该为00001。</span>

<span class="token keyword">update</span> emp <span class="token keyword">set</span> workno <span class="token operator">=</span> lpad<span class="token punctuation">(</span>workno<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 数值函数</span>
<span class="token comment">-- 通过数据库的函数，生成一个六位数的随机验证码。</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">-- 日期函数 </span>
<span class="token keyword">select</span> date_add<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">70</span> <span class="token keyword">YEAR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 流程函数</span>
<span class="token comment">-- 查询emp表的员工姓名和工作地址 (北京/上海 ----&gt; 一线城市 , 其他 ----&gt; 二线城市)</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>
<span class="token punctuation">(</span> <span class="token keyword">case</span> workaddress <span class="token keyword">when</span> <span class="token string">&#39;北京&#39;</span> <span class="token keyword">then</span> <span class="token string">&#39;一线城市&#39;</span> <span class="token keyword">when</span> <span class="token string">&#39;上海&#39;</span> <span class="token keyword">then</span> <span class="token string">&#39;一线城市&#39;</span> <span class="token keyword">else</span>
<span class="token string">&#39;二线城市&#39;</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">&#39;工作地址&#39;</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="group-分组查询" tabindex="-1"><a class="header-anchor" href="#group-分组查询" aria-hidden="true">#</a> group 分组查询</h4><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><p><strong>执行顺序:</strong> where &gt; 聚合函数 &gt; having 。</p><p>支持多字段分组, 具体语法为 : <code>group by columnA,columnB</code></p><p><strong>where与having区别</strong><strong>1、执行时机不同：</strong></p><ul><li>where是分组之前进行过滤，不满足where条件，不参与分组；</li><li>而having是分组之后对结果进行过滤。</li></ul><p><strong>2、判断条件不同：</strong></p><ul><li>where不能对聚合函数进行判断，而having可以。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- ASC : 升序(默认值)  DESC: 降序</span>
<span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> 排序方式<span class="token number">2</span> <span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span> <span class="token punctuation">,</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>如果是升序, 可以不指定排序方式ASC</strong></li><li><strong>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</strong></li></ul><h4 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h4><ul><li><strong>起始索引从0开始，起始索引 = （查询页码 - 1）X 每页显示记录数</strong></li><li><strong>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</strong></li><li><strong>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 起始索引<span class="token punctuation">,</span> 查询记录数 <span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">--  查询第2页员工数据, 每页展示10条记录</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h2><p>内容包含：连接查询、联合查询、子查询</p><p>各个表之间的联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul><h3 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h3><ul><li><strong>内连接：</strong> 相当于查询A、B交集部分数据</li><li><strong>左外连接：</strong> 查询左表所有数据，以及两张表交集部分数据</li><li><strong>右外连接：</strong> 查询右表所有数据，以及两张表交集部分数据</li><li><strong>自连接：</strong> 当前表与自身的连接查询，自连接必须使用表别名</li></ul><h4 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h4><p>内连接的语法分为两种:</p><ul><li>隐式内连接</li><li>显式内连接</li></ul><p>内连接查询的是两张表交集部分的数 据。(也就是绿色部分的数据)</p><p><img src="`+l+`" alt="image-20230405131436509"></p><h5 id="_1-隐式内连接" tabindex="-1"><a class="header-anchor" href="#_1-隐式内连接" aria-hidden="true">#</a> 1). 隐式内连接</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">,</span> 表<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>

<span class="token comment">-- 查询每一个员工的姓名 , 及关联的部门的名称</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token punctuation">,</span> dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-显式内连接" tabindex="-1"><a class="header-anchor" href="#_2-显式内连接" aria-hidden="true">#</a> 2). 显式内连接</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span> <span class="token keyword">INNER</span> <span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 连接条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>

<span class="token comment">-- 查询每一个员工的姓名 , 及关联的部门的名称</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接" aria-hidden="true">#</a> 外连接</h4><p>外连接分为两种：</p><ul><li>左外连接： 左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据</li><li>右外连接：右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</li></ul><h5 id="_1-左外连接" tabindex="-1"><a class="header-anchor" href="#_1-左外连接" aria-hidden="true">#</a> 1). 左外连接</h5><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">LEFT</span> <span class="token punctuation">[</span> <span class="token keyword">OUTER</span> <span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>

<span class="token comment">-- 查询emp表的所有数据, 和对应的部门信息</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token keyword">left</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-右外连接" tabindex="-1"><a class="header-anchor" href="#_2-右外连接" aria-hidden="true">#</a> 2). 右外连接</h5><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">RIGHT</span> <span class="token punctuation">[</span> <span class="token keyword">OUTER</span> <span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>

<span class="token comment">-- 查询dept表的所有数据, 和对应的员工信息</span>
<span class="token keyword">select</span> d<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> dept d <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> emp e <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自连接" tabindex="-1"><a class="header-anchor" href="#自连接" aria-hidden="true">#</a> 自连接</h4><p>自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次<br> 而对于自连接查询，可以是内连接查询，也可以是外连接查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A 别名A <span class="token keyword">JOIN</span> 表A 别名B <span class="token keyword">ON</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>

<span class="token comment">--  查询员工 及其 所属领导的名字</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>name <span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp a <span class="token punctuation">,</span> emp b <span class="token keyword">where</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">-- 查询所有员工 emp 及其领导的名字 emp , 如果员工没有领导, 也需要查询出来</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;员工&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;领导&#39;</span> <span class="token keyword">from</span> emp a <span class="token keyword">left</span> <span class="token keyword">join</span> emp b <span class="token keyword">on</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合查询" tabindex="-1"><a class="header-anchor" href="#联合查询" aria-hidden="true">#</a> 联合查询</h3><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><ul><li>联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</li><li><code>union all</code> 会将全部的数据直接合并在一起，<code>union</code> 会对合并之后的数据去重</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">UNION</span> <span class="token punctuation">[</span> <span class="token keyword">ALL</span> <span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表B <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">&lt;</span> <span class="token number">5000</span>
<span class="token keyword">union</span> <span class="token keyword">all</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><p>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</p><p>子查询外部的语句可以是<code>INSERT</code> / <code>UPDATE</code> / <code>DELETE</code> / <code>SELECT</code> 的任何一个</p><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值），常用的操作符：=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=</li><li>列子查询(子查询结果为一列) ，常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</li><li>行子查询(子查询结果为一行) ，= 、&lt;&gt; 、IN 、NOT IN</li><li>表子查询(子查询结果为多行多列)，IN</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> t2 <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 标量子查询</span>
<span class="token comment">-- 根据 &quot;销售部&quot; 部门ID, 查询员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">--  查询在 &quot;方东白&quot; 入职之后的员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> entrydate <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> entrydate <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;方东白&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 列子查询</span>
<span class="token comment">-- 查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的所有员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;销售部&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;市场部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询比 财务部 所有人工资都高的员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token keyword">all</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;财务部&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询比研发部其中任意一人工资高的员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token keyword">any</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;研发部&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 行子查询</span>
<span class="token comment">--  查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token punctuation">(</span>salary<span class="token punctuation">,</span>managerid<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary<span class="token punctuation">,</span> managerid <span class="token keyword">from</span> emp
<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 表子查询</span>
 <span class="token comment">-- 查询与 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资相同的员工信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token punctuation">(</span>job<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> job<span class="token punctuation">,</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span>
<span class="token string">&#39;鹿杖客&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;宋远桥&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">--  查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息 , 及其部门信息</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> entrydate <span class="token operator">&gt;</span> <span class="token string">&#39;2006-01-01&#39;</span><span class="token punctuation">)</span> e <span class="token keyword">left</span>
<span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql事务" tabindex="-1"><a class="header-anchor" href="#mysql事务" aria-hidden="true">#</a> MySQL事务</h2><p>事务通常是由一个或一组<code>SQL</code>组成的，组成一个事务的<code>SQL</code>一般都是一个业务操作</p><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</p><ul><li><p><strong>事务是基于当前数据库连接而言的，连接<code>A</code>中开启事务，是不会影响连接<code>B</code>的</strong></p></li><li><p><strong>默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务。</strong></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看/设置事务提交方式</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span> <span class="token punctuation">;</span> <span class="token comment">-- 查看</span>

<span class="token keyword">SET</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment">-- 0不自动提交</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务四大特性-acid" tabindex="-1"><a class="header-anchor" href="#事务四大特性-acid" aria-hidden="true">#</a> 事务四大特性 ACID</h3><ol><li><p><strong>原子性（Atomicity）</strong>：</p><p>​ 事务是不可分割的最小操作单元，要么全部成功，要么全部失败</p></li><li><p><strong>一致性（Consistency）</strong>：</p><p>​ 不管事务发生的前后，<code>MySQL</code>中原本的数据变化都是一致的，也就是<code>DB</code>中的数据只允许从一个一致性状态变化为另一个一致性状态。</p><p>​ 说人话：一个事务中的所有操作，要么一起改变数据库中的数据，要么都不改变，对于其他事务而言，数据的变化是一致的</p></li><li><p><strong>隔离性（Isolation）</strong>：</p><p>​ 指多个事务之间都是独立的，相当于每个事务都被装在一个箱子中，每个箱子之间都是隔开的，相互之间并不影响</p></li><li><p><strong>持久性（Durability）</strong>：</p><p>​ 事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p></li></ol><h3 id="手动控制事务" tabindex="-1"><a class="header-anchor" href="#手动控制事务" aria-hidden="true">#</a> 手动控制事务</h3><p><strong>手动开启事务后一定要做提交或回滚处理，否则不会生效</strong></p><p>在<code>MySQL</code>中，提供了一系列事务相关的命令</p><ul><li><code>start transaction | begin | begin work</code>：开启一个事务</li><li><code>commit</code>：提交一个事务</li><li><code>rollback</code>：回滚一个事务</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启一个事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>

<span class="token comment">-- 第一条SQL语句</span>
<span class="token comment">-- 第二条SQL语句</span>
<span class="token comment">-- 第三条SQL语句</span>

<span class="token comment">-- 提交或回滚事务</span>
<span class="token keyword">commit</span> <span class="token operator">||</span> <span class="token keyword">rollback</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务回滚点" tabindex="-1"><a class="header-anchor" href="#事务回滚点" aria-hidden="true">#</a> 事务回滚点</h3><p>当一个事务中的后续操作执行失败时，会回滚到指定的回滚点位置，而不是回滚整个事务中的所有操作</p><p>但假设目前有一个事务，由很多条<code>SQL</code>组成，但是我想让其中一部分执行成功后，就算后续<code>SQL</code>执行失败也照样提交，这时就可以使用<strong>事务回滚点</strong></p><p><code>MySQL</code>提供了两个关于事务回滚点的命令：</p><ul><li><code>savepoint point_name</code>：添加一个事务回滚点</li><li><code>rollback to point_name</code>：回滚到指定的事务回滚点</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 先查询一次用户表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_users<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">-- 开启事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改 ID=4 的姓名为：黑熊</span>
<span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_users<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> <span class="token identifier"><span class="token punctuation">\`</span>user_name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;黑熊&quot;</span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">-- 添加一个事务回滚点：update_name</span>
<span class="token keyword">savepoint</span> update_name<span class="token punctuation">;</span>
<span class="token comment">-- 删除 ID=1 的行数据</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_users<span class="token punctuation">\`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 回滚到 update_name 这个事务点</span>
<span class="token keyword">rollback</span> <span class="token keyword">to</span> update_name<span class="token punctuation">;</span>
<span class="token comment">-- 再次查询一次数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_users<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">-- 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中开启了一个事务，事务中总共修改和删除两条<code>SQL</code>组成，然后在修改语句后面添加了一个事务回滚点<code>update_name</code>，在删除语句后回滚到了前面添加的回滚点。</p>`,116),f=n("p",null,[s("回滚到事务点后不代表着事务结束了，只是事务内发生了一次回滚，如果要结束当前这个事务，还依旧需要通过"),n("code",null,"commit|rollback;"),s("命令处理")],-1),L=a(`<h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h3><table><thead><tr><th style="text-align:left;"><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复的</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td style="text-align:left;">读未提交 Read Uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td style="text-align:left;">读已提交 Read Committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td style="text-align:left;">可重复读 Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td style="text-align:left;">串行化 Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><blockquote><p>事务隔离级别越高，数据越安全，但是性能越低</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看事务隔离级别</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span>

<span class="token comment">-- 设置事务隔离级别</span>
<span class="token keyword">SET</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> { <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span>
<span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span> }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>脏读</strong> :指一个事务读到了其他事务还未提交的数据</p><p><strong>不可重复读</strong> :指在一个事务中，多次读取同一数据，先后读取到的数据不一致</p><p><strong>幻读</strong> :一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在</p><p><strong>脏写</strong> :多个事务一起操作同一条数据，例如两个事务同时向表中添加一条<code>ID=888</code>的数据，此时就会造成数据覆盖，或者主键冲突的问题，这个问题也被称之为更新丢失问题。</p><p><strong>读未提交级别：</strong> 基于<strong>写互斥锁</strong>实现的，只有获取到锁的事务，才允许对数据进行写操作，解决了<strong>脏写</strong>问题</p><p><strong>读已提交级别：</strong> 对于写操作同样会使用<strong>写互斥锁</strong>，对于读操作则使用<code>MVCC</code></p><p><strong>可重复读级别：</strong> 在这个隔离级别中，主要就是解决上一个级别中遗留的不可重复读问题，但<code>MySQL</code>依旧是利用<code>MVCC</code>机制来解决这个问题的</p><p><strong>串行化级别：</strong> 所有的事务按序排队后串行化处理，也就是操作同一张表的事务只能一个一个执行，事务在执行前需要先获取表级别的锁资源，拿到锁资源的事务才能执行，其余事务则陷入阻塞，等待当前事务释放锁。</p><blockquote><p><em><code>RR</code>级别中也可以解决幻读问题，就是使用临键锁（间隙锁+行锁）这种方式来加锁</em></p></blockquote><h3 id="事务原理" tabindex="-1"><a class="header-anchor" href="#事务原理" aria-hidden="true">#</a> 事务原理</h3><p><code>MySQL</code>的事务机制是基于日志实现的</p><p>任意一条写<code>SQL</code>的执行都会记录三个日志：<code>undo-log、redo-log、bin-log</code></p><ul><li><code>undo-log</code>：主要记录<code>SQL</code>的撤销日志，比如目前是<code>insert</code>语句，就记录一条<code>delete</code>日志。</li><li><code>redo-log</code>：记录当前<code>SQL</code>归属事务的状态，以及记录修改内容和修改页的位置。</li><li><code>bin-log</code>：记录每条<code>SQL</code>操作日志，只要是用于数据的主从复制与数据恢复/备份。</li></ul><blockquote><p>重点是<code>undo-log、redo-log</code>这两个日志</p></blockquote><h4 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo-log</h4><p><code>redo-log</code>是一种<code>WAL(Write-ahead logging)</code>预写式日志，在数据发生更改之前会先记录日志，也就是在<code>SQL</code>执行前会先记录一条<code>prepare</code>状态的日志，然后再执行数据的写操作</p><blockquote><p>注意：<code>MySQL</code>是基于磁盘的，但磁盘的写入速度相较内存而言会较慢，因此<code>MySQL-InnoDB</code>引擎中不会直接将数据写入到磁盘文件中，而是会先写到<code>BufferPool</code>缓冲区中，当<code>SQL</code>被成功写入到缓冲区后，紧接着会将<code>redo-log</code>日志中相应的记录改为<code>commit</code>状态，然后再由<code>MySQL</code>刷盘机制去做具体的落盘操作</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改 ID=4 的姓名为：黑熊（原本user_name = 1111）</span>
<span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_users<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> <span class="token identifier"><span class="token punctuation">\`</span>user_name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;黑熊&quot;</span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">-- 删除 ID=1 的行数据</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_users<span class="token punctuation">\`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段<code>SQL</code>代码执行的过程如下：</p><ol><li><p>当<code>MySQL</code>执行时，碰到<code>start transaction;</code>的命令时，会将后续所有写操作全部先关闭自动提交机制，也就是后续的所有写操作，不管有没有成功都不会将日志记录修改为<code>commit</code>状态</p></li><li><p>先在<code>redo-log</code>中为第一条<code>SQL</code>语句，记录一条<code>prepare</code>状态的日志，然后再生成对应的撤销日志并记录到<code>undo-log</code>中，然后执行<code>SQL</code>，将要写入的数据先更新到缓冲区</p></li><li><p>再对第二条<code>SQL</code>语句做相同处理，如果有更多条<code>SQL</code>则逐条依次做相同处理</p></li><li><p>直到碰到了<code>rollback、commit</code>命令时，再对前面的所有写<code>SQL</code>做相应处理</p><ul><li>commit：先将当前事务中，所有的<code>SQL</code>的<code>redo-log</code>日志改为<code>commit</code>状态，然后由<code>MySQL</code>后台线程做刷盘，将缓冲区中的数据落入磁盘存储</li><li>rollback：在<code>undo-log</code>日志中找到对应的撤销<code>SQL</code>执行，将缓冲区内更新过的数据全部还原，由于缓冲区的数据被还原了，因此后台线程在刷盘时，依旧不会改变磁盘文件中存储的数据</li></ul></li></ol><h3 id="事务的恢复机制" tabindex="-1"><a class="header-anchor" href="#事务的恢复机制" aria-hidden="true">#</a> 事务的恢复机制</h3><p>MySQL在运行期间会有几个问题</p><p>1、当<code>SQL</code>执行时，数据还没被刷写到磁盘中，结果数据库宕机了，那数据是不是就丢了啊？</p><blockquote><p>对于这个问题并不需要担心，因为前面提到过<code>redo-log</code>是一种预写式日志，会先记录日志再去更新缓冲区中的数据，所以就算缓冲区的数据未被刷写到磁盘，在<code>MySQL</code>重启时，依旧可以通过<code>redo-log</code>日志重新恢复未落盘的数据，从而确保数据的持久化特性</p></blockquote><p>2、那如果在记录<code>redo-log</code>日志时，<code>MySQL</code>芭比Q了咋整？</p><blockquote><p>前面说过数据被更新到缓冲区代表着<code>SQL</code>执行成功了，此时客户端会收到<code>MySQL</code>返回的写入成功提示，只是没有落盘而言，所以<code>MySQL</code>重启后只需要再次落盘即可</p><p>但如果在记录日志的时候<code>MySQL</code>宕机了，这代表着<code>SQL</code>都没执行成功，<code>SQL</code>没执行成功的话，<code>MySQL</code>也不会向客户端返回任何信息，因为<code>MySQL</code>一直没返回执行结果，因此会导致客户端连接超时，而一般客户端都会有超时补偿机制的，比如会超时后重试，如果<code>MySQL</code>做了热备/灾备，这个重试的时间足够<code>MySQL</code>重启完成了，因此用户的操作依旧不会丢失（对于超时补偿机制，在各大数据库连接池中是有实现的）</p></blockquote><h3 id="事务的acid实现" tabindex="-1"><a class="header-anchor" href="#事务的acid实现" aria-hidden="true">#</a> 事务的ACID实现</h3><ul><li>原子性由 <code>undo log</code> 保证</li><li>一致性由 <code>undo log + redo log</code> 保证</li><li>隔离性由 <code>锁 + MVCC</code> 保证</li><li>持久性由 <code>redo log</code> 保证</li></ul><p><strong>原子性：</strong> 当事务中的操作失败时，需要回滚，此时就需要用到 <code>undo log</code> 日志中记录的反向操作来进行回滚。</p><p><strong>一致性：</strong> 前面也有说过，当事务结束时，会有两种情况 1、提交 2、回滚</p><ul><li>提交：就需要用到 <code>redo log</code> 日志，将其中记录的所有本次事务操作改为 <code>commit</code> 状态，然后由<code>MySQL</code>后台线程做刷盘</li><li>回滚：就需要用到 <code>undo log</code> 日志，找到对应的撤销 <code>sq</code>l 执行，还原缓冲区数据</li></ul><p><strong>隔离性：</strong> 通过锁机制，将多个事务隔离开，通过 MVCC 机制，实现非阻塞都的功能。</p><p><strong>持久性：</strong> 对数据的所有操作都会记录在 <code>redo log</code> 中，避免 <code>MySQL</code> 宕机重启后丢失修改</p><h3 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc" aria-hidden="true">#</a> MVCC</h3><p>全称 Multi-Version Concurrency Control，多版本并发控制。</p><p>会维护一个数据的多个版本， 使得读写操作没有冲突，快照读为 <code>MySQ</code>L 实现 <code>MVCC</code> 提供了一个非阻塞读功能</p><p><code>MVCC</code> 的具体实现，还需要依赖于数据库记录中的<strong>三个隐式字段、undo log版本链、readView读视图</strong></p><h4 id="三个隐式字段" tabindex="-1"><a class="header-anchor" href="#三个隐式字段" aria-hidden="true">#</a> <strong>三个隐式字段</strong></h4><table><thead><tr><th><strong>隐藏字段</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID。</td></tr><tr><td>DB_ROLL_PTR</td><td>回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版 本。</td></tr><tr><td>DB_ROW_ID</td><td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段。</td></tr></tbody></table><h4 id="undo-log版本链" tabindex="-1"><a class="header-anchor" href="#undo-log版本链" aria-hidden="true">#</a> <strong>undo log版本链</strong></h4><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的<code>undolog</code>生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录</p><p>有一张表，原始数据为</p><p><img src="`+d+'" alt="image-20230405162745046"></p><p><strong>DB_TRX_ID :</strong> 代表最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID，是 自增的。 <strong>DB_ROLL_PTR ：</strong> 由于这条数据是才插入的，没有被更新过，所以该字段值为null。</p><p>然后，有四个并发事务同时在访问这张表。</p><p><img src="'+i+'" alt="image-20230405162854905"></p><ul><li>当事务2执行第一条修改语句时，会记录undo log日志，记录数据变更之前的样子;</li><li>然后更新记录， 并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。</li></ul><p><img src="'+r+'" alt="image-20230405162950184"></p><p>最终会形成如下的版本链</p><p><img src="'+k+'" alt="image-20230405163041946"></p><h4 id="readview-读视图" tabindex="-1"><a class="header-anchor" href="#readview-读视图" aria-hidden="true">#</a> readview 读视图</h4><p>是 快照读 <code>SQL</code>执行时<code>MVCC</code>提取数据的依据，记录并维护系统当前活跃的事务 （未提交的）id。</p><p><strong>ReadView</strong>中包含了四个核心字段：</p><table><thead><tr><th><strong>字段</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务ID集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务ID</td></tr><tr><td>max_trx_id</td><td>预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）</td></tr><tr><td>creator_trx_id</td><td>ReadView创建者的事务ID</td></tr></tbody></table><p>而在<code>readview</code>中就规定了版本链数据的访问规则</p><ul><li>trx_id 代表当前undolog版本链对应事务ID</li></ul><table><thead><tr><th><strong>条件</strong></th><th><strong>是否可以访问</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>trx_id == creator_trx_id</td><td>可以访问该版本</td><td>成立，说明数据是当前这个事 务更改的</td></tr><tr><td>trx_id &lt; min_trx_id</td><td>可以访问该版本</td><td>成立，说明数据已经提交了。</td></tr><tr><td>trx_id &gt; max_trx_id</td><td>不可以访问该版本</td><td>成立，说明该事务是在 ReadView生成后才开启。</td></tr><tr><td>min_trx_id &lt;= trx_id &lt;= max_trx_id</td><td>如果trx_id不在m_ids中， 是可以访问该版本的</td><td>成立，说明数据已经提交。</td></tr></tbody></table><p><strong>不同的隔离级别，生成ReadView的时机不同：</strong></p><ul><li><strong>READ COMMITTED ：在事务中每一次执行快照读时生成ReadView，保证读取到的是数据可见的最新版本。</strong></li><li><strong>REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView实现可重复读。</strong></li></ul><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h2><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式 。</p><ul><li>存储引擎是基于表的</li><li>MySQL默认存储引擎为： InnoDB</li><li>常用存储引擎： InnoDB、MyISAM</li></ul><p><code>MySQL</code>是一款支持拔插式引擎的数据库，在开发过程中你可以根据业务特性，从支持的诸多引擎中选择一款适合的</p><p><img src="'+u+`" alt="image-20230405190820143"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 建表时指定存储引擎</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释 <span class="token punctuation">]</span> <span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释 <span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 表注释 <span class="token punctuation">]</span> <span class="token punctuation">;</span>

<span class="token comment">-- 查询当前数据库支持的存储引擎</span>
<span class="token keyword">show</span> engines<span class="token punctuation">;</span>

<span class="token comment">-- 批量修改一个库所有表的存储引擎命令</span>
mysql_convert_table_fromat <span class="token comment">--user=user_name --password=user_pwd --engine=MyISAM database_name;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="innodb-vs-myisam" tabindex="-1"><a class="header-anchor" href="#innodb-vs-myisam" aria-hidden="true">#</a> InnoDB VS MyISAM</h3><h4 id="磁盘文件对比" tabindex="-1"><a class="header-anchor" href="#磁盘文件对比" aria-hidden="true">#</a> 磁盘文件对比</h4><p><img src="`+m+'" alt="image-20230405191300087"></p><p>其中使用<code>MyISAM</code>引擎的表：<code>zz_myisam_index</code>，会在本地生成三个磁盘文件</p><ul><li><code>zz_myisam_index.frm</code>：该文件中存储表的结构信息。</li><li><code>zz_myisam_index.MYD</code>：该文件中存储表的行数据。</li><li><code>zz_myisam_index.MYI</code>：该文件中存储表的索引数据。</li></ul><blockquote><p><code>MyISAM</code>引擎的表数据和索引数据，会分别放在两个不同的文件中存储</p></blockquote><p>使用<code>InnoDB</code>引擎的表：<code>zz_innodb_index</code>，在磁盘中仅有两个文件</p><ul><li><code>zz_innodb_index.frm</code>：该文件中存储表的结构信息。</li><li><code>zz_innodb_index.ibd</code>：该文件中存储表的行数据和索引数据。</li></ul><blockquote><p><code>InnoDB </code>引擎的表数据和索引数据，会分放在一个文件中存储</p></blockquote><h4 id="索引支持对比" tabindex="-1"><a class="header-anchor" href="#索引支持对比" aria-hidden="true">#</a> 索引支持对比</h4><p><strong><code>InnoDB</code>支持聚簇索引、<code>MyISAM</code>不支持聚簇索引</strong></p><p>因为<code>MyISAM</code>引擎，会将表分为<code>.frm、.MYD、.MYI</code>三个文件放在磁盘存储，表数据和索引数据是分别放在<code>.MYD、.MYI</code>文件中，所以注定了<code>MyISAM</code>引擎只支持<strong>非聚簇索引</strong>。</p><p>而<code>InnoDB</code>引擎的表数据、索引数据都放在<code>.ibd</code>文件中存储，因此<code>InnoDB</code>是支持<strong>聚簇索引</strong>的。</p><blockquote><p>聚簇索引的要求是：索引键和行数据必须在物理空间上也是连续的，而<code>MyISAM</code>表数据和索引数据，分别位于两个磁盘文件中，这也就注定了它无法满足聚簇索引的要求。</p><p>不支持聚簇索引也有好处，也就是无论走任何索引，都只需要一遍查询即可获得数据，而<code>InnoDB</code>引擎的表中，如果不走聚簇（主键）索引查询数据，走其他索引的情况下，都需要经过两遍（回表）查询才能获得数据</p></blockquote><h4 id="事务机制对比" tabindex="-1"><a class="header-anchor" href="#事务机制对比" aria-hidden="true">#</a> 事务机制对比</h4><p><strong><code>InnoDB</code>支持事务、<code>MyISAM</code>不支持事务</strong></p><p>因为<code>InnoDB</code>引擎中有两个自己专享的日志，即<code>undo log</code>、`redo log``</p><p>``InnoDB<code>在</code>MySQL<code>启动后，会在内存中构建一个</code>undo_log_buffer<code>缓冲区，同时在磁盘中也有相应的</code>undo-log`日志文件</p><p>所以使用<code>InnoDB</code>存储引擎的表，可以借助<code>undo-log</code>日志实现事务机制，支持多条<code>SQL</code>组成一个事务，可以保证发生异常的情况下，组成这个事务的<code>SQL</code>到底回滚还是提交</p><p>而<code>MyISAM</code>并未设计类似的技术，在启动时不会在内存中构建<code>undo_log_buffer</code>缓冲区，磁盘中也没有相应的日志文件，因此<code>MyISAM</code>并不支持事务机制</p><blockquote><p>关于 <code>undo log</code>、<code>redo log</code> 和事务原理，在前面的事务篇说过</p></blockquote><h4 id="故障恢复的对比" tabindex="-1"><a class="header-anchor" href="#故障恢复的对比" aria-hidden="true">#</a> 故障恢复的对比</h4><p><strong><code>MyISAM</code>并没有<code>InnoDB</code>引擎可靠</strong></p><p><code>InnoDB</code>在启动时，同样会在内存中构建一个<code>redo_log_buffer</code>缓冲区，在磁盘中也会有相应的<code>redo-log</code>日志文件</p><p><code>InnoDB</code>引擎由于<code>redo-log</code>日志的存在，因此只要事务提交，无论是机器断电、程序宕机等各种灾难情况，都可以用<code>redo-log</code>日志来恢复数据</p><p>但<code>MyISAM</code>引擎同样没有<code>redo-log</code>日志，所以并不支持数据的故障恢复，所以丢了也就无法找回。</p><h4 id="锁粒度对比" tabindex="-1"><a class="header-anchor" href="#锁粒度对比" aria-hidden="true">#</a> 锁粒度对比</h4><p><strong><code>MyISAM</code>仅支持表锁，而<code>InnoDB</code>同时支持表锁、行锁</strong></p><p><code>MyISAM</code>由于不支持聚簇索引，所以无法实现行锁，光说没用，上例子</p><p><img src="'+v+`" alt="image-20230405193553498"></p><p>上述这张表中，假设使用的是<code>MyISAM</code>引擎，同时对<code>student_id</code>字段建立了主键索引，<code>name</code>字段建立了普通索引，<code>sex、height</code>字段建立了联合索引</p><blockquote><p>这张表中存在三个索引，那在本地的<code>.MYI</code>索引文件中，肯定存在三颗<code>B+</code>树，同时由于<code>MyISAM</code>不支持聚簇索引，所以这三个索引是平级的，每棵<code>B+</code>树的索引键，都直接指向<code>.MYD</code>数据文件中的行数据地址。</p></blockquote><p>假设<code>MyISAM</code>要实现行锁，当要对一行数据加锁时，可以锁定一棵树中某一个数据，但无法锁定其他树的行数据</p><p>因为<code>MySQL</code>是对索引加锁，当基于不同索引查询数据时，就可能会导致一行数据上加多个锁！</p><p>这样又会导致多条线程同时操作一个数据，所以又会因为多线程并发执行的原因，造成脏读、幻读、不可重复读这系列问题出现</p><p>但<code>InnoDB</code>引擎，因为支持聚簇索引，所以<code>InnoDB</code>表中的索引，是有主次之分的，所有的次级索引（二级索引），其索引值都存储聚簇索引的索引键，因此想要对一行数据加锁时，只需要锁定聚簇索引的数据即可。</p><blockquote><p>表中就算没有显式定义主键，内部依旧会用一个隐藏列来作为聚簇索引的索引字段</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 通过主键索引查询数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> zz_students <span class="token keyword">where</span> student_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token comment">-- 通过普通索引查询数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> zz_students <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&quot;竹子&quot;</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过主键索引查询的<code>SQL</code>语句，会直接定位到聚簇索引的数据，然后对<code>ID=1</code>的数据加锁。</p><p>而第二条通过普通索引查询数据的<code>SQL</code>语句，经过查询后会得到一个值：<code>ID=1</code>，然后会拿着这个<code>ID=1</code>的值再去回表，在聚簇索引中再次查询<code>ID=1</code>的数据，找到之后发现上面已经有线程加锁了，当前线程就会阻塞等待上一个线程释放锁。</p><h4 id="并发性能对比" tabindex="-1"><a class="header-anchor" href="#并发性能对比" aria-hidden="true">#</a> 并发性能对比</h4><p><code>MyISAM</code>不如<code>InnoDB</code>的并发性能</p><p>因为<code>MyISAM</code>仅支持表锁，且不支持聚簇索引，所以当出现多条线程同时读写数据时，只能锁住整张表</p><p>而<code>InnoDB</code>同时支持表锁、行锁，并支持聚簇索引，每个索引最终都会指向聚簇索引中的索引键，因此出现并发事务时，<code>InnoDB</code>只需要锁住聚簇索引的数据即可，而不需要锁住整张表，因此并发性能更高。</p><blockquote><p><code>InnoDB</code>为了提升读-写并存场景下的并发度，又基于<code>undo-log</code>版本链+事务快照，又推出了<code>MVCC</code>多版本并发控制技术，因此对于读-写共存的场景支持并发执行。</p></blockquote><h4 id="内存利用度对比" tabindex="-1"><a class="header-anchor" href="#内存利用度对比" aria-hidden="true">#</a> 内存利用度对比</h4><p><code>InnoDB</code>不像<code>Memory</code>引擎那样完全基于内存运行，但它将所有能够在内存完成的操作，全部都放在了内存中完成，无论是读写数据、维护索引结构也好，记录日志也罢，各类操作全部都在内存完成。</p><p><code>InnoDB</code>引擎，通过缓冲池结合异步<code>IO</code>技术，活生生将一款基于磁盘的引擎，演变成了半内存式的引擎。</p><p>反观<code>MyISAM</code>引擎，内部虽然也有缓冲池以及异步<code>IO</code>技术，但对内存的开发度远不足于<code>InnoDB</code>引擎，运行期间大量操作依旧会走磁盘完成。</p><blockquote><p>详细内容可以看 MySQL内存篇</p></blockquote><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p><strong>这也是为什么 <code>InnoDB</code>引擎能取代<code>MyISAM</code>引擎的原因</strong></p><p>①存储方式：</p><ul><li><code>MyISAM</code>引擎会将表数据和索引数据分成两个文件存储</li><li><code>InnoDB</code>引擎将表数据和索引数据在一个文件中存储</li></ul><p>②索引支持：</p><ul><li><code>MyISAM</code>引擎的表数据和索引数据是分开的，因此不支持聚簇索引。</li><li><code>InnoDB</code>引擎的表数据和索引数据是在一起的，因此支持聚簇索引</li></ul><p>③事务支持：</p><ul><li><code>MyISAM</code>引擎没有<code>undo log</code>日志，所以不支持多条<code>SQL</code>组成事务并回滚。</li><li><code>InnoDB</code>引擎存在<code>undo log</code>日志，所以支持事务</li></ul><p>④故障恢复：</p><ul><li><code>MyISAM</code>引擎依靠<code>bin-log</code>日志实现，<code>bin-log</code>中未写入的数据会永久丢失。</li><li><code>InnoDB</code>引擎依靠<code>redo log</code>日志实现，数据会先写入<code>redo log</code>在写入缓冲区</li></ul><p>⑤锁粒度支持：</p><ul><li><code>MyISAM</code>不支持聚簇索引，因此无法实现行锁，所有并发操作只能加表锁。</li><li><code>InnoDB</code>引擎支持聚簇索引，所有并发操作只需加行锁</li></ul><p>⑥并发性能：</p><ul><li><code>MyISAM</code>引擎仅支持表锁，所以多条线程出现读-写并发场景时会阻塞。</li><li><code>InnoDB</code>支持表锁、行锁，不需要锁住整张表，因此并发性能更高。</li></ul><p>⑦内存利用度：</p><ul><li><code>MyISAM</code>引擎过于依赖<code>MySQL Server</code>，对缓冲池、异步<code>IO</code>技术开发度不够。</li><li><code>InnoDB</code>引擎将所有能够在内存完成的操作，全部都放在了内存中完成（读写数据、维护索引结构也好，记录日志）等</li></ul><h3 id="myisam引擎的优势" tabindex="-1"><a class="header-anchor" href="#myisam引擎的优势" aria-hidden="true">#</a> MyISAM引擎的优势</h3><p>前面几乎都在说<code>InnoDB</code>引擎的好，现在来看看<code>MyISAM</code>引擎有哪些优势</p><h4 id="统计总数的优化" tabindex="-1"><a class="header-anchor" href="#统计总数的优化" aria-hidden="true">#</a> 统计总数的优化</h4><p><code>MyISAM</code>引擎中会记录表的行数，也就是当执行<code>count()</code>时，如果表是<code>MyISAM</code>引擎，则可以直接获取之前统计的值并返回</p><p><code>InnoDB</code>会一行行的去统计表的行数</p><blockquote><p>但是如果后面跟了<code>where</code>条件，那<code>InnoDB、MyISAM</code>的工作模式是相同的，先根据<code>where</code>后的条件查询数据，再一行行统计总数</p></blockquote><h4 id="删除数据-表的优化" tabindex="-1"><a class="header-anchor" href="#删除数据-表的优化" aria-hidden="true">#</a> 删除数据/表的优化</h4><p>当使用<code>delete</code>命令清空表数据时</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>table_name<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>MyISAM</code>会直接重新创建表数据文件</p><p><code>InnoDB</code>则是一行行删除数据</p><blockquote><p><code>MyISAM</code>引擎的表，对于<code>delete</code>过的数据不会立即删除，而且先隐藏起来，后续定时删除或手动删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 手动强制清理命令</span>
<span class="token keyword">optimize</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>table_name<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>这样做的好处，就是当你误删一张表的大量数据时，只要你手速够快，手动将本地的<code>.MYD、.MYI</code>文件拷贝出去，就可以直接基于这两个数据文件恢复数据，而不需要通过日志或第三方工具修复数据。</p><h4 id="crud速度更快" tabindex="-1"><a class="header-anchor" href="#crud速度更快" aria-hidden="true">#</a> CRUD速度更快</h4><p><code>InnoDB</code>引擎当查询数据时，如果在基于非聚簇索引查找数据，就算查到了也需要经过一次回表才能得到数据，同时插入数据、修改数据时，都需要维护聚簇索引和非聚簇索引之间的关系</p><p>所以<code>InnoDB</code>的聚簇索引，会影响读写数据的性能</p><p><code>MyISAM</code>引擎中，所有已创建的索引都是非聚簇索引，每个索引之间都是独立的，在索引中存储的是直接指向行数据的地址，而并非聚簇索引的索引键，因此无论走任何索引，都仅需一次即可获得数据，无需做回表查询</p><p>同时写数据时，也不需要维护不同索引之间的关系，毕竟每个索引都是独立的</p><h3 id="myisam真的比innodb快吗" tabindex="-1"><a class="header-anchor" href="#myisam真的比innodb快吗" aria-hidden="true">#</a> MyISAM真的比InnoDB快吗</h3><p>如果是对比单个客户端连接的读写性能，那自然<code>MyISAM</code>远超于<code>InnoDB</code>引擎，毕竟<code>InnoDB</code>需要维护聚簇索引</p><p>随着连接数的增加<code>MyISAM</code>的读写性能就远不如<code>InnoDB</code>，这是由于<strong>锁机制导致的</strong></p><p><code>MyISAM</code>引擎仅支持表锁，也就意味着无论有多少个客户端连接到来，对于同一张表永远只能允许一条线程操作，除非多个连接都是在读数据，才不会相互排斥。</p><p><code>InnoDB</code>引擎，由于支持行锁，所以并发冲突很小，在高并发、多连接的场景中，性能会更加出色</p><h3 id="myisam引擎的适用场景" tabindex="-1"><a class="header-anchor" href="#myisam引擎的适用场景" aria-hidden="true">#</a> MyISAM引擎的适用场景</h3><p><code>MySQL</code>利用主从架构，实现读写分离时的场景，一般从库会承载<code>select</code>请求，而主库会承载<code>insert/update/delete</code>请求。</p><p>读写分离的场景中，从库的表结构可以改为<code>MyISAM</code>引擎，因为基于<code>MyISAM</code>的索引查询数据，不需要经过回表查询，速度更快！</p><blockquote><p>同时，由于做了读写分离，因此从库上只会有读请求，不会存在任何外部的写请求，所以支持并发读取。</p><p>而且从库的数据是由后台线程来从主库复制的，因此从库在写入数据时，只会有少数几条线程执行写入工作，因而造成的冲突不会太大，不会由于表锁引起大量阻塞。</p></blockquote>`,162);function S(T,q){const o=e("ExternalLinkIcon"),p=e("font");return y(),h("div",null,[E,n("p",null,[s("只是简单罗列了常见的几种权限描述，其他权限描述及含义，可以直接参考"),n("a",M,[s("官方文档"),t(o)]),s("。")]),I,n("blockquote",null,[n("p",null,[n("strong",null,[t(p,{color:"#FF0000"},{default:w(()=>[s("注意：")]),_:1})])]),f]),L])}const N=b(g,[["render",S],["__file","MySQL.html.vue"]]);export{N as default};
