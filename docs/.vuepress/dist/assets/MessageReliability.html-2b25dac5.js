import{_ as p,M as c,p as o,q as l,R as n,N as e,V as t,t as a,a1 as i}from"./framework-5866ffd3.js";const u="/FullStackNotes/assets/image-20210718155059371-0e786510.png",d="/FullStackNotes/assets/image-20210718160907166-587a7cc9.png",r="/FullStackNotes/assets/image-20210718161707992-2d5637f9.png",k="/FullStackNotes/assets/image-20210718164412450-f53b9dd0.png",m="/FullStackNotes/assets/image-20210718164729543-7aabab46.png",v="/FullStackNotes/assets/image-20210718165100016-b12857ed.png",b="/FullStackNotes/assets/image-20210718171705383-d4a6ae35.png",g="/FullStackNotes/assets/image-20210718171759179-334fb00e.png",h="/FullStackNotes/assets/image-20210718172746378-dcfa0a67.png",f={},y=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),q={class:"table-of-contents"},x=i('<h2 id="消息可靠性" tabindex="-1"><a class="header-anchor" href="#消息可靠性" aria-hidden="true">#</a> 消息可靠性</h2><p>消息从发送，到消费者接收，会经理多个过程：</p><p><img src="'+u+'" alt="image-20210718155059371"></p><p>其中的每一步都可能导致消息丢失，常见的丢失原因包括：</p><ul><li>发送时丢失： <ul><li>生产者发送的消息未送达<code>exchange</code></li><li>消息到达<code>exchange</code>后未到达<code>queue</code></li></ul></li><li><code>MQ</code>宕机，<code>queue</code>将消息丢失</li><li><code>consumer</code>接收到消息后未消费就宕机</li></ul><p>针对这些问题，<code>RabbitMQ</code>分别给出了解决方案：</p><ul><li>生产者确认机制</li><li>mq持久化</li><li>消费者确认机制</li><li>失败重试机制</li></ul><h2 id="生产者消息确认" tabindex="-1"><a class="header-anchor" href="#生产者消息确认" aria-hidden="true">#</a> 生产者消息确认</h2><p><code>RabbitMQ</code>提供了<code>publisher confirm</code>机制来避免消息发送到<code>MQ</code>过程中丢失。</p><p>这种机制必须给每个消息指定一个<strong>唯一ID</strong>。</p><p>消息发送到<code>MQ</code>以后，会返回一个结果给发送者，表示消息是否处理成功。</p><p>返回结果有两种方式：</p><ul><li><code>publisher-confirm</code>，发送者确认 <ul><li>消息成功投递到交换机，返回<code>ack</code></li><li>消息未投递到交换机，返回<code>nack</code></li></ul></li><li><code>publisher-return</code>，发送者回执 <ul><li>消息投递到交换机了，但是没有路由到队列。返回<code>ACK</code>，及路由失败原因。</li></ul></li></ul><p><img src="'+d+'" alt="image-20210718160907166"></p><p>注意：</p><p><img src="'+r+`" alt="image-20210718161707992"></p><h3 id="修改配置" tabindex="-1"><a class="header-anchor" href="#修改配置" aria-hidden="true">#</a> 修改配置</h3><p>首先，修改<code>publisher</code>服务中的<code>application.yml</code>文件，添加下面的内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">publisher-confirm-type</span><span class="token punctuation">:</span> correlated
    <span class="token key atrule">publisher-returns</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><code>publish-confirm-type</code>：开启<code>publisher-confirm</code>，这里支持两种类型： <ul><li><code>simple</code>：同步等待<code>confirm</code>结果，直到超时</li><li><code>correlated</code>：异步回调，定义<code>ConfirmCallback</code>，<code>MQ</code>返回结果时会回调这个<code>ConfirmCallback</code></li></ul></li><li><code>publish-returns</code>：开启<code>publish-return</code>功能，同样是基于<code>callback</code>机制，不过是定义<code>ReturnCallback</code></li><li><code>template.mandatory</code>：定义消息路由失败时的策略。 <ul><li><code>true</code>，则调用<code>ReturnCallback</code>；</li><li><code>false</code>：则直接丢弃消息</li></ul></li></ul><h3 id="定义return回调" tabindex="-1"><a class="header-anchor" href="#定义return回调" aria-hidden="true">#</a> 定义Return回调</h3><p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此需要在项目加载时配置：</p><p>修改<code>publisher</code>服务，添加一个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取RabbitTemplate</span>
        <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置ReturnCallback</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 投递失败，记录日志</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败，应答码{}，原因{}，交换机{}，路由键{},消息{}&quot;</span><span class="token punctuation">,</span>
                     replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果有业务需要，可以重发消息</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义confirmcallback" tabindex="-1"><a class="header-anchor" href="#定义confirmcallback" aria-hidden="true">#</a> 定义ConfirmCallback</h3><p><code>ConfirmCallback</code>可以在发送消息时指定，因为每个业务处理<code>confirm</code>成功或失败的逻辑不一定相同。</p><p>在<code>publisher</code>服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage2SimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.消息体</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, spring amqp!&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.全局唯一的消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.添加callback</span>
    correlationData<span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>
        result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 3.1.ack，消息成功</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送成功, ID:{}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment">// 3.2.nack，消息失败</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败, ID:{}, 原因{}&quot;</span><span class="token punctuation">,</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        ex <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送异常, ID:{}, 原因{}&quot;</span><span class="token punctuation">,</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;task.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;task&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 休眠一会儿，等待ack回执</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息持久化" tabindex="-1"><a class="header-anchor" href="#消息持久化" aria-hidden="true">#</a> 消息持久化</h2><p>生产者确认可以确保消息投递到<code>RabbitMQ</code>的队列中，但是消息发送到<code>RabbitMQ</code>以后，如果突然宕机，也可能导致消息丢失。</p><p>要想确保消息在<code>RabbitMQ</code>中安全保存，必须开启消息持久化机制。</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><h3 id="交换机持久化" tabindex="-1"><a class="header-anchor" href="#交换机持久化" aria-hidden="true">#</a> 交换机持久化</h3><p><code>RabbitMQ</code>中交换机默认是非持久化的，<code>mq</code>重启后就丢失。</p><p><code>SpringAMQP</code>中可以通过代码指定交换机持久化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">simpleExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;simple.direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，默认情况下，由<code>SpringAMQP</code>声明的交换机都是持久化的。</p><p>可以在<code>RabbitMQ</code>控制台看到持久化的交换机都会带上<code>D</code>的标示：</p><p><img src="`+k+`" alt="image-20210718164412450"></p><h3 id="队列持久化" tabindex="-1"><a class="header-anchor" href="#队列持久化" aria-hidden="true">#</a> 队列持久化</h3><p><code>RabbitMQ</code>中队列默认是非持久化的，<code>mq</code>重启后就丢失。</p><p><code>SpringAMQP</code>中可以通过代码指定交换机持久化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 使用QueueBuilder构建队列，durable就是持久化的</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，默认情况下，由<code>SpringAMQP</code>声明的队列都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的队列都会带上<code>D</code>的标示：</p><p><img src="`+m+'" alt="image-20210718164729543"></p><h3 id="消息持久化-1" tabindex="-1"><a class="header-anchor" href="#消息持久化-1" aria-hidden="true">#</a> 消息持久化</h3><p>利用<code>SpringAMQP</code>发送消息时，可以设置消息的属性（MessageProperties），指定<code>delivery-mode</code>：</p><ul><li>1：非持久化</li><li>2：持久化</li></ul><p>用java代码指定：</p><p><img src="'+v+`" alt="image-20210718165100016"></p><p>默认情况下，<code>SpringAMQP</code>发出的任何消息都是持久化的，不用特意指定。</p><h2 id="消费者消息确认" tabindex="-1"><a class="header-anchor" href="#消费者消息确认" aria-hidden="true">#</a> 消费者消息确认</h2><p><code>RabbitMQ</code>是<strong>阅后即焚</strong>机制，<code>RabbitMQ</code>确认消息被消费者消费后会立刻删除。</p><p>而<code>RabbitMQ</code>是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向<code>RabbitMQ</code>发送<code>ACK</code>回执，表明自己已经处理消息。</p><p>设想这样的场景：</p><ul><li>1）<code>RabbitMQ</code>投递消息给消费者</li><li>2）消费者获取消息后，返回<code>ACK</code>给<code>RabbitMQ</code></li><li>3）<code>RabbitMQ</code>删除消息</li><li>4）消费者宕机，消息尚未处理</li></ul><p>这样，消息就丢失了。因此消费者返回<code>ACK</code>的时机非常重要。</p><p>而<code>SpringAMQP</code>则允许配置三种确认模式：</p><p>•<code>manual</code>：手动<code>ack</code>，需要在业务代码结束后，调用<code>api</code>发送<code>ack</code>。</p><p>•<code>auto</code>：自动<code>ack</code>，由<code>spring</code>监测<code>listener</code>代码是否出现异常，没有异常则返回<code>ack</code>；抛出异常则返回<code>nack</code></p><p>•<code>none</code>：关闭<code>ack</code>，<code>MQ</code>假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p><p>由此可知：</p><ul><li><code>none</code>模式下，消息投递是不可靠的，可能丢失</li><li><code>auto</code>模式类似事务机制，出现异常时返回<code>nack</code>，消息回滚到<code>mq</code>；没有异常，返回<code>ack</code></li><li><code>manual</code>：自己根据业务情况，判断什么时候该<code>ack</code></li></ul><p>一般，我们都是使用默认的<code>auto</code>即可。</p><h3 id="演示none模式" tabindex="-1"><a class="header-anchor" href="#演示none模式" aria-hidden="true">#</a> 演示none模式</h3><p>修改<code>consumer</code>服务的<code>application.yml</code>文件，添加下面内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> none <span class="token comment"># 关闭ack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>consumer</code>服务的<code>SpringRabbitListener</code>类中的方法，模拟一个消息处理异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenSimpleQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到simple.queue的消息：【{}】&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟异常</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息处理完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试可以发现，当消息处理抛异常时，消息依然被<code>RabbitMQ</code>删除了。</p><h3 id="演示auto模式" tabindex="-1"><a class="header-anchor" href="#演示auto模式" aria-hidden="true">#</a> 演示auto模式</h3><p>再次把确认机制修改为<code>auto</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> auto <span class="token comment"># 关闭ack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为unack（未确定状态）：</p><p><img src="`+b+'" alt="image-20210718171705383"></p><p>抛出异常后，因为<code>Spring</code>会自动返回<code>nack</code>，所以消息恢复至<code>Ready</code>状态，并且没有被<code>RabbitMQ</code>删除：</p><p><img src="'+g+'" alt="image-20210718171759179"></p><h2 id="消费失败重试机制" tabindex="-1"><a class="header-anchor" href="#消费失败重试机制" aria-hidden="true">#</a> 消费失败重试机制</h2><p>当消费者出现异常后，消息会不断<code>requeue</code>（重入队）到队列，再重新发送给消费者，然后再次异常，再次<code>requeue</code>，无限循环，导致<code>mq</code>的消息处理飙升，带来不必要的压力：</p><p><img src="'+h+`" alt="image-20210718172746378"></p><p>怎么办呢？</p><h3 id="本地重试" tabindex="-1"><a class="header-anchor" href="#本地重试" aria-hidden="true">#</a> 本地重试</h3><p>我们可以利用<code>Spring</code>的<code>retry</code>机制，在消费者出现异常时利用本地重试，而不是无限制的<code>requeue</code>到<code>mq</code>队列。</p><p>修改<code>consumer</code>服务的<code>application.yml</code>文件，添加内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">retry</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启消费者失败重试</span>
          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 初识的失败等待时长为1秒</span>
          <span class="token key atrule">multiplier</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span>
          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 最大重试次数</span>
          <span class="token key atrule">stateless</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<code>consumer</code>服务，重复之前的测试。可以发现：</p><ul><li>在重试3次后，<code>SpringAMQP</code>会抛出异常<code>AmqpRejectAndDontRequeueException</code>，说明本地重试触发了</li><li>查看<code>RabbitMQ</code>控制台，发现消息被删除了，说明最后<code>SpringAMQP</code>返回的是<code>ack</code>，<code>mq</code>删除消息了</li></ul><p>结论：</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会<code>requeue</code>到队列，而是在消费者本地重试</li><li>重试达到最大次数后，<code>Spring</code>会返回<code>ack</code>，消息会被丢弃</li></ul><h3 id="失败策略" tabindex="-1"><a class="header-anchor" href="#失败策略" aria-hidden="true">#</a> 失败策略</h3><p>在之前的测试中，达到最大重试次数后，消息会被丢弃，这是由<code>Spring</code>内部机制决定的。</p><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有<code>MessageRecovery</code>接口来处理，它包含三种不同的实现：</p><ul><li><p><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式</p></li><li><p><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，返回<code>nack</code>，消息重新入队</p></li><li><p><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</p></li></ul><p>比较优雅的一种处理方案是<code>RepublishMessageRecoverer</code>，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p>1）在<code>consumer</code>服务中定义处理失败消息的交换机和队列</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;error.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">errorBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> errorQueue<span class="token punctuation">,</span> <span class="token class-name">DirectExchange</span> errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）定义一个<code>RepublishMessageRecoverer</code>，关联队列和交换机</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MessageRecoverer</span> <span class="token function">republishMessageRecoverer</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RepublishMessageRecoverer</span><span class="token punctuation">(</span>rabbitTemplate<span class="token punctuation">,</span> <span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorMessageConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;error.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">errorBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> errorQueue<span class="token punctuation">,</span> <span class="token class-name">DirectExchange</span> errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageRecoverer</span> <span class="token function">republishMessageRecoverer</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RepublishMessageRecoverer</span><span class="token punctuation">(</span>rabbitTemplate<span class="token punctuation">,</span> <span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如何确保<code>RabbitMQ</code>消息的可靠性？</p><ul><li>开启生产者确认机制，确保生产者的消息能到达队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为<code>auto</code>，由<code>spring</code>确认消息处理成功后完成<code>ack</code></li><li>开启消费者失败重试机制，并设置<code>MessageRecoverer</code>，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul>`,105);function w(R,M){const s=c("router-link");return o(),l("div",null,[y,n("nav",q,[n("ul",null,[n("li",null,[e(s,{to:"#消息可靠性"},{default:t(()=>[a("消息可靠性")]),_:1})]),n("li",null,[e(s,{to:"#生产者消息确认"},{default:t(()=>[a("生产者消息确认")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#修改配置"},{default:t(()=>[a("修改配置")]),_:1})]),n("li",null,[e(s,{to:"#定义return回调"},{default:t(()=>[a("定义Return回调")]),_:1})]),n("li",null,[e(s,{to:"#定义confirmcallback"},{default:t(()=>[a("定义ConfirmCallback")]),_:1})])])]),n("li",null,[e(s,{to:"#消息持久化"},{default:t(()=>[a("消息持久化")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#交换机持久化"},{default:t(()=>[a("交换机持久化")]),_:1})]),n("li",null,[e(s,{to:"#队列持久化"},{default:t(()=>[a("队列持久化")]),_:1})]),n("li",null,[e(s,{to:"#消息持久化-1"},{default:t(()=>[a("消息持久化")]),_:1})])])]),n("li",null,[e(s,{to:"#消费者消息确认"},{default:t(()=>[a("消费者消息确认")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#演示none模式"},{default:t(()=>[a("演示none模式")]),_:1})]),n("li",null,[e(s,{to:"#演示auto模式"},{default:t(()=>[a("演示auto模式")]),_:1})])])]),n("li",null,[e(s,{to:"#消费失败重试机制"},{default:t(()=>[a("消费失败重试机制")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#本地重试"},{default:t(()=>[a("本地重试")]),_:1})]),n("li",null,[e(s,{to:"#失败策略"},{default:t(()=>[a("失败策略")]),_:1})])])]),n("li",null,[e(s,{to:"#总结"},{default:t(()=>[a("总结")]),_:1})])])]),x])}const Q=p(f,[["render",w],["__file","MessageReliability.html.vue"]]);export{Q as default};
