import{_ as i,M as l,p,q as r,R as a,N as e,V as t,t as s,a1 as c}from"./framework-5866ffd3.js";const o="/FullStackNotes/assets/image-20210717234329640-a6584c37.png",d="/FullStackNotes/assets/image-20210717234426209-33619081.png",u="/FullStackNotes/assets/image-20210718001909492-918ea15c.png",m="/FullStackNotes/assets/image-20210718002118357-d4f0dbca.png",b="/FullStackNotes/assets/image-20210718002253226-e8b2f3ca.png",v="/FullStackNotes/assets/image-20210718002342603-65546e46.png",h="/FullStackNotes/assets/image-20210718002422365-689e4085.png",k={},g=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),q={class:"table-of-contents"},_=c('<h2 id="仲裁队列" tabindex="-1"><a class="header-anchor" href="#仲裁队列" aria-hidden="true">#</a> 仲裁队列</h2><h3 id="集群特征" tabindex="-1"><a class="header-anchor" href="#集群特征" aria-hidden="true">#</a> 集群特征</h3><p>仲裁队列：仲裁队列是3.8版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致</li></ul><h3 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h3><h4 id="添加仲裁队列" tabindex="-1"><a class="header-anchor" href="#添加仲裁队列" aria-hidden="true">#</a> 添加仲裁队列</h4><p>在任意控制台添加一个队列，一定要选择队列类型为<code>Quorum</code>类型。</p><p><img src="'+o+'" alt="image-20210717234329640"></p><p>在任意控制台查看队列：</p><p><img src="'+d+`" alt="image-20210717234426209"></p><p>可以看到，仲裁队列的 + 2字样。代表这个队列有2个镜像节点。</p><p>因为仲裁队列默认的镜像数为5。如果你的集群有7个节点，那么镜像数肯定是5；而我们集群只有3个节点，因此镜像数量就是3.</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>可以参考对镜像集群的测试，效果是一样的。</p><h2 id="集群扩容" tabindex="-1"><a class="header-anchor" href="#集群扩容" aria-hidden="true">#</a> 集群扩容</h2><h3 id="加入集群" tabindex="-1"><a class="header-anchor" href="#加入集群" aria-hidden="true">#</a> 加入集群</h3><p>1）启动一个新的<code>MQ</code>容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq4 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq5 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8074</span>:15672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8084</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）进入容器控制台：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq4 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）停止<code>mq</code>进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl stop_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）重置<code>RabbitMQ</code>中的数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5）加入<code>mq1</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl join_cluster rabbit@mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6）再次启动<code>mq</code>进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl start_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt="image-20210718001909492"></p><h3 id="增加仲裁队列副本" tabindex="-1"><a class="header-anchor" href="#增加仲裁队列副本" aria-hidden="true">#</a> 增加仲裁队列副本</h3><p>我们先查看下<code>quorum.queue</code>这个队列目前的副本情况，进入<code>mq1</code>容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq1 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues quorum_status <span class="token string">&quot;quorum.queue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><p><img src="`+m+`" alt="image-20210718002118357"></p><p>现在，我们让<code>mq4</code>也加入进来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues add_member <span class="token string">&quot;quorum.queue&quot;</span> <span class="token string">&quot;rabbit@mq4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><p><img src="`+b+`" alt="image-20210718002253226"></p><p>再次查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues quorum_status <span class="token string">&quot;quorum.queue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+v+'" alt="image-20210718002342603"></p><p>查看控制台，发现<code>quorum.queue</code>的镜像数量也从原来的 +2 变成了 +3：</p><p><img src="'+h+`" alt="image-20210718002422365"></p><h2 id="java代码创建仲裁队列" tabindex="-1"><a class="header-anchor" href="#java代码创建仲裁队列" aria-hidden="true">#</a> Java代码创建仲裁队列</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">quorumQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;quorum.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 持久化</span>
        <span class="token punctuation">.</span><span class="token function">quorum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 仲裁队列</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springamqp连接mq集群" tabindex="-1"><a class="header-anchor" href="#springamqp连接mq集群" aria-hidden="true">#</a> SpringAMQP连接MQ集群</h2><p>注意，这里用address来代替host、port方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spring<span class="token operator">:</span>
  rabbitmq<span class="token operator">:</span>
    addresses<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.105</span><span class="token operator">:</span><span class="token number">8071</span><span class="token punctuation">,</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.105</span><span class="token operator">:</span><span class="token number">8072</span><span class="token punctuation">,</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.105</span><span class="token operator">:</span><span class="token number">8073</span>
    username<span class="token operator">:</span> itcast
    password<span class="token operator">:</span> <span class="token number">123321</span>
    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50);function f(x,Q){const n=l("router-link");return p(),r("div",null,[g,a("nav",q,[a("ul",null,[a("li",null,[e(n,{to:"#仲裁队列"},{default:t(()=>[s("仲裁队列")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#集群特征"},{default:t(()=>[s("集群特征")]),_:1})]),a("li",null,[e(n,{to:"#部署"},{default:t(()=>[s("部署")]),_:1})])])]),a("li",null,[e(n,{to:"#集群扩容"},{default:t(()=>[s("集群扩容")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#加入集群"},{default:t(()=>[s("加入集群")]),_:1})]),a("li",null,[e(n,{to:"#增加仲裁队列副本"},{default:t(()=>[s("增加仲裁队列副本")]),_:1})])])]),a("li",null,[e(n,{to:"#java代码创建仲裁队列"},{default:t(()=>[s("Java代码创建仲裁队列")]),_:1})]),a("li",null,[e(n,{to:"#springamqp连接mq集群"},{default:t(()=>[s("SpringAMQP连接MQ集群")]),_:1})])])]),_])}const N=i(k,[["render",f],["__file","ArbitrationQueue.html.vue"]]);export{N as default};
