import{_ as p,M as o,p as c,q as i,R as n,N as t,V as e,t as s,a1 as l}from"./framework-5866ffd3.js";const u={},r=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),d={class:"table-of-contents"},k=l(`<h2 id="spring获取bean的几种方式" tabindex="-1"><a class="header-anchor" href="#spring获取bean的几种方式" aria-hidden="true">#</a> Spring获取Bean的几种方式</h2><p>一共七种方式：</p><p>1、使用 <strong><code>BeanFactory</code></strong> 直接获取（不推荐）</p><p>2、在初始化时保存 <strong><code>ApplicationContext</code></strong> 对象</p><p>3、继承自抽象类 <strong><code>ApplicationObjectSupport</code></strong></p><p>4、继承自抽象类 <strong><code>WebApplicationObjectSupport</code></strong></p><p>5、使用<code>Spring</code>提供的工具类 <strong><code>WebApplicationContextUtils</code></strong></p><p>6、实现 <strong><code>ApplicationContextAware</code></strong> 接口</p><p>7、使用 <strong><code>ContextLoader</code></strong> 提供的 <strong><code>getCurrentWebApplicationContext</code>()</strong> 方法</p><h3 id="_1、使用beanfactory直接获取-不推荐" tabindex="-1"><a class="header-anchor" href="#_1、使用beanfactory直接获取-不推荐" aria-hidden="true">#</a> 1、使用BeanFactory直接获取（不推荐）</h3><p>使用 <strong><code>BeanFactory</code></strong> 从工厂中直接获取<code>Bean</code>实例，但是 <strong><code>XmlBeanFactory</code></strong> 类已经废弃，因此不建议使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 方式一：XmlBeanFactory已经废弃不建议使用
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、在初始化时保存applicationcontext对象" tabindex="-1"><a class="header-anchor" href="#_2、在初始化时保存applicationcontext对象" aria-hidden="true">#</a> 2、在初始化时保存ApplicationContext对象</h3><p>可以在初始化的时候保存 <strong><code>ApplicationContext</code></strong> 对象，然后通过这个对象获取<code>Bean</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 方式二：使用ClassPathXmlApplicationContext获取ApplicationContext
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、继承自抽象类applicationobjectsupport" tabindex="-1"><a class="header-anchor" href="#_3、继承自抽象类applicationobjectsupport" aria-hidden="true">#</a> 3、继承自抽象类ApplicationObjectSupport</h3><p>可以继承抽象类 <strong><code>ApplicationObjectSupport</code></strong> 并将自己继承的类注入到<code>Spring</code>容器中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 方法三：继承ApplicationObjectSupport来获取ApplicationContext，
 * 注意：需要把自己继承的类注入到Spring
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContextUtil2</span> applicationContextUtil2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContextUtil2</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContextUtil2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> applicationContextUtil2<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<strong>ApplicationContextUtil2</strong>的代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextUtil2</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationObjectSupport</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 通过bean的id获取bean对象
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、继承自抽象类webapplicationobjectsupport" tabindex="-1"><a class="header-anchor" href="#_4、继承自抽象类webapplicationobjectsupport" aria-hidden="true">#</a> 4、继承自抽象类WebApplicationObjectSupport</h3><p>可以继承抽象类 <strong><code>WebApplicationObjectSupport</code></strong> 并将自己继承的类注入到<code>Spring</code>容器中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 方法四：继承WebApplicationObjectSupport来获取ApplicationContext，
 * 注意：需要把自己继承的类注入到Spring，同时需要添加@WebAppConfiguration注解，否则会找不到web容器
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContextUtil3</span> applicationContextUtil3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContextUtil3</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContextUtil3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> applicationContextUtil3<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <strong>ApplicationContextUtil3</strong> 的示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextUtil3</span> <span class="token keyword">extends</span> <span class="token class-name">WebApplicationObjectSupport</span><span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 通过bean的id获取bean对象
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、使用spring提供的工具类webapplicationcontextutils" tabindex="-1"><a class="header-anchor" href="#_5、使用spring提供的工具类webapplicationcontextutils" aria-hidden="true">#</a> 5、使用Spring提供的工具类WebApplicationContextUtils</h3><p>使用<code>Spring</code>提供的工具类 <strong><code>WebApplicationContextUtils</code></strong> 来获取 <strong><code>WebApplicationContext</code></strong> 对象，这个方法很常见于<code>SpringMVC</code>构建的<code>web</code>项目中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * 方法五：使用WebApplicationContextUtils提供的方法获取ApplicationContext对象
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//模拟ServletContext上下文，不然会出现空指针异常</span>
    <span class="token class-name">MockServletContext</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockServletContext</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sc<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token constant">CONFIG_LOCATION_PARAM</span><span class="token punctuation">,</span> <span class="token string">&quot;/applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletContextListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletContextEvent</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextEvent</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listener<span class="token punctuation">.</span><span class="token function">contextInitialized</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//使用WebApplicationContextUtils的getRequiredWebApplicationContext方法</span>
    <span class="token class-name">WebApplicationContext</span> webApplicationContext <span class="token operator">=</span> <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getRequiredWebApplicationContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> webApplicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//使用WebApplicationContextUtils的getWebApplicationContext方法</span>
    <span class="token class-name">WebApplicationContext</span> webApplicationContext2 <span class="token operator">=</span> <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> webApplicationContext2<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、实现applicationcontextaware接口" tabindex="-1"><a class="header-anchor" href="#_6、实现applicationcontextaware接口" aria-hidden="true">#</a> 6、实现ApplicationContextAware接口</h3><p>通过实现 <strong><code>ApplicationContextAware</code></strong> 接口，在<code>Spring</code>容器启动的时候将**<code>ApplicationContext</code><strong>注入进去，从而获取</strong><code>ApplicationContext</code>**对象，这种方法也是常见的获取<code>Bean</code>的一种方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *方法六：实现ApplicationContextAware接口获取ApplicationContext
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">UserInfo</span> userInfo2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<strong>ApplicationContextUtil</strong>的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextUtil</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 通过bean的id获取bean对象
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 根据bean的id和类型获取bean对象
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span>
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、使用contextloader提供的getcurrentwebapplicationcontext-方法" tabindex="-1"><a class="header-anchor" href="#_7、使用contextloader提供的getcurrentwebapplicationcontext-方法" aria-hidden="true">#</a> 7、使用ContextLoader提供的getCurrentWebApplicationContext()方法</h3><p>使用 <strong><code>ContextLoader</code></strong> 提供的 <strong><code>getCurrentWebApplicationContext</code></strong> 方法提供的方法也是常用的获取 <strong><code>WebApplicationContext</code></strong> 的一种方法，这个方法常见于SpringMVC实现的web项目中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 方法七：使用ContextLoader的getCurrentWebApplicationContext方法获取WebApplicationContext
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanTest7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MockServletContext</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockServletContext</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sc<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token constant">CONFIG_LOCATION_PARAM</span><span class="token punctuation">,</span> <span class="token string">&quot;/applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletContextListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletContextEvent</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextEvent</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listener<span class="token punctuation">.</span><span class="token function">contextInitialized</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果不加上面的模拟创建ServletContext对象，会报空指针异常</span>
    <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> wac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function v(m,b){const a=o("router-link");return c(),i("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#spring获取bean的几种方式"},{default:e(()=>[s("Spring获取Bean的几种方式")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1、使用beanfactory直接获取-不推荐"},{default:e(()=>[s("1、使用BeanFactory直接获取（不推荐）")]),_:1})]),n("li",null,[t(a,{to:"#_2、在初始化时保存applicationcontext对象"},{default:e(()=>[s("2、在初始化时保存ApplicationContext对象")]),_:1})]),n("li",null,[t(a,{to:"#_3、继承自抽象类applicationobjectsupport"},{default:e(()=>[s("3、继承自抽象类ApplicationObjectSupport")]),_:1})]),n("li",null,[t(a,{to:"#_4、继承自抽象类webapplicationobjectsupport"},{default:e(()=>[s("4、继承自抽象类WebApplicationObjectSupport")]),_:1})]),n("li",null,[t(a,{to:"#_5、使用spring提供的工具类webapplicationcontextutils"},{default:e(()=>[s("5、使用Spring提供的工具类WebApplicationContextUtils")]),_:1})]),n("li",null,[t(a,{to:"#_6、实现applicationcontextaware接口"},{default:e(()=>[s("6、实现ApplicationContextAware接口")]),_:1})]),n("li",null,[t(a,{to:"#_7、使用contextloader提供的getcurrentwebapplicationcontext-方法"},{default:e(()=>[s("7、使用ContextLoader提供的getCurrentWebApplicationContext()方法")]),_:1})])])])])]),k])}const x=p(u,[["render",v],["__file","GetBean.html.vue"]]);export{x as default};
