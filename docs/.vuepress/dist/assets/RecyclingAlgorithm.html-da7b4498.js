import{_ as o,M as n,p as t,q as d,R as e,N as r,V as a,t as i,a1 as p}from"./framework-5866ffd3.js";const s="/FullStackNotes/assets/image-20230408174259989-a8c7f236.png",c="/FullStackNotes/assets/image-20230408174411880-a0e5605b.png",u="/FullStackNotes/assets/1676427599648-4e93e95b-d127-43ca-b24d-7c0d9c7cdf01-9f8158b8.png",h="/FullStackNotes/assets/image-20230408174809046-71594584.png",_="/FullStackNotes/assets/image-20230408174906987-a9818b72.png",v={},m=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),i(" 目录")],-1),g={class:"table-of-contents"},f=p('<h2 id="常用垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#常用垃圾回收算法" aria-hidden="true">#</a> 常用垃圾回收算法</h2><p>常用的垃圾回收算法有三种</p><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-整理算法</li></ul><h3 id="_1-标记-清除算法" tabindex="-1"><a class="header-anchor" href="#_1-标记-清除算法" aria-hidden="true">#</a> （1）标记-清除算法</h3><p>分为标记和清除两个阶段</p><p>首先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象</p><p>缺点：</p><ol><li>标记和清除两个过程效率都不高；</li><li>标记清除之后会产生大量不连续的内存碎片</li></ol><p><img src="'+s+'" alt="image-20230408174259989"></p><h3 id="_2-复制算法" tabindex="-1"><a class="header-anchor" href="#_2-复制算法" aria-hidden="true">#</a> （2）复制算法</h3><p>把内存分为大小相等的两块，每次存储只用其中一块，当这一块用完了，就把存活的对象全部复制到另一块上</p><p>同时把使用过的这块内存空间全部清理掉，往复循环</p><p>缺点：</p><p>实际可使用的内存空间缩小为原来的一半。</p><p><img src="'+c+'" alt="image-20230408174411880"></p><h3 id="复制算法优化" tabindex="-1"><a class="header-anchor" href="#复制算法优化" aria-hidden="true">#</a> 复制算法优化</h3><p>实际上真正的复制算法会做出如下优化，把内存区域划分为三块</p><p>1个Eden区，2个Survivor区</p><p>其中Eden区占80%内存空间，每一块Survivor区各占10%内存空间</p><p>比如说Eden区有800MB内存，每 一块Survivor区就100MB内存</p><p><img src="'+u+'" alt="image.png"></p><p>平时可以使用的，就是Eden区和其中一块Survivor区，那么相当于就是有900MB的内存是可以使用的</p><ul><li>刚开始对象都是分配在Eden区内的，如果Eden区快满了，此时就会触发垃圾回收</li><li>此时就会把Eden区中的存活对象都一次性转移到一块空着的Survivor区。</li><li>接着Eden区就会被清空，然后再次分配新对象到Eden区里，</li><li>然后就会如上图所示，Eden区和一块Survivor区里是有对象的，其中Survivor区里放的是上一次Minor GC后存活的对象。</li><li>如果下次再次Eden区满，那么再次触发Minor GC，就会把Eden区和放着上一次Minor GC后存活对象的Survivor区内的存活对象，转移到另外一块Survivor区去</li><li><strong>始终保持一块Survivor区是空着的</strong>，就这样一直<strong>循环使用这三 块内存区域。</strong></li></ul><h3 id="_3-标记-整理算法" tabindex="-1"><a class="header-anchor" href="#_3-标记-整理算法" aria-hidden="true">#</a> （3）标记-整理算法</h3><p>先对可用的对象进行标记，然后所有被标记的对象向一段移动，最后清除可用对象边界以外的内存</p><p><img src="'+h+'" alt="image-20230408174809046"></p><h3 id="_4-分代收集算法" tabindex="-1"><a class="header-anchor" href="#_4-分代收集算法" aria-hidden="true">#</a> （4）分代收集算法</h3><p>把堆内存分为新生代和老年代，新生代又分为 Eden 区、From Survivor 和 To Survivor。</p><p>一 般新生代中的对象基本上都是朝生夕灭的，每次只有少量对象存活，因此采用复制算法，只需要复制那些少量存活的对象就可以完成垃圾收集；</p><p>老年代中的对象存活率较高，就采用标记-清除和标记-整理算法来进行回收。</p><p><img src="'+_+'" alt="image-20230408174906987"></p><h2 id="垃圾回收的几种情况" tabindex="-1"><a class="header-anchor" href="#垃圾回收的几种情况" aria-hidden="true">#</a> 垃圾回收的几种情况</h2><p>大多数情况下，新的对象都分配在Eden区，当 Eden 区没有空间进行分配时，将进行一次 Minor GC，清理 Eden 区中的无用对象。</p><p>清理后，Eden 和 From Survivor 中的存活对象如果小于To Survivor 的可用空间则进 入To Survivor，否则直接进入老年代）；</p><p>Eden 和 From Survivor 中还存活且能够进入 To Survivor 的对象年 龄增加 1 岁</p><blockquote><p>（虚拟机为每个对象定义了一个年龄计数器，每执行一次 Minor GC 年龄加 1），当存活对象的年 龄到达一定程度（默认 15 岁）后进入老年代，可以通过 <code>-XX:MaxTenuringThreshold</code> 来设置年龄的值。</p></blockquote><p>当进行了 Minor GC 后，Eden 还不足以为新对象分配空间（那这个新对象肯定很大），新对象直接进入老年代。</p><p>占 To Survivor 空间一半以上且年龄相等的对象，大于等于该年龄的对象直接进入老年代</p><p>比如 Survivor 空 间是 10M，有几个年龄为 4 的对象占用总空间已经超过 5M，则年龄大于等于 4 的对象都直接进入老年代， 不需要等到 <code>MaxTenuringThreshold</code> 指定的岁数。</p><ul><li><p>在进行 Minor GC 之前，会判断老年代最大连续可用空间是否大于新生代所有对象总空间</p><ul><li><p>如果大于，说明 Minor GC 是安全的</p></li><li><p>否则会判断是否允许担保失败</p><ul><li>如果允许，判断老年代最大连续可用空间是否大于历次晋升到老年代的对象的平均大小 <ul><li>如果大于，则执行 Minor GC，否则执行 Full GC。</li><li>如果经过 Full GC 还无法满足存放新数据的需求，就会抛出 内存溢出异常。</li></ul></li></ul></li></ul></li></ul><p>当在 java 代码里直接调用 <code>System.gc()</code> 时，会建议 <code>JVM</code> 进行 <code>Full GC</code>，但一般情况下都会触发 <code>Full GC</code>，一般 不建议使用，尽量让虚拟机自己管理 <code>GC</code> 的策略。</p><p>大对象（需要大量连续内存的对象）例如很长的数组，会直接进入老年代，如果老年代没有足够的连续大空间来存放，则会进行 <code>Full GC</code>。</p>',42);function S(E,M){const l=n("router-link");return t(),d("div",null,[m,e("nav",g,[e("ul",null,[e("li",null,[r(l,{to:"#常用垃圾回收算法"},{default:a(()=>[i("常用垃圾回收算法")]),_:1}),e("ul",null,[e("li",null,[r(l,{to:"#_1-标记-清除算法"},{default:a(()=>[i("（1）标记-清除算法")]),_:1})]),e("li",null,[r(l,{to:"#_2-复制算法"},{default:a(()=>[i("（2）复制算法")]),_:1})]),e("li",null,[r(l,{to:"#复制算法优化"},{default:a(()=>[i("复制算法优化")]),_:1})]),e("li",null,[r(l,{to:"#_3-标记-整理算法"},{default:a(()=>[i("（3）标记-整理算法")]),_:1})]),e("li",null,[r(l,{to:"#_4-分代收集算法"},{default:a(()=>[i("（4）分代收集算法")]),_:1})])])]),e("li",null,[r(l,{to:"#垃圾回收的几种情况"},{default:a(()=>[i("垃圾回收的几种情况")]),_:1})])])]),f])}const b=o(v,[["render",S],["__file","RecyclingAlgorithm.html.vue"]]);export{b as default};
