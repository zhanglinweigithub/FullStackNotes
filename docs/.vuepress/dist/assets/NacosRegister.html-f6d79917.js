import{_ as c,M as p,p as l,q as o,R as a,N as e,V as t,t as s,a1 as i}from"./framework-5866ffd3.js";const u="/FullStackNotes/assets/image-20210713231439607-8ac53342.png",d="/FullStackNotes/assets/image-20210713232522531-a62668e4.png",r="/FullStackNotes/assets/image-20210713232658928-ef2e2e0e.png",m="/FullStackNotes/assets/image-20210713232916215-4648b223.png",k="/FullStackNotes/assets/image-20210713233528982-1db3e786.png",g="/FullStackNotes/assets/image-20210713233727923-c7a3140c.png",v="/FullStackNotes/assets/image-20210713235133225-53c68e3b.png",b="/FullStackNotes/assets/image-20210713235235219-c1f68d9c.png",h="/FullStackNotes/assets/image-20210714000101516-40beadff.png",_="/FullStackNotes/assets/image-20210714000414781-fc6ca280.png",y="/FullStackNotes/assets/image-20210714000440143-44fd2ac2.png",f="/FullStackNotes/assets/image-20210714000505928-65ded151.png",N="/FullStackNotes/assets/image-20210714000522913-7d614234.png",x="/FullStackNotes/assets/image-20210714000830703-2ca6ce38.png",S="/FullStackNotes/assets/image-20210714000837140-57556b2c.png",F="/FullStackNotes/assets/image-20210714000941256-f9c9b88b.png",E="/FullStackNotes/assets/image-20210714001728017-0f7ef698.png",A={},C=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),I={class:"table-of-contents"},R=i(`<h2 id="nacos注册中心" tabindex="-1"><a class="header-anchor" href="#nacos注册中心" aria-hidden="true">#</a> Nacos注册中心</h2><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#服务注册到nacos" aria-hidden="true">#</a> 服务注册到Nacos</h2><p><code>Nacos</code>是<code>SpringCloudAlibaba</code>的组件，而<code>SpringCloudAlibaba</code>也遵循<code>SpringCloud</code>中定义的服务注册、服务发现规范。因此使用<code>Nacos</code>和使用<code>Eureka</code>对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1）引入依赖</h3><p>父工程的<code>pom</code>文件中的<code>&lt;dependencyManagement&gt;</code>中引入<code>SpringCloudAlibaba</code>的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的<code>pom</code>文件中引入<code>nacos-discovery</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置nacos地址" tabindex="-1"><a class="header-anchor" href="#_2-配置nacos地址" aria-hidden="true">#</a> 2）配置nacos地址</h3><p>在user-service和order-service的<code>application.yml</code>中添加<code>nacos</code>地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-重启" tabindex="-1"><a class="header-anchor" href="#_3-重启" aria-hidden="true">#</a> 3）重启</h3><p>重启微服务后，登录<code>nacos</code>管理页面，可以看到微服务信息：</p><p><img src="`+u+'" alt="image-20210713231439607"></p><h2 id="服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#服务分级存储模型" aria-hidden="true">#</a> 服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p><code>Nacos</code>就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="'+d+'" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="'+r+`" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#给user-service配置集群" aria-hidden="true">#</a> 给user-service配置集群</h3><p>修改user-service的<code>application.yml</code>文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启两个user-service实例后，我们可以在<code>nacos</code>控制台看到下面结果：</p><p><img src="`+m+`" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8083</span> -Dspring.cloud.nacos.discovery.cluster-name<span class="token operator">=</span>SH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如图所示：</p><p><img src="`+k+'" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看<code>nacos</code>控制台：</p><p><img src="'+g+`" alt="image-20210713233727923"></p><h3 id="同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#同集群优先的负载均衡" aria-hidden="true">#</a> 同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此<code>Nacos</code>中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的<code>application.yml</code>文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改负载均衡规则</p><p>修改order-service的<code>application.yml</code>文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="权重配置" tabindex="-1"><a class="header-anchor" href="#权重配置" aria-hidden="true">#</a> 权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下<code>NacosRule</code>是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，<code>Nacos</code>提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在<code>nacos</code>控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="`+v+'" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="'+b+'" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="环境隔离" tabindex="-1"><a class="header-anchor" href="#环境隔离" aria-hidden="true">#</a> 环境隔离</h2><p><code>Nacos</code>提供了<code>namespace</code>来实现环境隔离功能。</p><ul><li><code>nacos</code>中可以有多个<code>namespace</code></li><li><code>namespace</code>下可以有<code>group</code>、<code>service</code>等</li><li>不同<code>namespace</code>之间相互隔离，例如不同<code>namespace</code>的服务互相不可见</li></ul><p><img src="'+h+'" alt="image-20210714000101516"></p><h3 id="创建namespace" tabindex="-1"><a class="header-anchor" href="#创建namespace" aria-hidden="true">#</a> 创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="'+_+'" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="'+y+'" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="'+f+'" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="'+N+`" alt="image-20210714000522913"></p><h3 id="给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#给微服务配置namespace" aria-hidden="true">#</a> 给微服务配置namespace</h3><p>给微服务配置<code>namespace</code>只能通过修改配置来实现。</p><p>例如，修改order-service的<code>application.yml</code>文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 492a7d5d<span class="token punctuation">-</span>237b<span class="token punctuation">-</span>46a1<span class="token punctuation">-</span>a99a<span class="token punctuation">-</span>fa8e98e4b0f9 <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="`+x+'" alt="image-20210714000830703"></p><p><img src="'+S+'" alt="image-20210714000837140"></p><p>此时访问order-service，因为<code>namespace</code>不同，会导致找不到userservice，控制台会报错：</p><p><img src="'+F+`" alt="image-20210714000941256"></p><h2 id="nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#nacos与eureka的区别" aria-hidden="true">#</a> Nacos与Eureka的区别</h2><p><code>Nacos</code>的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="`+E+'" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul>',88);function V(B,H){const n=p("router-link");return l(),o("div",null,[C,a("nav",I,[a("ul",null,[a("li",null,[e(n,{to:"#nacos注册中心"},{default:t(()=>[s("Nacos注册中心")]),_:1})]),a("li",null,[e(n,{to:"#服务注册到nacos"},{default:t(()=>[s("服务注册到Nacos")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#_1-引入依赖"},{default:t(()=>[s("1）引入依赖")]),_:1})]),a("li",null,[e(n,{to:"#_2-配置nacos地址"},{default:t(()=>[s("2）配置nacos地址")]),_:1})]),a("li",null,[e(n,{to:"#_3-重启"},{default:t(()=>[s("3）重启")]),_:1})])])]),a("li",null,[e(n,{to:"#服务分级存储模型"},{default:t(()=>[s("服务分级存储模型")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#给user-service配置集群"},{default:t(()=>[s("给user-service配置集群")]),_:1})]),a("li",null,[e(n,{to:"#同集群优先的负载均衡"},{default:t(()=>[s("同集群优先的负载均衡")]),_:1})])])]),a("li",null,[e(n,{to:"#权重配置"},{default:t(()=>[s("权重配置")]),_:1})]),a("li",null,[e(n,{to:"#环境隔离"},{default:t(()=>[s("环境隔离")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#创建namespace"},{default:t(()=>[s("创建namespace")]),_:1})]),a("li",null,[e(n,{to:"#给微服务配置namespace"},{default:t(()=>[s("给微服务配置namespace")]),_:1})])])]),a("li",null,[e(n,{to:"#nacos与eureka的区别"},{default:t(()=>[s("Nacos与Eureka的区别")]),_:1})])])]),R])}const q=c(A,[["render",V],["__file","NacosRegister.html.vue"]]);export{q as default};
