import{_ as s,M as n,p as r,q as o,R as a,N as i,V as l,t,a1 as d}from"./framework-5866ffd3.js";const c={},h=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),t(" 目录")],-1),u={class:"table-of-contents"},_=d('<h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h2><h3 id="什么是mybatis" tabindex="-1"><a class="header-anchor" href="#什么是mybatis" aria-hidden="true">#</a> 什么是MyBatis</h3><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL</p><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</p><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects， 普通老式 Java 对象）为数据库中的记录。</p><p>MyBatis 是一个半自动化的ORM框架，因为他需要我们自己去写sql</p><h3 id="mybatis的优缺点" tabindex="-1"><a class="header-anchor" href="#mybatis的优缺点" aria-hidden="true">#</a> MyBatis的优缺点</h3><p>优点：</p><ul><li>基于SQL语句编程，相当灵活，SQL写在XML里，解除 sql与程序代码的耦合，便于统一管理，支持编写动态SQL语句</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接</li><li>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支 持）</li><li>能够与Spring很好的集成</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射</li></ul><p>缺点：</p><ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul><h3 id="什么是orm" tabindex="-1"><a class="header-anchor" href="#什么是orm" aria-hidden="true">#</a> 什么是ORM</h3><p>**ORM（Object Relational Mapping）：**对象关系映射，简单点说就是将数据库中的表和java中的对象 建立映射关系，可以让我们操作对象来间接的操作数据库</p>',13);function p(y,M){const e=n("router-link");return r(),o("div",null,[h,a("nav",u,[a("ul",null,[a("li",null,[i(e,{to:"#mybatis"},{default:l(()=>[t("MyBatis")]),_:1}),a("ul",null,[a("li",null,[i(e,{to:"#什么是mybatis"},{default:l(()=>[t("什么是MyBatis")]),_:1})]),a("li",null,[i(e,{to:"#mybatis的优缺点"},{default:l(()=>[t("MyBatis的优缺点")]),_:1})]),a("li",null,[i(e,{to:"#什么是orm"},{default:l(()=>[t("什么是ORM")]),_:1})])])])])]),_])}const m=s(c,[["render",p],["__file","MyBatis.html.vue"]]);export{m as default};
