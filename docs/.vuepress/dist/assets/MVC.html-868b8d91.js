import{_ as t,M as r,p as l,q as i,R as e,N as d,V as a,t as o,a1 as n}from"./framework-5866ffd3.js";const s="/FullStackNotes/assets/1675482681619-39f2e698-7443-411a-ad62-b6deb29922c9-830b1917.png",p="/FullStackNotes/assets/1675482745064-04a996d8-265a-42c4-a4f1-c5cc3513c29a-782e4564.png",h={},_=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),o(" 目录")],-1),u={class:"table-of-contents"},v=n('<h1 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h1><p><img src="'+s+'" alt="image.png"><code>M-Model</code> 模型（完成业务逻辑：有javaBean构成，service+dao+entity） <code>V-View</code> 视图（做界面的展示 jsp，html……） <code>C-Controller</code> 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面)</p><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><p><img src="'+p+'" alt="image.png"> 1、 用户发送请求至前端控制器<code>DispatcherServlet</code>。</p><p>2、 <code>DispatcherServlet</code>收到请求调用<code>HandlerMapping</code>处理器映射器。</p><p>3、 处理器映射器找到具体的处理器(可以根据<code>xml</code>配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有 则生成)一并返回给<code>DispatcherServlet</code>。</p><p>4、 <code>DispatcherServlet</code>调用<code>HandlerAdapter</code>处理器适配器。</p><p>5、 <code>HandlerAdapter</code>经过适配调用具体的处理器(<code>Controller</code>，也叫后端控制器)。</p><p>6、 <code>Controller</code>执行完成返回<code>ModelAndView</code>。</p><p>7、 <code>HandlerAdapter</code>将<code>controller</code>执行结果<code>ModelAndView</code>返回给<code>DispatcherServlet</code>。</p><p>8、 <code>DispatcherServlet</code>将<code>ModelAndView</code>传给<code>ViewReslover</code>视图解析器。</p><p>9、 <code>ViewReslover</code>解析后返回具体<code>View</code>。</p><p>10、<code>DispatcherServlet</code>根据<code>View</code>进行渲染视图（即将模型数据填充至视图中)。</p><p>11、 <code>DispatcherServlet</code>响应用户。</p><h2 id="spring-mvc-组件" tabindex="-1"><a class="header-anchor" href="#spring-mvc-组件" aria-hidden="true">#</a> spring mvc 组件</h2><p><code>Spring MVC</code>的核心组件：</p><ol><li><code>DispatcherServlet</code>：中央控制器，把请求给转发到具体的控制类</li><li><code>Controller</code>：具体处理请求的控制器</li><li><code>HandlerMapping</code>：映射处理器，负责映射中央处理器转发给controller时的映射策略</li><li><code>ModelAndView</code>：服务层返回的数据和视图层的封装类</li><li><code>ViewResolver</code>：视图解析器，解析具体的视图</li><li><code>Interceptors</code> ：拦截器，负责拦截我们定义的请求然后做处理工作</li></ol><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> <strong>常用注解</strong></h2><ul><li>@RequestMapping ：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的 方法都是以该地址作为父路径。</li><li>@RequestBody ：注解实现接收http请求的json数据，将json转换为java对象。</li><li>@ResponseBody ：注解实现将conreoller方法返回对象转化为json对象响应给客户。</li></ul>',19);function m(g,V){const c=r("router-link");return l(),i("div",null,[_,e("nav",u,[e("ul",null,[e("li",null,[d(c,{to:"#工作原理"},{default:a(()=>[o("工作原理")]),_:1})]),e("li",null,[d(c,{to:"#spring-mvc-组件"},{default:a(()=>[o("spring mvc 组件")]),_:1})]),e("li",null,[d(c,{to:"#常用注解"},{default:a(()=>[o("常用注解")]),_:1})])])]),v])}const M=t(h,[["render",m],["__file","MVC.html.vue"]]);export{M as default};
