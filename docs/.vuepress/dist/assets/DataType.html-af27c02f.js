import{_ as s,M as h,p as o,q as n,R as t,N as e,V as a,t as d,a1 as l}from"./framework-5866ffd3.js";const i={},c=t("h1",{id:"目录",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),d(" 目录")],-1),b={class:"table-of-contents"},y=l('<h1 id="mysql的数据类型" tabindex="-1"><a class="header-anchor" href="#mysql的数据类型" aria-hidden="true">#</a> MySQL的数据类型</h1><p>主要分为三类：数值类型、字符串类型、日期时间类型</p><h2 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>有符号范围SIGNED</strong></th><th><strong>无符号范围UNSIGNED</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整 数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整 数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整 数值</td></tr><tr><td>INT/INTEGER</td><td>4bytes</td><td>(-2147483648， 2147483647)</td><td>(0，4294967295)</td><td>大整 数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大 整数 值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38， 3.402823466351 E+38)</td><td>0 和</td><td></td></tr><tr><td>(1.175494351 E-38，3.402823466 E+38)</td><td>单精 度浮 点数 值</td><td></td><td></td><td></td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308， 1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308， 1.7976931348623157 E+308)</td><td>双精 度浮 点数 值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度) 的值</td><td>依赖于M(精度)和D(标度)的 值</td><td>小数 值(精 确定 点数)</td></tr></tbody></table><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h2><ul><li>char 相对 varchar char的性能会更高些</li><li>varchar 后面的数字表示长度</li><li>int 后面的数字表示位数，不够则补0，需要配合 zerofill 使用</li></ul><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><h2 id="日期时间类型" tabindex="-1"><a class="header-anchor" href="#日期时间类型" aria-hidden="true">#</a> 日期时间类型</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>范围</strong></th><th><strong>格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续 时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时 间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时 间值，时间戳</td></tr></tbody></table>',9);function E(M,T){const r=h("router-link");return o(),n("div",null,[c,t("nav",b,[t("ul",null,[t("li",null,[e(r,{to:"#数值类型"},{default:a(()=>[d("数值类型")]),_:1})]),t("li",null,[e(r,{to:"#字符串类型"},{default:a(()=>[d("字符串类型")]),_:1})]),t("li",null,[e(r,{to:"#日期时间类型"},{default:a(()=>[d("日期时间类型")]),_:1})])])]),y])}const _=s(i,[["render",E],["__file","DataType.html.vue"]]);export{_ as default};
