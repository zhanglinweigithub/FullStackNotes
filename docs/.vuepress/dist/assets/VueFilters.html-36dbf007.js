import{_ as i,M as t,p as o,q as c,R as n,N as a,V as p,t as s,a1 as r}from"./framework-5866ffd3.js";const u={},d=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),v={class:"table-of-contents"},k=n("h1",{id:"vue过滤器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue过滤器","aria-hidden":"true"},"#"),s(" Vue过滤器")],-1),m=n("p",null,"过滤器仅在 vue 2.x 和 1.x 中受支持，在 vue 3.x 的版本中剔除了过滤器相关的功能。",-1),g=n("p",null,"在企业级项目开发中：",-1),b=n("ul",null,[n("li",null,"如果使用的是 2.x 版本的 vue，则依然可以使用过滤器相关的功能"),n("li",null,"如果项目已经升级到了 3.x 版本的 vue，官方建议使用计算属性或方法代替被剔除的过滤器功能")],-1),h={href:"https://v3.vuejs.org/guide/migration/filters.html#migration-strategy",target:"_blank",rel:"noopener noreferrer"},f=r(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>过滤器（Filters）是 <code>vue</code> 为开发者提供的功能，常用于文本的格式化。</p><p>过滤器可以用在两个地方：</p><ul><li>插值表达式</li><li>v-bind 属性绑定</li></ul><p>过滤器应该被添加在 <code>JavaScript</code> 表达式的尾部，由“管道符”进行调用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 通过 “管道符” 调用 capitalize 过滤器，对 message 的值进行格式化 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ message | capitalize }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 通过 “管道符” 调用 formatId 过滤器，对 rawId 的值进行格式化 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawId | formatId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 串联调用过滤器 --&gt;</span>
<span class="token comment">&lt;!-- 把 message 交给 filterA 进行处理，将处理结果交给 filterB继续处理 --&gt;</span>
{{ message | filterA | filterB }}

<span class="token comment">&lt;!-- 过滤器传参 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ message | filterA(arg1,arg2) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 第一个参数永远是 “管道符” 前面待处理的值，从第二个参数开始，才是调用过滤器是传递过来的 arg1 和 arg2 参数 --&gt;</span>
Vue.filter(&#39;filterA&#39;,(msg,arg1,arg2) =&gt; {
	//过滤器代码逻辑
})
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义过滤器" tabindex="-1"><a class="header-anchor" href="#定义过滤器" aria-hidden="true">#</a> 定义过滤器</h2><p>在创建 <code>vue</code> 实例期间，可以在 <code>filters</code> 节点中定义过滤器，示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//私有过滤器</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello vue.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&#39;title info&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//str字符串转换成大写的过滤器</span>
      <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 filters 节点下定义的过滤器，称为“私有过滤器”，因为它只能在当前 vm 实例所控制的 el 区域内使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//全局过滤器</span>
<span class="token comment">//第一个参数：全局过滤器的名字</span>
<span class="token comment">//第二个参数：全局过滤器要处理的参数</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;capitalize&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function _(x,y){const e=t("router-link"),l=t("ExternalLinkIcon");return o(),c("div",null,[d,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#使用"},{default:p(()=>[s("使用")]),_:1})]),n("li",null,[a(e,{to:"#定义过滤器"},{default:p(()=>[s("定义过滤器")]),_:1})])])]),k,m,g,b,n("p",null,[s("具体的迁移指南，请参考 vue 3.x 的官方文档给出的说明： "),n("a",h,[s("https://v3.vuejs.org/guide/migration/filters.html#migration-strategy"),a(l)])]),f])}const j=i(u,[["render",_],["__file","VueFilters.html.vue"]]);export{j as default};
