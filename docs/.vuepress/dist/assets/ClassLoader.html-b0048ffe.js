import{_ as l,M as s,p as i,q as t,R as e,N as d,V as c,t as a,a1 as r}from"./framework-5866ffd3.js";const n="/FullStackNotes/assets/image-20230408163554243-23a0466e.png",p="/FullStackNotes/assets/image-20230408172427553-1042e9a2.png",h="/FullStackNotes/assets/image-20230408172529037-9f42e1bc.png",u={},_=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),b={class:"table-of-contents"},f=r('<h2 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制" aria-hidden="true">#</a> 类加载机制</h2><p>编写的 <code>Java</code> 代码需要经过编译器编译为 <code>class</code> 文件</p><p>代码编译为 <code>class</code> 文件后，需要通过类加载器把 <code>class</code> 文件加载到虚拟机中才能运行和使用</p><h2 id="类加载步骤" tabindex="-1"><a class="header-anchor" href="#类加载步骤" aria-hidden="true">#</a> 类加载步骤</h2><p>类从被加载到内存到使用完成被卸载出内存，需要经历</p><p><strong>加载、验证、准备、解析、初始化、使用、卸载</strong></p><blockquote><p>验证、准备、解析统称为连接</p></blockquote><p><img src="'+n+'" alt="image-20230408163554243"></p><h3 id="_1-加载" tabindex="-1"><a class="header-anchor" href="#_1-加载" aria-hidden="true">#</a> （1）加载</h3><p>在加载阶段，虚拟机主要完成三件事情</p><p>① 通过一个类的全限定名（比如 com.danny.framework.t）来获取定义该类的二进制流；</p><p>② 将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构；</p><p>③ 在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为程序访问方法区中这个类的外部接口。</p><blockquote><p><strong>JVM在什么情况下会加载一个类？</strong> 也就是说，啥时候会从“<code>.class</code>”字节码文件中加载这个类到<code>JVM</code>内存里来</p><p>在你的代码中用到这个类的时候</p><ol><li>首先你的代码中包含“<code>main()</code>”方法的主类一定会在<code>JVM</code>进程启动之后被加载到内存，开始执行你的“<code>main()</code>”方法中的代码</li><li>接着遇到你使用了别的类，比如“<code>ReplicaManager</code>”，此时就会从对应的“<code>.class</code>”字节码文件加载对应的类到内存里来。</li></ol></blockquote><h3 id="_2-验证" tabindex="-1"><a class="header-anchor" href="#_2-验证" aria-hidden="true">#</a> （2）验证</h3><p>验证的目的是为了确保 <code>class</code> 文件的字节流包含的内容符合虚拟机的要求，且不会危害虚拟机的安全</p><h3 id="_3-准备" tabindex="-1"><a class="header-anchor" href="#_3-准备" aria-hidden="true">#</a> （3）准备</h3><p>正式为【类变量】分配内存并设置类变量【初始值】，这些变量所使用的内存都分配在方法区</p><blockquote><p>注意：</p><ul><li>分配内存的对 象是“类变量”而不是实例变量</li><li>是分配初始值，而不是赋值</li><li>但是加上<code>final</code>关键字，比如<code>public static final int value=123;</code>在准备阶段会初始化<code>value</code>的值为<code>123</code>；</li></ul></blockquote><p>一般数值类型的初始值都为<code>0</code></p><p><code>char</code>类型的初始值 为&#39;<code>\\u0000</code>&#39;（常量池中一个表示<code>Nul</code>的字符串）</p><p><code>boolean</code>类型初始值为<code>false</code></p><p>引用类型初始值为<code>null</code>。</p><h3 id="_4-解析" tabindex="-1"><a class="header-anchor" href="#_4-解析" aria-hidden="true">#</a> （4）解析</h3><p>解析是将常量池中【符号引用】替换为【直接引用】的过程。</p><h4 id="符号引用" tabindex="-1"><a class="header-anchor" href="#符号引用" aria-hidden="true">#</a> 符号引用</h4><p>符号引用是以一组符号来描述所引用的目标</p><p>符号引用与虚拟机实现的内存布局无关，引用的目标不一定已经加载到内存中。</p><p>比如在 <code>com.danny.framework.LoggerFactory</code> 类引用了 <code>com.danny.framework.Logger</code> ，但在编译期 间是不知道 <code>Logger</code> 类的内存地址的，所以只能先用 <code>com.danny.framework.Logger</code> （假设是这个，实际上是由类似于 <code>CONSTANT_Class_info</code> 的常量来表示的）来表示 <code>Logger</code> 类的地址，这就是符号引用。</p><h4 id="直接引用" tabindex="-1"><a class="header-anchor" href="#直接引用" aria-hidden="true">#</a> 直接引用</h4><p>直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</p><p>直接引用和虚拟机实现的内存布局有关，如果有了直接引用，那引用的目标一定在内存中存在。</p><blockquote><p>解析的时候 <code>class</code> 已经被加载到方法区的内存中，因此要把符号引用转化为直接引用，也就是能直接找到该类实际内存地址的引用。</p></blockquote><h3 id="_5-初始化" tabindex="-1"><a class="header-anchor" href="#_5-初始化" aria-hidden="true">#</a> （5）初始化</h3><p>执行类的初始化代码</p><p>比如：赋值、 static静态代码块</p><blockquote><p>如果初始化一个类的时候，发现他的父类还没初始化，那么必须先初始化他的父类</p></blockquote><ol><li>初始化顺序</li><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ol><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h2><h3 id="类加载器的作用" tabindex="-1"><a class="header-anchor" href="#类加载器的作用" aria-hidden="true">#</a> 类加载器的作用</h3><ul><li>加载 <code>class</code></li><li>确定类的唯一性</li></ul><h4 id="加载-class" tabindex="-1"><a class="header-anchor" href="#加载-class" aria-hidden="true">#</a> 加载 class</h4><p>类加载的加载阶段的第一个步骤，就是通过类加载器来完成的</p><p>类加载器的主要任务就是 “ 通过 一个类的全限定名来获取描述此类的二进制字节流 ”</p><blockquote><p>在这里，类加载器加载的二进制流并不一定要从 <code>class</code> 文件中获取，还可以从其他格式如<code>zip</code>文件中读取、从网络或数据库中读取、运行时动态生成、由其他文件生 成（比如 <code>jsp</code> 生成 <code>class</code> 类文件）等。</p></blockquote><p>从程序员的角度来看，类加载器动态加载<code>class</code>文件到虚拟机中，并生成一个 <code>java.lang.Class</code> 实例，每个实例 都代表一个 <code>java</code> 类，可以根据该实例得到该类的信息，还可以通过<code>newInstance()</code>方法生成该类的一个对象。</p><h4 id="确定类的唯一性" tabindex="-1"><a class="header-anchor" href="#确定类的唯一性" aria-hidden="true">#</a> 确定类的唯一性</h4><p>对于每一个类，都需要由加载它的加载器和这个类本身共同确立这个类在 Java 虚拟机中的唯一性</p><p>两个相同的类，只有是在同 一个加载器加载的情况下才 “ 相等 ”</p><blockquote><p>这里的 “ 相等 ” 是指代表类的 <code>Class</code> 对象的 <code>equals()</code> 方法、 <code>isAssignableFrom()</code> 方法、 <code>isInstance()</code> 方法的返回结果，也包括 <code>instanceof</code> 关键字对对象所属关系的 判定结果</p></blockquote><h3 id="类加载器的分类" tabindex="-1"><a class="header-anchor" href="#类加载器的分类" aria-hidden="true">#</a> 类加载器的分类</h3><ul><li>启动类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器 （Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li><li>自定义类加载器（User ClassLoader）</li></ul><blockquote><p>其中启动类加载器属于 <code>JVM</code> 的一部分</p><p>其他类加载器都用 <code>java</code> 实现，并且最终都继承自 <code>java.lang.ClassLoader</code></p></blockquote><h4 id="启动类加载器" tabindex="-1"><a class="header-anchor" href="#启动类加载器" aria-hidden="true">#</a> 启动类加载器</h4><p>启动类加载器主要负责加载 <code>JAVA_HOME\\lib</code> 目录或者被 <code>-Xbootclasspath</code> 参数指定目录中的部分类</p><p>具体加载哪些类可以通过 <code>System.getProperty(&quot;sun.boot.class.path&quot;)</code> 来查看。</p><h4 id="扩展类加载器" tabindex="-1"><a class="header-anchor" href="#扩展类加载器" aria-hidden="true">#</a> 扩展类加载器</h4><p>负责加载 <code>JAVA_HOME\\lib\\ext</code> 目录或者被 <code>java.ext.dirs</code> 系统变量指定的路径中的所有类库</p><p>可以通过 <code>System.getProperty(&quot;java.ext.dirs&quot;)</code> 来查看具体都加载哪些类</p><h4 id="应用程序类加载器" tabindex="-1"><a class="header-anchor" href="#应用程序类加载器" aria-hidden="true">#</a> 应用程序类加载器</h4><p>负责加载用户类路径（我们通常指定的 <code>classpath</code>）上的类</p><p>如果程序中没有自定义类加载器，应用程序类加载器就是程序<strong>默认</strong>的类加载器。</p><h4 id="自定义类加载器" tabindex="-1"><a class="header-anchor" href="#自定义类加载器" aria-hidden="true">#</a> 自定义类加载器</h4><p><code>JVM</code> 提供的类加载器只能加载指定目录的类（<code>jar</code> 和 <code>class</code>），如果我们想从其他地方甚至网络上获取 <code>class</code> 文件，就需要自定义类加载器来实现</p><p>自定义类加载器主要都是通过继承 <code>ClassLoader</code> 或者它的子类来实现，但无论是通过继承 <code>ClassLoader</code> 还是它的子类，最终自定义类加载器的父加载器都是<strong>应用程序类加载器</strong></p><p>因为不管调用哪个父类加载器，创建的对象都必须最终调用 <code>java.lang.ClassLoader.getSystemClassLoader()</code> 作为父加载器， <code>getSystemClassLoader()</code> 方法的返回值是 <code>sun.misc.Launcher.AppClassLoader</code> 即应用程序类加载器。</p><h2 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制" aria-hidden="true">#</a> 双亲委派机制</h2><blockquote><p>避免重复加载某一个类，保证类的唯一性</p></blockquote><p>就是当一个类加载器加载类的时候，如果有父加载器就先尝试让父加载器加载</p><p>如果父加载器还有父加载器就一直往上抛，一直把类加载的任务交给启动类加载器</p><p>然后启动类加载器如果加载不到类就会抛出 <code>ClassNotFoundException</code> 异常，之后把类加载的任务往下抛</p><p><img src="'+p+'" alt="image-20230408172427553"></p><blockquote><p>双亲委派模型要求除了顶层的启动类加载器之外，其他的类加载器都应该有一个父类加载器</p><p>但是这种父子关系并不是继承关系，而是像上面代码所示的组合关系</p></blockquote><p><img src="'+h+'" alt="image-20230408172529037"></p>',74);function g(m,k){const o=s("router-link");return i(),t("div",null,[_,e("nav",b,[e("ul",null,[e("li",null,[d(o,{to:"#类加载机制"},{default:c(()=>[a("类加载机制")]),_:1})]),e("li",null,[d(o,{to:"#类加载步骤"},{default:c(()=>[a("类加载步骤")]),_:1}),e("ul",null,[e("li",null,[d(o,{to:"#_1-加载"},{default:c(()=>[a("（1）加载")]),_:1})]),e("li",null,[d(o,{to:"#_2-验证"},{default:c(()=>[a("（2）验证")]),_:1})]),e("li",null,[d(o,{to:"#_3-准备"},{default:c(()=>[a("（3）准备")]),_:1})]),e("li",null,[d(o,{to:"#_4-解析"},{default:c(()=>[a("（4）解析")]),_:1})]),e("li",null,[d(o,{to:"#_5-初始化"},{default:c(()=>[a("（5）初始化")]),_:1})])])]),e("li",null,[d(o,{to:"#类加载器"},{default:c(()=>[a("类加载器")]),_:1}),e("ul",null,[e("li",null,[d(o,{to:"#类加载器的作用"},{default:c(()=>[a("类加载器的作用")]),_:1})]),e("li",null,[d(o,{to:"#类加载器的分类"},{default:c(()=>[a("类加载器的分类")]),_:1})])])]),e("li",null,[d(o,{to:"#双亲委派机制"},{default:c(()=>[a("双亲委派机制")]),_:1})])])]),f])}const q=l(u,[["render",g],["__file","ClassLoader.html.vue"]]);export{q as default};
