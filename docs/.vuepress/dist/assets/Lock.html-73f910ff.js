import{_ as t,M as o,p as c,q as d,R as e,N as n,V as l,t as a,a1 as i}from"./framework-5866ffd3.js";const p="/FullStackNotes/assets/image-20230409141550797-1d32b40a.png",r="/FullStackNotes/assets/image-20230409141643500-7a35fd9c.png",u="/FullStackNotes/assets/image-20230409143638647-8c1788b2.png",m="/FullStackNotes/assets/image-20230409143712328-d86fcf22.png",h="/FullStackNotes/assets/image-20230409143747670-45fb0b9b.png",k="/FullStackNotes/assets/image-20230409144230966-5c0919c4.png",g="/FullStackNotes/assets/image-20230409144307686-4bc512c8.png",v="/FullStackNotes/assets/image-20230409144334228-49f90c50.png",b={},_=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),f={class:"table-of-contents"},D=i(`<h2 id="mysql锁" tabindex="-1"><a class="header-anchor" href="#mysql锁" aria-hidden="true">#</a> MySQL锁</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制</p><p><code>MySQL</code>中的锁，按照锁的粒度分，分为以下三类</p><ul><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。 <ul><li>表锁 <ul><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ul></li><li>元数据锁（meta data lock，MDL）</li><li>意向锁 <ul><li>意向共享锁(IS)</li><li>意向排他锁(IX)</li></ul></li></ul></li><li>行级锁：每次操作锁住对应的行数据。 <ul><li>行锁 <ul><li>共享锁（S）</li><li>排他锁（X）</li></ul></li><li>间隙锁</li><li>临键锁</li></ul></li></ul><h2 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h2><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的<code>DML</code>的写语句，<code>DDL</code>语句，已经更新操作的事务提交语句都将被阻塞</p><p>典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整 性</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 加全局锁</span>
flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span> <span class="token punctuation">;</span>

<span class="token comment">-- 数据备份 （注意，这个不是sql命令）</span>
mysqldump <span class="token operator">-</span>uroot –p1234 zhang <span class="token operator">&gt;</span> zhang<span class="token punctuation">.</span><span class="token keyword">sql</span>

<span class="token comment">-- 释放锁</span>
<span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在<code>InnoDB</code>引擎中，我们可以在备份时加上参数 <code>--single-transaction</code> 参数来完成不加锁的一致性数据备份。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token comment">--single-transaction -uroot –p123456 zhang &gt; zhang.sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h2 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁" aria-hidden="true">#</a> 表级锁</h2><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>应用在<code>MyISAM</code>、 <code>InnoDB</code>、<code>BDB</code>等存储引擎中</p><p>主要分为三类</p><ul><li>表锁 <ul><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ul></li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ul><h3 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁" aria-hidden="true">#</a> 表锁</h3><p>对于表锁，分为两类</p><ul><li><p>表共享读锁（read lock）</p></li><li><p>表独占写锁（write lock）</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 加锁</span>
<span class="token keyword">lock</span> <span class="token keyword">tables</span> 表名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span>
<span class="token keyword">lock</span> <span class="token keyword">tables</span> 表名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">write</span>

<span class="token comment">-- 释放锁</span>
<span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token operator">/</span> 客户端断开连接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读锁" tabindex="-1"><a class="header-anchor" href="#读锁" aria-hidden="true">#</a> 读锁</h4><p>左侧为客户端一，对指定表加了读锁，不会影响右侧客户端二的读，但是会阻塞右侧客户端的写。</p><p><img src="`+p+'" alt="image-20230409141550797"></p><h4 id="写锁" tabindex="-1"><a class="header-anchor" href="#写锁" aria-hidden="true">#</a> 写锁</h4><p>左侧为客户端一，对指定表加了写锁，会阻塞右侧客户端的读和写。</p><p><img src="'+r+'" alt="image-20230409141643500"></p><div class="custom-container tip"><p class="custom-container-title">结论</p><p>读锁不会阻塞其他客户端的读，但是会阻塞写。</p><p>写锁既会阻塞其他客户端的读，又会阻塞 其他客户端的写。</p></div><h3 id="元数据锁" tabindex="-1"><a class="header-anchor" href="#元数据锁" aria-hidden="true">#</a> 元数据锁</h3><p><code>meta data lock</code> , 元数据锁，简写<code>MDL</code></p><p><code>MDL</code>加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。</p><p><code>MDL</code>锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>也就是说，某一张表涉及到未提交的事务 时，是不能够修改这张表的表结构</p></div><p>当对一张表进行增删改查的时候，加<code>MDL</code>读锁(共享)</p><p>当对表结构进行变更操作的时候，加<code>MDL</code>写锁(排他)</p><h3 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁" aria-hidden="true">#</a> 意向锁</h3><p>为了避免<code>DML</code>在执行时，加的行锁与表锁的冲突，在<code>InnoDB</code>中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查</p><ul><li><p>意向共享锁(IS): 由语句<code>select ... lock in share mode</code>添加 。</p><ul><li>与表锁共享锁 (read)兼容，与表锁排他锁(write)互斥。</li></ul></li><li><p>意向排他锁(IX): 由<code>insert</code>、<code>update</code>、<code>delete</code>、<code>select...for update</code>添加 。</p><ul><li>与表锁共 享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。</li></ul></li></ul><p><strong>假如没有意向锁</strong>，客户端一对表加了行锁后，客户端二如何给表加表锁呢</p><p>首先客户端一，开启一个事务，然后执行<code>DML</code>操作，在执行<code>DML</code>语句时，会对涉及到的行加行锁</p><p><img src="'+u+'" alt="image-20230409143638647"></p><p>当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低</p><p><img src="'+m+'" alt="image-20230409143712328"></p><p><strong>有了意向锁之后</strong></p><p>客户端一，在执行<code>DML</code>操作时，会对涉及的行加行锁，同时也会对该表加上意向锁</p><p><img src="'+h+'" alt="image-20230409143747670"></p><p>而其他客户端，在对这张表加表锁的时候，会根据该表上所加的意向锁来判定是否可以成功加表锁，而不用逐行判断行锁情况了</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放</p></div><h2 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁" aria-hidden="true">#</a> 行级锁</h2><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。</p><p>应用在 <code>InnoDB</code>存储引擎中。</p><p><code>InnoDB</code>的数据是基于索引组织的，行锁是通过对索引上的<strong>索引项加锁</strong>来实现的，而不是对记录加的锁</p><ul><li><p>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在 <code>RC</code>、<code>RR</code>隔离级别下都支持。</p><p><img src="'+k+'" alt="image-20230409144230966"></p></li><li><p>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行<code>insert</code>，产生幻读。在<code>RR</code>隔离级别下都支持。</p><p><img src="'+g+'" alt="image-20230409144307686"></p></li><li><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙。 在<code>RR</code>隔离级别下支持</p></li></ul><p><img src="'+v+'" alt="image-20230409144334228"></p><h3 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁" aria-hidden="true">#</a> 行锁</h3><p><code>InnoDB</code>实现了两种类型的行锁</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他 锁。</li></ul><p>常见<code>SQL</code>加锁情况</p><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT</td><td>不加任何 锁</td><td></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>默认情况下，<code>InnoDB</code>在 <code>REPEATABLE READ</code>事务隔离级别运行，<code>InnoDB</code>使用 <code>next-key</code> 锁进行搜 索和索引扫描，以防止幻读</p><p>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁</p></div><div class="custom-container danger"><p class="custom-container-title">注意</p><p><code>InnoDB</code>的行锁是针对于索引加的锁，不通过索引条件检索数据，那么<code>InnoDB</code>将对表中的所有记录加锁，此时就会升级为表锁</p></div><h3 id="间隙锁-临键锁" tabindex="-1"><a class="header-anchor" href="#间隙锁-临键锁" aria-hidden="true">#</a> 间隙锁&amp;临键锁</h3><p>默认情况下，<code>InnoDB</code>在 <code>REPEATABLE READ</code>事务隔离级别运行，<code>InnoDB</code>使用 <code>next-key</code> 锁进行搜索和索引扫描，以防止幻读</p><ul><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。</li><li>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，<code>next-key lock</code> 退化为间隙锁。</li><li>索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止</li></ul><div class="custom-container danger"><p class="custom-container-title">注意</p><p>间隙锁唯一目的是防止其他事务插入间隙。</p><p>间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</p></div>',62);function y(L,x){const s=o("router-link");return c(),d("div",null,[_,e("nav",f,[e("ul",null,[e("li",null,[n(s,{to:"#mysql锁"},{default:l(()=>[a("MySQL锁")]),_:1})]),e("li",null,[n(s,{to:"#全局锁"},{default:l(()=>[a("全局锁")]),_:1})]),e("li",null,[n(s,{to:"#表级锁"},{default:l(()=>[a("表级锁")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#表锁"},{default:l(()=>[a("表锁")]),_:1})]),e("li",null,[n(s,{to:"#元数据锁"},{default:l(()=>[a("元数据锁")]),_:1})]),e("li",null,[n(s,{to:"#意向锁"},{default:l(()=>[a("意向锁")]),_:1})])])]),e("li",null,[n(s,{to:"#行级锁"},{default:l(()=>[a("行级锁")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#行锁"},{default:l(()=>[a("行锁")]),_:1})]),e("li",null,[n(s,{to:"#间隙锁-临键锁"},{default:l(()=>[a("间隙锁&临键锁")]),_:1})])])])])]),D])}const I=t(b,[["render",y],["__file","Lock.html.vue"]]);export{I as default};
