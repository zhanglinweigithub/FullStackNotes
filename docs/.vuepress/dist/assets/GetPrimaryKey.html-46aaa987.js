import{_ as o,M as l,p as c,q as p,R as a,N as e,V as t,t as n,a1 as u}from"./framework-5866ffd3.js";const i={},r=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),d={class:"table-of-contents"},k=u(`<h2 id="mybatis获取主键的几种方式" tabindex="-1"><a class="header-anchor" href="#mybatis获取主键的几种方式" aria-hidden="true">#</a> MyBatis获取主键的几种方式</h2><h3 id="方式一-配置usegeneratedkeys-true-keyproperty-id" tabindex="-1"><a class="header-anchor" href="#方式一-配置usegeneratedkeys-true-keyproperty-id" aria-hidden="true">#</a> 方式一：配置useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</h3><p>我们需要在<code>Mapper.xml</code>中进行配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertUser1<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

INSERT INTO t_user (name,age,salary,sex) VALUES (#{name},#{age},#{salary},#{sex})

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>useGeneratedKeys</code>：设置为<code>true</code></li><li><code>keyProperty</code>：参数对象中的属性名称，最后插入成功之后，<code>mybatis</code>会通过反射将自增值设置给 <code>keyProperty</code>指定的这个属性</li></ul><h3 id="方式二-插入后查询获取主键" tabindex="-1"><a class="header-anchor" href="#方式二-插入后查询获取主键" aria-hidden="true">#</a> 方式二：插入后查询获取主键</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertUser2<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.javacode2018.chat04.demo1.model.UserModel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AFTER<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>long<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
SELECT LAST_INSERT_ID()
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>

INSERT INTO t_user (name,age,salary,sex) VALUES (#{name},#{age},#{salary},#{sex})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>selectKey</code> 元素有3个属性需要指定</p><ul><li><code>keyProperty</code>：参数对象中的属性名称，最后插入成功之后，<code>mybatis</code>会通过反射将自增值设置给 <code>keyProperty</code>指定的这个属性</li><li><code>order</code>：指定<code>selectKey</code>元素中的<code>sql</code>是在插入之前运行还是插入之后运行，可选值 （<code>BEFORE</code>|<code>AFTER</code>）</li><li><code>resultType</code>：<code>keyProperty</code>指定的属性对应的类型，如上面的<code>id</code>对应的类型是 java.lang.Long ， 我们直接写的是别名 long</li></ul>`,9);function m(y,v){const s=l("router-link");return c(),p("div",null,[r,a("nav",d,[a("ul",null,[a("li",null,[e(s,{to:"#mybatis获取主键的几种方式"},{default:t(()=>[n("MyBatis获取主键的几种方式")]),_:1}),a("ul",null,[a("li",null,[e(s,{to:"#方式一-配置usegeneratedkeys-true-keyproperty-id"},{default:t(()=>[n('方式一：配置useGeneratedKeys="true" keyProperty="id"')]),_:1})]),a("li",null,[e(s,{to:"#方式二-插入后查询获取主键"},{default:t(()=>[n("方式二：插入后查询获取主键")]),_:1})])])])])]),k])}const h=o(i,[["render",m],["__file","GetPrimaryKey.html.vue"]]);export{h as default};
