import{_ as r,M as l,p as n,q as d,R as e,N as o,V as c,t as a,a1 as s}from"./framework-5866ffd3.js";const i="/FullStackNotes/assets/image-20210714210131152-31aec275.png",p={},u=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),_={class:"table-of-contents"},g=s('<h2 id="gateway服务网关" tabindex="-1"><a class="header-anchor" href="#gateway服务网关" aria-hidden="true">#</a> Gateway服务网关</h2><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><h2 id="为什么需要网关" tabindex="-1"><a class="header-anchor" href="#为什么需要网关" aria-hidden="true">#</a> 为什么需要网关</h2><p><code>Gateway</code>网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="'+i+'" alt="image-20210714210131152"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过<code>gateway</code>，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在<code>SpringCloud</code>中网关的实现包括两种：</p><ul><li><code>gateway</code></li><li><code>zuul</code></li></ul><p><code>Zuul</code>是基于<code>Servlet</code>的实现，属于阻塞式编程。而<code>SpringCloudGateway</code>则是基于<code>Spring5</code>中提供的<code>WebFlux</code>，属于响应式编程的实现，具备更好的性能。</p>',14);function h(f,w){const t=l("router-link");return n(),d("div",null,[u,e("nav",_,[e("ul",null,[e("li",null,[o(t,{to:"#gateway服务网关"},{default:c(()=>[a("Gateway服务网关")]),_:1})]),e("li",null,[o(t,{to:"#为什么需要网关"},{default:c(()=>[a("为什么需要网关")]),_:1})])])]),g])}const y=r(p,[["render",h],["__file","Gateway.html.vue"]]);export{y as default};
