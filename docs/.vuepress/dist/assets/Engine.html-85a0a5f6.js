import{_ as c,a as s,b as l}from"./image-20230405193553498-06375fd3.js";import{_ as p,M as t,p as i,q as r,R as e,N as d,V as a,t as o,a1 as u}from"./framework-5866ffd3.js";const M={},h=e("h1",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),o(" 目录")],-1),m={class:"table-of-contents"},k=u('<h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h2><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式 。</p><ul><li>存储引擎是基于表的</li><li>MySQL默认存储引擎为： InnoDB</li><li>常用存储引擎： InnoDB、MyISAM</li></ul><p><code>MySQL</code>是一款支持拔插式引擎的数据库，在开发过程中你可以根据业务特性，从支持的诸多引擎中选择一款适合的</p><p><img src="'+c+`" alt="image-20230405190820143"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 建表时指定存储引擎</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释 <span class="token punctuation">]</span> <span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释 <span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 表注释 <span class="token punctuation">]</span> <span class="token punctuation">;</span>

<span class="token comment">-- 查询当前数据库支持的存储引擎</span>
<span class="token keyword">show</span> engines<span class="token punctuation">;</span>

<span class="token comment">-- 批量修改一个库所有表的存储引擎命令</span>
mysql_convert_table_fromat <span class="token comment">--user=user_name --password=user_pwd --engine=MyISAM database_name;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="innodb-vs-myisam" tabindex="-1"><a class="header-anchor" href="#innodb-vs-myisam" aria-hidden="true">#</a> InnoDB VS MyISAM</h2><h3 id="磁盘文件对比" tabindex="-1"><a class="header-anchor" href="#磁盘文件对比" aria-hidden="true">#</a> 磁盘文件对比</h3><p><img src="`+s+'" alt="image-20230405191300087"></p><p>其中使用<code>MyISAM</code>引擎的表：<code>zz_myisam_index</code>，会在本地生成三个磁盘文件</p><ul><li><code>zz_myisam_index.frm</code>：该文件中存储表的结构信息。</li><li><code>zz_myisam_index.MYD</code>：该文件中存储表的行数据。</li><li><code>zz_myisam_index.MYI</code>：该文件中存储表的索引数据。</li></ul><blockquote><p><code>MyISAM</code>引擎的表数据和索引数据，会分别放在两个不同的文件中存储</p></blockquote><p>使用<code>InnoDB</code>引擎的表：<code>zz_innodb_index</code>，在磁盘中仅有两个文件</p><ul><li><code>zz_innodb_index.frm</code>：该文件中存储表的结构信息。</li><li><code>zz_innodb_index.ibd</code>：该文件中存储表的行数据和索引数据。</li></ul><blockquote><p><code>InnoDB </code>引擎的表数据和索引数据，会分放在一个文件中存储</p></blockquote><h3 id="索引支持对比" tabindex="-1"><a class="header-anchor" href="#索引支持对比" aria-hidden="true">#</a> 索引支持对比</h3><p><strong><code>InnoDB</code>支持聚簇索引、<code>MyISAM</code>不支持聚簇索引</strong></p><p>因为<code>MyISAM</code>引擎，会将表分为<code>.frm、.MYD、.MYI</code>三个文件放在磁盘存储，表数据和索引数据是分别放在<code>.MYD、.MYI</code>文件中，所以注定了<code>MyISAM</code>引擎只支持<strong>非聚簇索引</strong>。</p><p>而<code>InnoDB</code>引擎的表数据、索引数据都放在<code>.ibd</code>文件中存储，因此<code>InnoDB</code>是支持<strong>聚簇索引</strong>的。</p><blockquote><p>聚簇索引的要求是：索引键和行数据必须在物理空间上也是连续的，而<code>MyISAM</code>表数据和索引数据，分别位于两个磁盘文件中，这也就注定了它无法满足聚簇索引的要求。</p><p>不支持聚簇索引也有好处，也就是无论走任何索引，都只需要一遍查询即可获得数据，而<code>InnoDB</code>引擎的表中，如果不走聚簇（主键）索引查询数据，走其他索引的情况下，都需要经过两遍（回表）查询才能获得数据</p></blockquote><h3 id="事务机制对比" tabindex="-1"><a class="header-anchor" href="#事务机制对比" aria-hidden="true">#</a> 事务机制对比</h3><p><strong><code>InnoDB</code>支持事务、<code>MyISAM</code>不支持事务</strong></p><p>因为<code>InnoDB</code>引擎中有两个自己专享的日志，即<code>undo log</code>、`redo log``</p><p>``InnoDB<code>在</code>MySQL<code>启动后，会在内存中构建一个</code>undo_log_buffer<code>缓冲区，同时在磁盘中也有相应的</code>undo-log`日志文件</p><p>所以使用<code>InnoDB</code>存储引擎的表，可以借助<code>undo-log</code>日志实现事务机制，支持多条<code>SQL</code>组成一个事务，可以保证发生异常的情况下，组成这个事务的<code>SQL</code>到底回滚还是提交</p><p>而<code>MyISAM</code>并未设计类似的技术，在启动时不会在内存中构建<code>undo_log_buffer</code>缓冲区，磁盘中也没有相应的日志文件，因此<code>MyISAM</code>并不支持事务机制</p><blockquote><p>关于 <code>undo log</code>、<code>redo log</code> 和事务原理，在前面的事务篇说过</p></blockquote><h3 id="故障恢复的对比" tabindex="-1"><a class="header-anchor" href="#故障恢复的对比" aria-hidden="true">#</a> 故障恢复的对比</h3><p><strong><code>MyISAM</code>并没有<code>InnoDB</code>引擎可靠</strong></p><p><code>InnoDB</code>在启动时，同样会在内存中构建一个<code>redo_log_buffer</code>缓冲区，在磁盘中也会有相应的<code>redo-log</code>日志文件</p><p><code>InnoDB</code>引擎由于<code>redo-log</code>日志的存在，因此只要事务提交，无论是机器断电、程序宕机等各种灾难情况，都可以用<code>redo-log</code>日志来恢复数据</p><p>但<code>MyISAM</code>引擎同样没有<code>redo-log</code>日志，所以并不支持数据的故障恢复，所以丢了也就无法找回。</p><h3 id="锁粒度对比" tabindex="-1"><a class="header-anchor" href="#锁粒度对比" aria-hidden="true">#</a> 锁粒度对比</h3><p><strong><code>MyISAM</code>仅支持表锁，而<code>InnoDB</code>同时支持表锁、行锁</strong></p><p><code>MyISAM</code>由于不支持聚簇索引，所以无法实现行锁，光说没用，上例子</p><p><img src="'+l+`" alt="image-20230405193553498"></p><p>上述这张表中，假设使用的是<code>MyISAM</code>引擎，同时对<code>student_id</code>字段建立了主键索引，<code>name</code>字段建立了普通索引，<code>sex、height</code>字段建立了联合索引</p><blockquote><p>这张表中存在三个索引，那在本地的<code>.MYI</code>索引文件中，肯定存在三颗<code>B+</code>树，同时由于<code>MyISAM</code>不支持聚簇索引，所以这三个索引是平级的，每棵<code>B+</code>树的索引键，都直接指向<code>.MYD</code>数据文件中的行数据地址。</p></blockquote><p>假设<code>MyISAM</code>要实现行锁，当要对一行数据加锁时，可以锁定一棵树中某一个数据，但无法锁定其他树的行数据</p><p>因为<code>MySQL</code>是对索引加锁，当基于不同索引查询数据时，就可能会导致一行数据上加多个锁！</p><p>这样又会导致多条线程同时操作一个数据，所以又会因为多线程并发执行的原因，造成脏读、幻读、不可重复读这系列问题出现</p><p>但<code>InnoDB</code>引擎，因为支持聚簇索引，所以<code>InnoDB</code>表中的索引，是有主次之分的，所有的次级索引（二级索引），其索引值都存储聚簇索引的索引键，因此想要对一行数据加锁时，只需要锁定聚簇索引的数据即可。</p><blockquote><p>表中就算没有显式定义主键，内部依旧会用一个隐藏列来作为聚簇索引的索引字段</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 通过主键索引查询数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> zz_students <span class="token keyword">where</span> student_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token comment">-- 通过普通索引查询数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> zz_students <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&quot;竹子&quot;</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过主键索引查询的<code>SQL</code>语句，会直接定位到聚簇索引的数据，然后对<code>ID=1</code>的数据加锁。</p><p>而第二条通过普通索引查询数据的<code>SQL</code>语句，经过查询后会得到一个值：<code>ID=1</code>，然后会拿着这个<code>ID=1</code>的值再去回表，在聚簇索引中再次查询<code>ID=1</code>的数据，找到之后发现上面已经有线程加锁了，当前线程就会阻塞等待上一个线程释放锁。</p><h3 id="并发性能对比" tabindex="-1"><a class="header-anchor" href="#并发性能对比" aria-hidden="true">#</a> 并发性能对比</h3><p><code>MyISAM</code>不如<code>InnoDB</code>的并发性能</p><p>因为<code>MyISAM</code>仅支持表锁，且不支持聚簇索引，所以当出现多条线程同时读写数据时，只能锁住整张表</p><p>而<code>InnoDB</code>同时支持表锁、行锁，并支持聚簇索引，每个索引最终都会指向聚簇索引中的索引键，因此出现并发事务时，<code>InnoDB</code>只需要锁住聚簇索引的数据即可，而不需要锁住整张表，因此并发性能更高。</p><blockquote><p><code>InnoDB</code>为了提升读-写并存场景下的并发度，又基于<code>undo-log</code>版本链+事务快照，又推出了<code>MVCC</code>多版本并发控制技术，因此对于读-写共存的场景支持并发执行。</p></blockquote><h3 id="内存利用度对比" tabindex="-1"><a class="header-anchor" href="#内存利用度对比" aria-hidden="true">#</a> 内存利用度对比</h3><p><code>InnoDB</code>不像<code>Memory</code>引擎那样完全基于内存运行，但它将所有能够在内存完成的操作，全部都放在了内存中完成，无论是读写数据、维护索引结构也好，记录日志也罢，各类操作全部都在内存完成。</p><p><code>InnoDB</code>引擎，通过缓冲池结合异步<code>IO</code>技术，活生生将一款基于磁盘的引擎，演变成了半内存式的引擎。</p><p>反观<code>MyISAM</code>引擎，内部虽然也有缓冲池以及异步<code>IO</code>技术，但对内存的开发度远不足于<code>InnoDB</code>引擎，运行期间大量操作依旧会走磁盘完成。</p><blockquote><p>详细内容可以看 MySQL内存篇</p></blockquote><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><strong>这也是为什么 <code>InnoDB</code>引擎能取代<code>MyISAM</code>引擎的原因</strong></p><p>①存储方式：</p><ul><li><code>MyISAM</code>引擎会将表数据和索引数据分成两个文件存储</li><li><code>InnoDB</code>引擎将表数据和索引数据在一个文件中存储</li></ul><p>②索引支持：</p><ul><li><code>MyISAM</code>引擎的表数据和索引数据是分开的，因此不支持聚簇索引。</li><li><code>InnoDB</code>引擎的表数据和索引数据是在一起的，因此支持聚簇索引</li></ul><p>③事务支持：</p><ul><li><code>MyISAM</code>引擎没有<code>undo log</code>日志，所以不支持多条<code>SQL</code>组成事务并回滚。</li><li><code>InnoDB</code>引擎存在<code>undo log</code>日志，所以支持事务</li></ul><p>④故障恢复：</p><ul><li><code>MyISAM</code>引擎依靠<code>bin-log</code>日志实现，<code>bin-log</code>中未写入的数据会永久丢失。</li><li><code>InnoDB</code>引擎依靠<code>redo log</code>日志实现，数据会先写入<code>redo log</code>在写入缓冲区</li></ul><p>⑤锁粒度支持：</p><ul><li><code>MyISAM</code>不支持聚簇索引，因此无法实现行锁，所有并发操作只能加表锁。</li><li><code>InnoDB</code>引擎支持聚簇索引，所有并发操作只需加行锁</li></ul><p>⑥并发性能：</p><ul><li><code>MyISAM</code>引擎仅支持表锁，所以多条线程出现读-写并发场景时会阻塞。</li><li><code>InnoDB</code>支持表锁、行锁，不需要锁住整张表，因此并发性能更高。</li></ul><p>⑦内存利用度：</p><ul><li><code>MyISAM</code>引擎过于依赖<code>MySQL Server</code>，对缓冲池、异步<code>IO</code>技术开发度不够。</li><li><code>InnoDB</code>引擎将所有能够在内存完成的操作，全部都放在了内存中完成（读写数据、维护索引结构也好，记录日志）等</li></ul><h2 id="myisam引擎的优势" tabindex="-1"><a class="header-anchor" href="#myisam引擎的优势" aria-hidden="true">#</a> MyISAM引擎的优势</h2><p>前面几乎都在说<code>InnoDB</code>引擎的好，现在来看看<code>MyISAM</code>引擎有哪些优势</p><h3 id="统计总数的优化" tabindex="-1"><a class="header-anchor" href="#统计总数的优化" aria-hidden="true">#</a> 统计总数的优化</h3><p><code>MyISAM</code>引擎中会记录表的行数，也就是当执行<code>count()</code>时，如果表是<code>MyISAM</code>引擎，则可以直接获取之前统计的值并返回</p><p><code>InnoDB</code>会一行行的去统计表的行数</p><blockquote><p>但是如果后面跟了<code>where</code>条件，那<code>InnoDB、MyISAM</code>的工作模式是相同的，先根据<code>where</code>后的条件查询数据，再一行行统计总数</p></blockquote><h3 id="删除数据-表的优化" tabindex="-1"><a class="header-anchor" href="#删除数据-表的优化" aria-hidden="true">#</a> 删除数据/表的优化</h3><p>当使用<code>delete</code>命令清空表数据时</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>table_name<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>MyISAM</code>会直接重新创建表数据文件</p><p><code>InnoDB</code>则是一行行删除数据</p><blockquote><p><code>MyISAM</code>引擎的表，对于<code>delete</code>过的数据不会立即删除，而且先隐藏起来，后续定时删除或手动删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 手动强制清理命令</span>
<span class="token keyword">optimize</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>table_name<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>这样做的好处，就是当你误删一张表的大量数据时，只要你手速够快，手动将本地的<code>.MYD、.MYI</code>文件拷贝出去，就可以直接基于这两个数据文件恢复数据，而不需要通过日志或第三方工具修复数据。</p><h3 id="crud速度更快" tabindex="-1"><a class="header-anchor" href="#crud速度更快" aria-hidden="true">#</a> CRUD速度更快</h3><p><code>InnoDB</code>引擎当查询数据时，如果在基于非聚簇索引查找数据，就算查到了也需要经过一次回表才能得到数据，同时插入数据、修改数据时，都需要维护聚簇索引和非聚簇索引之间的关系</p><p>所以<code>InnoDB</code>的聚簇索引，会影响读写数据的性能</p><p><code>MyISAM</code>引擎中，所有已创建的索引都是非聚簇索引，每个索引之间都是独立的，在索引中存储的是直接指向行数据的地址，而并非聚簇索引的索引键，因此无论走任何索引，都仅需一次即可获得数据，无需做回表查询</p><p>同时写数据时，也不需要维护不同索引之间的关系，毕竟每个索引都是独立的</p><h2 id="myisam真的比innodb快吗" tabindex="-1"><a class="header-anchor" href="#myisam真的比innodb快吗" aria-hidden="true">#</a> MyISAM真的比InnoDB快吗</h2><p>如果是对比单个客户端连接的读写性能，那自然<code>MyISAM</code>远超于<code>InnoDB</code>引擎，毕竟<code>InnoDB</code>需要维护聚簇索引</p><p>随着连接数的增加<code>MyISAM</code>的读写性能就远不如<code>InnoDB</code>，这是由于<strong>锁机制导致的</strong></p><p><code>MyISAM</code>引擎仅支持表锁，也就意味着无论有多少个客户端连接到来，对于同一张表永远只能允许一条线程操作，除非多个连接都是在读数据，才不会相互排斥。</p><p><code>InnoDB</code>引擎，由于支持行锁，所以并发冲突很小，在高并发、多连接的场景中，性能会更加出色</p><h2 id="myisam引擎的适用场景" tabindex="-1"><a class="header-anchor" href="#myisam引擎的适用场景" aria-hidden="true">#</a> MyISAM引擎的适用场景</h2><p><code>MySQL</code>利用主从架构，实现读写分离时的场景，一般从库会承载<code>select</code>请求，而主库会承载<code>insert/update/delete</code>请求。</p><p>读写分离的场景中，从库的表结构可以改为<code>MyISAM</code>引擎，因为基于<code>MyISAM</code>的索引查询数据，不需要经过回表查询，速度更快！</p><blockquote><p>同时，由于做了读写分离，因此从库上只会有读请求，不会存在任何外部的写请求，所以支持并发读取。</p><p>而且从库的数据是由后台线程来从主库复制的，因此从库在写入数据时，只会有少数几条线程执行写入工作，因而造成的冲突不会太大，不会由于表锁引起大量阻塞。</p></blockquote>`,99);function I(y,b){const n=t("router-link");return i(),r("div",null,[h,e("nav",m,[e("ul",null,[e("li",null,[d(n,{to:"#存储引擎"},{default:a(()=>[o("存储引擎")]),_:1})]),e("li",null,[d(n,{to:"#innodb-vs-myisam"},{default:a(()=>[o("InnoDB VS MyISAM")]),_:1}),e("ul",null,[e("li",null,[d(n,{to:"#磁盘文件对比"},{default:a(()=>[o("磁盘文件对比")]),_:1})]),e("li",null,[d(n,{to:"#索引支持对比"},{default:a(()=>[o("索引支持对比")]),_:1})]),e("li",null,[d(n,{to:"#事务机制对比"},{default:a(()=>[o("事务机制对比")]),_:1})]),e("li",null,[d(n,{to:"#故障恢复的对比"},{default:a(()=>[o("故障恢复的对比")]),_:1})]),e("li",null,[d(n,{to:"#锁粒度对比"},{default:a(()=>[o("锁粒度对比")]),_:1})]),e("li",null,[d(n,{to:"#并发性能对比"},{default:a(()=>[o("并发性能对比")]),_:1})]),e("li",null,[d(n,{to:"#内存利用度对比"},{default:a(()=>[o("内存利用度对比")]),_:1})]),e("li",null,[d(n,{to:"#总结"},{default:a(()=>[o("总结")]),_:1})])])]),e("li",null,[d(n,{to:"#myisam引擎的优势"},{default:a(()=>[o("MyISAM引擎的优势")]),_:1}),e("ul",null,[e("li",null,[d(n,{to:"#统计总数的优化"},{default:a(()=>[o("统计总数的优化")]),_:1})]),e("li",null,[d(n,{to:"#删除数据-表的优化"},{default:a(()=>[o("删除数据/表的优化")]),_:1})]),e("li",null,[d(n,{to:"#crud速度更快"},{default:a(()=>[o("CRUD速度更快")]),_:1})])])]),e("li",null,[d(n,{to:"#myisam真的比innodb快吗"},{default:a(()=>[o("MyISAM真的比InnoDB快吗")]),_:1})]),e("li",null,[d(n,{to:"#myisam引擎的适用场景"},{default:a(()=>[o("MyISAM引擎的适用场景")]),_:1})])])]),k])}const g=p(M,[["render",I],["__file","Engine.html.vue"]]);export{g as default};
