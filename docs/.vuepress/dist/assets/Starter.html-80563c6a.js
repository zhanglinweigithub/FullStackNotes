import{_ as l,M as i,p as o,q as p,R as n,N as e,V as t,t as s,a1 as c}from"./framework-5866ffd3.js";const r="/FullStackNotes/assets/image-20230408151747478-2c2175de.png",u="/FullStackNotes/assets/image-20230408151856310-630f12ea.png",d="/FullStackNotes/assets/image-20230408151935092-4c6e8930.png",k="/FullStackNotes/assets/image-20230408151949803-18db38b6.png",v="/FullStackNotes/assets/image-20230408152018229-d0b55226.png",m="/FullStackNotes/assets/image-20230408152126181-d2ce5e27.png",h="/FullStackNotes/assets/image-20230408152755514-acddbcb1.png",b="/FullStackNotes/assets/image-20230408153215130-c924f380.png",g="/FullStackNotes/assets/image-20230408153221619-3113a695.png",f="/FullStackNotes/assets/image-20230408153456248-fc6827bd.png",_={},S=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),x={class:"table-of-contents"},y=c('<h2 id="自定义starter" tabindex="-1"><a class="header-anchor" href="#自定义starter" aria-hidden="true">#</a> 自定义Starter</h2><h3 id="创建一个空项目" tabindex="-1"><a class="header-anchor" href="#创建一个空项目" aria-hidden="true">#</a> 创建一个空项目</h3><p><img src="'+r+'" alt="image-20230408151747478"></p><h3 id="给该项目添加两个模块" tabindex="-1"><a class="header-anchor" href="#给该项目添加两个模块" aria-hidden="true">#</a> 给该项目添加两个模块</h3><p><img src="'+u+'" alt="image-20230408151856310"></p><p><img src="'+d+'" alt="image-20230408151935092"></p><p><img src="'+k+'" alt="image-20230408151949803"></p><p>创建好之后，Apply --&gt; OK</p><p><img src="'+v+'" alt="image-20230408152018229"></p><h3 id="在启动器项目中引入自动配置项目依赖" tabindex="-1"><a class="header-anchor" href="#在启动器项目中引入自动配置项目依赖" aria-hidden="true">#</a> 在启动器项目中引入自动配置项目依赖</h3><p><img src="'+m+`" alt="image-20230408152126181"></p><h3 id="编写自动配置功能" tabindex="-1"><a class="header-anchor" href="#编写自动配置功能" aria-hidden="true">#</a> 编写自动配置功能</h3><p>在自动配置项目中，创建3个类</p><ul><li>HelloService：要自动配置的功能</li><li>HelloProperties：<code>HelloService</code>绑定配置前缀</li><li>HelloServiceAutoConfiguration：自动配置类</li></ul><p>代码如下：</p><p>HelloService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//默认不要放在容器中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">HelloProperties</span> helloProperties<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> sayHello <span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> helloProperties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;：&quot;</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">&quot;》&quot;</span> <span class="token operator">+</span> helloProperties<span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HelloProperties</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;zhang.hello&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 绑定前缀</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> prefix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> suffix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HelloServiceAutoConfiguration</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">HelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 容器中不存在才放入</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">HelloProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//开启配置绑定功能，还会默认放到容器中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloService</span> <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HelloService</span> helloService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> helloService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写-spring-factories-文件" tabindex="-1"><a class="header-anchor" href="#编写-spring-factories-文件" aria-hidden="true">#</a> 编写 spring.factories 文件</h3><p>在 <code>resources/META-INF</code> 下新建 <code>spring.factories</code> 文件</p><p>填写自动配置类的全路径</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># Auto Configure</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
com.zhang.hellostarter.auto.HelloServiceAutoConfiguration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将无用文件删除" tabindex="-1"><a class="header-anchor" href="#将无用文件删除" aria-hidden="true">#</a> 将无用文件删除</h3><p>如：test、启动类、配置文件等</p><p><img src="`+h+'" alt="image-20230408152755514"></p><h3 id="maven打包" tabindex="-1"><a class="header-anchor" href="#maven打包" aria-hidden="true">#</a> Maven打包</h3><p>将两个项目都打包</p><blockquote><p>注意：先打包自动配置包，在打包场景启动器</p></blockquote><p><img src="'+b+'" alt="image-20230408153215130"><img src="'+g+'" alt="image-20230408153221619"></p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><h3 id="在其它项目中引入场景启动器依赖" tabindex="-1"><a class="header-anchor" href="#在其它项目中引入场景启动器依赖" aria-hidden="true">#</a> 在其它项目中引入场景启动器依赖</h3><p><img src="'+f+`" alt="image-20230408153456248"></p><h3 id="编写controller测试" tabindex="-1"><a class="header-anchor" href="#编写controller测试" aria-hidden="true">#</a> 编写Controller测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">HelloService</span> helloService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> testStarter <span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;张林伟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写配置文件" tabindex="-1"><a class="header-anchor" href="#编写配置文件" aria-hidden="true">#</a> 编写配置文件</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">zhang</span><span class="token punctuation">:</span>
  <span class="token key atrule">hello</span><span class="token punctuation">:</span>
    <span class="token key atrule">prefix</span><span class="token punctuation">:</span> nihao
    <span class="token key atrule">suffix</span><span class="token punctuation">:</span> zhenshuai
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结果" tabindex="-1"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nihao：张林伟》zhenshuai
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,41);function w(H,N){const a=i("router-link");return o(),p("div",null,[S,n("nav",x,[n("ul",null,[n("li",null,[e(a,{to:"#自定义starter"},{default:t(()=>[s("自定义Starter")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#创建一个空项目"},{default:t(()=>[s("创建一个空项目")]),_:1})]),n("li",null,[e(a,{to:"#给该项目添加两个模块"},{default:t(()=>[s("给该项目添加两个模块")]),_:1})]),n("li",null,[e(a,{to:"#在启动器项目中引入自动配置项目依赖"},{default:t(()=>[s("在启动器项目中引入自动配置项目依赖")]),_:1})]),n("li",null,[e(a,{to:"#编写自动配置功能"},{default:t(()=>[s("编写自动配置功能")]),_:1})]),n("li",null,[e(a,{to:"#编写-spring-factories-文件"},{default:t(()=>[s("编写 spring.factories 文件")]),_:1})]),n("li",null,[e(a,{to:"#将无用文件删除"},{default:t(()=>[s("将无用文件删除")]),_:1})]),n("li",null,[e(a,{to:"#maven打包"},{default:t(()=>[s("Maven打包")]),_:1})])])]),n("li",null,[e(a,{to:"#测试"},{default:t(()=>[s("测试")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#在其它项目中引入场景启动器依赖"},{default:t(()=>[s("在其它项目中引入场景启动器依赖")]),_:1})]),n("li",null,[e(a,{to:"#编写controller测试"},{default:t(()=>[s("编写Controller测试")]),_:1})]),n("li",null,[e(a,{to:"#编写配置文件"},{default:t(()=>[s("编写配置文件")]),_:1})]),n("li",null,[e(a,{to:"#结果"},{default:t(()=>[s("结果")]),_:1})])])])])]),y])}const q=l(_,[["render",w],["__file","Starter.html.vue"]]);export{q as default};
