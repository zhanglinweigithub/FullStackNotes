import{_ as c,M as o,p,q as i,R as a,N as e,V as t,t as n,a1 as l}from"./framework-5866ffd3.js";const d="/FullStackNotes/assets/image-20230408182056493-69556e44.png",r={},u=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),h={class:"table-of-contents"},k=l('<h2 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础" aria-hidden="true">#</a> Java基础</h2><h3 id="java语言特点" tabindex="-1"><a class="header-anchor" href="#java语言特点" aria-hidden="true">#</a> Java语言特点</h3><p>1）简单易学。Java有丰富的类库，能够通过静态方法封装，降低<code>API</code>的学习成本，提高工作效率。</p><p>2）面向对象。这个也是<code>Java</code>最重要的特性， <code>java</code> 能够使得程序耦合度更低，内聚性更高。</p><p>3）可靠安全。<code>Java</code>生态系统包括用于分析和报告安全性问题的各种工具。</p><p>4）与平台无关。<code>Java</code>能够跨平台使用。</p><p>5）支持多线程。<code>Java</code>可以采用多线程+协程方式实现更多的并发操作</p><h3 id="面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#面向对象和面向过程的区别" aria-hidden="true">#</a> 面向对象和面向过程的区别</h3><h4 id="面向过程" tabindex="-1"><a class="header-anchor" href="#面向过程" aria-hidden="true">#</a> 面向过程</h4><p>字面意义上就是面向的是过程，先做什么、在做什么、最后做什么，然后用函数把 这些步骤一步一步地实现，在使用的时候一一调用则可。</p><h4 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h4><p>字面意义上就是面向的是对象，是把构成问题的事务分解成各个对象，但是建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。</p><h3 id="面向对象编程三大特性" tabindex="-1"><a class="header-anchor" href="#面向对象编程三大特性" aria-hidden="true">#</a> 面向对象编程三大特性</h3><h4 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h4><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。</p><blockquote><p>如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p></blockquote><h4 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h4><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承</p><h4 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h4><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确 定，是在程序运行期间才确定</p><p>即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><h3 id="八种基本数据类型的大小-以及他们的封装类" tabindex="-1"><a class="header-anchor" href="#八种基本数据类型的大小-以及他们的封装类" aria-hidden="true">#</a> 八种基本数据类型的大小，以及他们的封装类</h3><p><img src="'+d+`" alt="image-20230408182056493"></p><h3 id="jdk、jre、jvm" tabindex="-1"><a class="header-anchor" href="#jdk、jre、jvm" aria-hidden="true">#</a> JDK、JRE、JVM</h3><p><code>Java</code> 虚拟机（JVM）是运行 <code>Java</code> 字节码的虚拟机。<code>JVM</code> 有针对不同系统的特定实现（Windows，Linux， macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 <code>JVM</code> 实现是 Java 语言“一 次编译，随处可以运行”的关键所在。</p><p><code>JDK</code> 是 Java Development Kit，它是功能齐全的 <code>Java SDK</code>。它拥有 <code>JRE</code> 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p><code>JRE</code> 是 <code>Java</code> 运行时环境。它是运行已编译 <code>Java</code> 程序所需的所有内容的集合，包括 <code>Java</code> 虚拟机（JVM），<code>Java</code> 类库，<code>java</code> 命令和其他的些基础构件。但是，它不能用于创建新程序。</p><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><p><code>instanceof</code> 严格来说是<code>Java</code>中的一个双目运算符，用来测试一个对象是否为一个类的实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> result <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//编译不通过 i必须是引用类型，不能是基本类型</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//编译不通过</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token comment">//false ,在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回 false。</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java自动装箱与拆箱" tabindex="-1"><a class="header-anchor" href="#java自动装箱与拆箱" aria-hidden="true">#</a> Java自动装箱与拆箱</h3><p>装箱就是自动将基本数据类型转换为包装器类型（ int--&gt;Integer ）；</p><p>调用方法：<code>Integer</code>的 <code>valueOf(int)</code> 方法</p><p>拆箱就是自动将包装器类型转换为基本数据类型（ Integer--&gt;int ）。</p><p>调用方法：<code>Integer</code>的 <code>intValue</code> 方法</p><blockquote><p>在 JDK5 之前，如果要生成一个数值为10的Integer对象，必须这样进行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而在从 JDK5 开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="重载和重写" tabindex="-1"><a class="header-anchor" href="#重载和重写" aria-hidden="true">#</a> 重载和重写</h3><h4 id="重写-override" tabindex="-1"><a class="header-anchor" href="#重写-override" aria-hidden="true">#</a> 重写(Override)</h4><p>从字面上看，重写就是重新写一遍的意思。其实就是在子类中把父类本身有的方法重新写一遍。</p><p>子类继承了父类原 有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型(除过子类 中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或重写，这就是重写。</p><blockquote><p>注意子类函数的访问修饰权限不能少于父类的。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// TODO Auto-generated method stub</span>
        <span class="token class-name">Son</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// TODO Auto-generated method stub</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello by &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重载-overload" tabindex="-1"><a class="header-anchor" href="#重载-overload" aria-hidden="true">#</a> 重载（Overload）</h4><p>在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重 载。</p><p>同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// TODO Auto-generated method stub</span>
        <span class="token class-name">Father</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;wintershii&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重载Overload是一个类中多态性的一种表现</p></blockquote><h3 id="integer-a-127-与-integer-b-127相等吗" tabindex="-1"><a class="header-anchor" href="#integer-a-127-与-integer-b-127相等吗" aria-hidden="true">#</a> Integer a= 127 与 Integer b = 127相等吗</h3><p>如果整型字面量的值在-128到127之间，那么自动装箱时不会<code>new</code>新的<code>Integer</code>对象，而是直接引用常量池中的 <code>Integer</code>对象，超过范围 a1==b1的结果是<code>false</code></p><h3 id="抽象类和接口的对比" tabindex="-1"><a class="header-anchor" href="#抽象类和接口的对比" aria-hidden="true">#</a> 抽象类和接口的对比</h3><p>抽象类是用来捕捉子类的通用特性的。</p><p>接口是抽象方法的集合。</p><h4 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h4><ul><li>接口和抽象类都不能实例化</li><li>都位于继承的顶端，用于被其他实现或继承</li><li>都包含抽象方法，其子类都必须覆写这些抽象方法</li></ul><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h4><table><thead><tr><th>参数</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>声明</td><td>abstract</td><td>interface</td></tr><tr><td>实现</td><td>extends</td><td>implements</td></tr><tr><td>构造器</td><td>可以有</td><td>不能有</td></tr><tr><td>访问修饰符</td><td>任意的</td><td>public</td></tr><tr><td>多继承</td><td>单继承</td><td>多实现</td></tr><tr><td>字段声明</td><td>任意的</td><td>static final</td></tr></tbody></table><h3 id="内部类优点" tabindex="-1"><a class="header-anchor" href="#内部类优点" aria-hidden="true">#</a> 内部类优点</h3><ul><li>一个内部类对象可以访问创建它的外部类对象的内容，包括私有数据！</li><li>内部类不为同一包的其他类所见，具有很好的封装性；</li><li>内部类有效实现了“多重继承”，优化 java 单继承的缺陷。</li></ul><h3 id="java代码初始化顺序" tabindex="-1"><a class="header-anchor" href="#java代码初始化顺序" aria-hidden="true">#</a> Java代码初始化顺序</h3><ol><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ol><h3 id="equals与" tabindex="-1"><a class="header-anchor" href="#equals与" aria-hidden="true">#</a> equals与==</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> ==</h4><p>== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个 对象。</p><p>1、比较的是操作符两端的操作数是否是同一个对象。</p><p>2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。</p><p>3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为<code>true</code>。</p><p>如： int a=10 与 long b=10L 与 double c=10.0 都是相同的（为true），因为他们都指向地址为10的堆。</p><h4 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals</h4><p><code>equals</code>用来比较的是两个对象的内容是否相等（更加准确的回答是：有类重写的规定），由于所有的类都是继承自 <code>java.lang.Object</code> 类的，所以适用于所有对象</p><p>如果没有对该方法进行覆盖的话，调用的仍然是<code>Object</code>类中的 方法，而<code>Object</code>中的 <code>equals()</code> 方法返回的却是<code>==</code>的判断。</p><h3 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode" aria-hidden="true">#</a> hashcode</h3><p>它返回的就是根据对象的内存地址换算出的一个值。</p><p>这样一来，当集合要添加新的元素时，先调用这个元素的 <code>hashCode()</code> 方法，就一下子能定位到它应该放置的物理位置上。</p><p>如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；</p><p>如果这个位置上已经有元素了，就调用它的 <code>equals</code>方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。</p><p>这样一来实际调用<code>equals</code>方法的次 数就大大降低了，几乎只需要一两次。</p><h3 id="string-、-stringbuffer-和-stringbuilder" tabindex="-1"><a class="header-anchor" href="#string-、-stringbuffer-和-stringbuilder" aria-hidden="true">#</a> String 、 StringBuffer 和 StringBuilder</h3><p><code>String</code>是只读字符串，它并不是基本数据类型，而是一个对象。</p><p>从底层源码来看是一个<code>final</code>类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。</p><p>每次对 <code>String</code> 的操作都会生成新的 <code>String</code> 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每次<code>+</code>操作 ： 隐式在堆上<code>new</code>了一个跟原字符串相同的 <code>StringBuilder</code> 对象，再调用<code>append</code>方法 拼接<code>+</code>后面的字 符。</p><p><code>StringBuffer</code> 和 <code>StringBuilder</code> 他们两都继承了 <code>AbstractStringBuilder</code> 抽象类，从 <code>AbstractStringBuilder</code> 抽 象类中我们可以看到</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* The value is used for character storage.
*/</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用 <code>StringBuffer</code> 和 <code>StringBuilder</code> 来 进行操作。</p><p>另外 <code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。</p><p><code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><h3 id="java创建对象的几种方式" tabindex="-1"><a class="header-anchor" href="#java创建对象的几种方式" aria-hidden="true">#</a> Java创建对象的几种方式</h3><ul><li>new创建新对象</li><li>通过反射机制</li><li>采用<code>clone</code>机制</li><li>通过序列化机制</li></ul><h3 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝</h3><h4 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h4><p>被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.</p><p>换言之,浅拷贝仅复制所考虑的对象,而不复制它所引用的对象.</p><h4 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h4><p>被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对象.而不再是原有的那些被引用的对象.</p><p>换言之.深拷贝把要复制的对象所引用的对象都复制了一遍.</p><blockquote><p>深浅拷贝指的是被拷贝对象的引用类型属性是否还是指向原来的。</p></blockquote><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final" aria-hidden="true">#</a> final</h3><ul><li>被<code>final</code>修饰的类不可以被继承</li><li>被<code>final</code>修饰的方法不可以被重写</li><li>被<code>final</code>修饰的变量不可以被改变. <ul><li>如果修饰引用，那么表示引用不可变,引用指向的内容可变.</li></ul></li><li>被<code>final</code>修饰的方法，<code>JVM</code>会尝试将其内联，以提高运行效率</li><li>被<code>final</code>修饰的常量，在编译阶段会存入常量池中.</li></ul><h3 id="final-finally-finalize" tabindex="-1"><a class="header-anchor" href="#final-finally-finalize" aria-hidden="true">#</a> final finally finalize</h3><p><code>final</code>可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表 示该 变量是一个常量不能被重新赋值。</p><p><code>finally</code>一般作用在<code>try-catch</code>代码块中，在处理异常的时候，通常我们将一定要执行的代码方法<code>finally</code>代码块 中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</p><p><code>finalize</code>是一个方法，属于<code>Object</code>类的一个方法，而<code>Object</code>类是所有类的父类，该方法一般由垃圾回收器来调用， 当我们调用 <code>System.gc()</code> 方法的时候，由垃圾回收器调用<code>finalize()</code>，回收垃圾，一个对象是否可回收的最后判 断。</p><h3 id="this关键字" tabindex="-1"><a class="header-anchor" href="#this关键字" aria-hidden="true">#</a> this关键字</h3><p><code>this</code>是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</p><p><code>this</code>的用法在<code>java</code>中大体可以分为3种：</p><ul><li>普通的直接引用，<code>this</code>相当于是指向当前对象本身。</li><li>形参与成员名字重名，用<code>this</code>来区分。</li><li>引用本类的构造函数 。</li></ul><h3 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字" aria-hidden="true">#</a> super关键字</h3><p><code>super</code>可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。</p><p><code>super</code>也有三种用法：</p><ul><li>普通的直接引用，与<code>this</code>类似，<code>super</code>相当于是指向当前对象的父类的引用，这样就可以用 <code>super.xxx</code> 来引用父类的成员。</li><li>子类中的成员变量或方法与父类中的成员变量或方法同名时，用<code>super</code>进行区分</li><li>引用父类构造函数 <ul><li><code>super</code>（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。</li><li><code>this</code>（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。</li></ul></li></ul><h3 id="this与super的区别" tabindex="-1"><a class="header-anchor" href="#this与super的区别" aria-hidden="true">#</a> this与super的区别</h3><p><strong>super:</strong> 它引用当前对象的直接父类中的成员</p><p>**this：**它代表当前对象名</p><p><code>super()</code>和t<code>his()</code>类似,区别是，<code>super()</code>在子类中调用父类的构造方法，<code>this()</code>在本类内调用本类的其它构造方法。</p><p><strong>super()和this()均需放在构造方法内第一行。</strong></p><p>尽管可以用<code>this</code>调用一个构造器，但却不能调用两个。</p><p><strong>this和super不能同时出现在一个构造函数里面</strong>，因为<code>this</code>必然会调用其它的构造函数，其它的构造函数必然也会 有<code>super</code>语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。</p><p><code>this()</code>和<code>super()</code>都指的是对象，所以，均不可以在<code>static</code>环境中使用。包括：<code>static</code>变量,<code>static</code>方法，<code>static</code>语句块。</p><blockquote><p>从本质上讲，<code>this</code>是一个指向本对象的指针, 然而<code>super</code>是一个<code>Java</code>关键字。</p></blockquote><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h3><p>static关键字这两个基本的用法</p><ul><li>静态变量</li><li>静态方法</li></ul><p>被<code>static</code>所修饰的变量/方法都属于类的静态资源,类实例所共享</p><p><code>static</code>也用于静态块,多用于初始化操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> calss <span class="token class-name">PreCache</span><span class="token punctuation">{</span>
	<span class="token keyword">static</span><span class="token punctuation">{</span>
		<span class="token comment">//执行相关操作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外<code>static</code>也多用于修饰内部类,此时称之为静态内部类。</p><p>最后一种用法就是静态导包，即 <code>import static</code> 。</p><blockquote><p>import static 是在 JDK 1.5 之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名,可以 直接使用资源名。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//System.out.println(Math.sin(20));传统做法</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：</p><ul><li>静态只能访问静态。</li><li>非静态既可以访问非静态的，也可以访问静态的。</li></ul></blockquote><h3 id="和" tabindex="-1"><a class="header-anchor" href="#和" aria-hidden="true">#</a> &amp;和&amp;&amp;</h3><p><code>&amp;</code>运算符有两种用法：(1)按位与；(2)逻辑与。</p><p><code>&amp;&amp;</code>运算符是短路与运算</p><blockquote><p>如果 <code>&amp;&amp;</code>左边的表达式的值是 <code>false</code>，右边的表达式会被直接短路掉，不会进行运算</p><p>注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p></blockquote><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h3><p>switch(expr)中，expr 只能是</p><p><code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>。从 Java5 开始，Java 中引入了枚举类 型，expr 也可以是 <code>enum</code> 类型，从 Java 7 开始，expr 还可以是字符串（<code>String</code>）</p><h3 id="eqauls-方法和-hashcode" tabindex="-1"><a class="header-anchor" href="#eqauls-方法和-hashcode" aria-hidden="true">#</a> eqauls 方法和 hashCode</h3><p>(1)如果两个对象相同（equals 方法返回 true），那么它们的 <code>hashCode</code> 值一定要相同；</p><p>(2)如果两个对象的 <code>hashCode</code> 相同，x.equals(y) 不一定为true。</p><h3 id="a-a-b与a-b" tabindex="-1"><a class="header-anchor" href="#a-a-b与a-b" aria-hidden="true">#</a> a=a+b与a+=b</h3><p><code>+=</code> 操作符会进行隐式自动类型转换，操作的结果类型强制转换为持有结果的类型</p><h3 id="try-catch-finally-try里有return-finally还执行么" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-try里有return-finally还执行么" aria-hidden="true">#</a> try catch finally，try里有return，finally还执行么</h3><p>执行，并且<code>finally</code>的执行早于<code>try</code>里面的<code>return</code></p><p>结论：</p><p>1、不管有木有出现异常，<code>finally</code>块中代码都会执行；</p><p>2、当<code>try</code>和<code>catch</code>中有<code>return</code>时，<code>finally</code>仍然会执行；</p><p>3、<code>finally</code>是在<code>return</code>后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来， 管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在<code>finally</code>执行前确定 的；</p><p>4、<code>finally</code>中最好不要包含<code>return</code>，否则程序会提前退出，返回值不是<code>try</code>或<code>catch</code>中保存的返回值</p><h3 id="transient" tabindex="-1"><a class="header-anchor" href="#transient" aria-hidden="true">#</a> transient</h3><p><code>transient</code> 关键字的作用是</p><ul><li><p>阻止实例中那些用此关键字修饰的的变量序列化；</p></li><li><p>当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。</p></li><li><blockquote><p><code>transient</code> 只能修饰变量，不能修饰类和方法</p></blockquote></li></ul><h3 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h3><p>反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；</p><p>对于任意个对象，都能够调用它的 任意一个方法。</p><p>在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><p>这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制</p><h4 id="反射的实现方式" tabindex="-1"><a class="header-anchor" href="#反射的实现方式" aria-hidden="true">#</a> 反射的实现方式</h4><p>获取<code>Class</code>对象，有4中方法：</p><p>1）<code>Class.forName(“类的路径”)；</code></p><p>2）类名<code>.class</code></p><p>3）对象名<code>.getClass()</code></p><p>4） 基本类型的包装类，可以调用包装类的<code>Type</code>属性来获得该包装类的<code>Class</code>对象</p><h4 id="实现java反射的类" tabindex="-1"><a class="header-anchor" href="#实现java反射的类" aria-hidden="true">#</a> 实现Java反射的类</h4><p>1）<code>Class</code>：表示正在运行的<code>Java</code>应用程序中的类和接口</p><p>注意： 所有获取对象的信息都需要<code>Class</code>类来实现。</p><p>2） <code>Field</code>：提供有关类和接口的属性信息，以及对它的动态访问权限。</p><p>3）<code>Constructor</code>：提供关于类的单个构造方法 的信息以及它的访问权限</p><p>4）<code>Method</code>：提供类或接口中某个方法的信息</p><h3 id="string类的intern" tabindex="-1"><a class="header-anchor" href="#string类的intern" aria-hidden="true">#</a> String类的intern()</h3><p><code>Stirng</code> 中的 <code>intern()</code> 是个<code>Native</code>方法</p><p>它会首先从常量池中查找是否存在该常量值的字符串,若不存在则先在常量池中创建，否则直接返回常量池已经存在的字符串的引用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string字符串为什么说是不可变" tabindex="-1"><a class="header-anchor" href="#string字符串为什么说是不可变" aria-hidden="true">#</a> String字符串为什么说是不可变</h3><p>没有提供public修饰的方法来修改value数组，所以，你是没发改变其内容的。</p>`,177);function v(b,m){const s=o("router-link");return p(),i("div",null,[u,a("nav",h,[a("ul",null,[a("li",null,[e(s,{to:"#java基础"},{default:t(()=>[n("Java基础")]),_:1}),a("ul",null,[a("li",null,[e(s,{to:"#java语言特点"},{default:t(()=>[n("Java语言特点")]),_:1})]),a("li",null,[e(s,{to:"#面向对象和面向过程的区别"},{default:t(()=>[n("面向对象和面向过程的区别")]),_:1})]),a("li",null,[e(s,{to:"#面向对象编程三大特性"},{default:t(()=>[n("面向对象编程三大特性")]),_:1})]),a("li",null,[e(s,{to:"#八种基本数据类型的大小-以及他们的封装类"},{default:t(()=>[n("八种基本数据类型的大小，以及他们的封装类")]),_:1})]),a("li",null,[e(s,{to:"#jdk、jre、jvm"},{default:t(()=>[n("JDK、JRE、JVM")]),_:1})]),a("li",null,[e(s,{to:"#instanceof"},{default:t(()=>[n("instanceof")]),_:1})]),a("li",null,[e(s,{to:"#java自动装箱与拆箱"},{default:t(()=>[n("Java自动装箱与拆箱")]),_:1})]),a("li",null,[e(s,{to:"#重载和重写"},{default:t(()=>[n("重载和重写")]),_:1})]),a("li",null,[e(s,{to:"#integer-a-127-与-integer-b-127相等吗"},{default:t(()=>[n("Integer a= 127 与 Integer b = 127相等吗")]),_:1})]),a("li",null,[e(s,{to:"#抽象类和接口的对比"},{default:t(()=>[n("抽象类和接口的对比")]),_:1})]),a("li",null,[e(s,{to:"#内部类优点"},{default:t(()=>[n("内部类优点")]),_:1})]),a("li",null,[e(s,{to:"#java代码初始化顺序"},{default:t(()=>[n("Java代码初始化顺序")]),_:1})]),a("li",null,[e(s,{to:"#equals与"},{default:t(()=>[n("equals与==")]),_:1})]),a("li",null,[e(s,{to:"#hashcode"},{default:t(()=>[n("hashcode")]),_:1})]),a("li",null,[e(s,{to:"#string-、-stringbuffer-和-stringbuilder"},{default:t(()=>[n("String 、 StringBuffer 和 StringBuilder")]),_:1})]),a("li",null,[e(s,{to:"#java创建对象的几种方式"},{default:t(()=>[n("Java创建对象的几种方式")]),_:1})]),a("li",null,[e(s,{to:"#深拷贝和浅拷贝"},{default:t(()=>[n("深拷贝和浅拷贝")]),_:1})]),a("li",null,[e(s,{to:"#final"},{default:t(()=>[n("final")]),_:1})]),a("li",null,[e(s,{to:"#final-finally-finalize"},{default:t(()=>[n("final finally finalize")]),_:1})]),a("li",null,[e(s,{to:"#this关键字"},{default:t(()=>[n("this关键字")]),_:1})]),a("li",null,[e(s,{to:"#super关键字"},{default:t(()=>[n("super关键字")]),_:1})]),a("li",null,[e(s,{to:"#this与super的区别"},{default:t(()=>[n("this与super的区别")]),_:1})]),a("li",null,[e(s,{to:"#static"},{default:t(()=>[n("static")]),_:1})]),a("li",null,[e(s,{to:"#和"},{default:t(()=>[n("&和&&")]),_:1})]),a("li",null,[e(s,{to:"#switch"},{default:t(()=>[n("switch")]),_:1})]),a("li",null,[e(s,{to:"#eqauls-方法和-hashcode"},{default:t(()=>[n("eqauls 方法和 hashCode")]),_:1})]),a("li",null,[e(s,{to:"#a-a-b与a-b"},{default:t(()=>[n("a=a+b与a+=b")]),_:1})]),a("li",null,[e(s,{to:"#try-catch-finally-try里有return-finally还执行么"},{default:t(()=>[n("try catch finally，try里有return，finally还执行么")]),_:1})]),a("li",null,[e(s,{to:"#transient"},{default:t(()=>[n("transient")]),_:1})]),a("li",null,[e(s,{to:"#反射"},{default:t(()=>[n("反射")]),_:1})]),a("li",null,[e(s,{to:"#string类的intern"},{default:t(()=>[n("String类的intern()")]),_:1})]),a("li",null,[e(s,{to:"#string字符串为什么说是不可变"},{default:t(()=>[n("String字符串为什么说是不可变")]),_:1})])])])])]),k])}const g=c(r,[["render",v],["__file","JavaBase.html.vue"]]);export{g as default};
