import{_ as o,M as p,p as c,q as l,R as a,N as e,V as t,t as s,a1 as i}from"./framework-5866ffd3.js";const d="/FullStackNotes/assets/1674820616633-363a0e54-aeda-4c0a-9e64-6bc161637272-1005be59.png",u="/FullStackNotes/assets/1674820651160-5439b4ee-40dd-4533-99d2-7aaf1d426b55-a4700c8a.png",r="/FullStackNotes/assets/1674822383054-cfe207d1-672c-433d-bd18-5d098a5c7b1d-d34283e5.png",h="/FullStackNotes/assets/1674909875209-ff505b60-0783-4f70-88e1-a484d43509dc-e9f39919.png",k={},m=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),s(" 目录")],-1),v={class:"table-of-contents"},b=i('<h2 id="java集合篇" tabindex="-1"><a class="header-anchor" href="#java集合篇" aria-hidden="true">#</a> Java集合篇</h2><h3 id="java-中集合框架类关系图" tabindex="-1"><a class="header-anchor" href="#java-中集合框架类关系图" aria-hidden="true">#</a> Java 中集合框架类关系图</h3><p>整体分成两大体系： <code>key-value</code>体系<code>Map</code> 动态数组、链表、队列体系</p><p><strong>key-value体系Map</strong><img src="'+d+'" alt="image.png"><strong>动态数组、链表、队列体系</strong><img src="'+u+`" alt="image.png"></p><h3 id="集合和数组有什么区别" tabindex="-1"><a class="header-anchor" href="#集合和数组有什么区别" aria-hidden="true">#</a> 集合和数组有什么区别？</h3><ul><li>数组是固定长度的；集合可变长度的。</li><li>数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</li><li>数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</li></ul><h3 id="怎么确保一个集合不能被修改" tabindex="-1"><a class="header-anchor" href="#怎么确保一个集合不能被修改" aria-hidden="true">#</a> 怎么确保一个集合不能被修改？</h3><p>可以使用 <code>Collections. unmodifiableCollection(Collection c)</code> 方法来创建一个只读集合，这样改变集合的任 何操作都会抛出 <code>java. lang. UnsupportedOperationException</code> 异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;伟哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> clist <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span> <span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
clist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;伟哥天下第一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 运行时此行报错</span>
<span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iterator-有什么特点" tabindex="-1"><a class="header-anchor" href="#iterator-有什么特点" aria-hidden="true">#</a> Iterator 有什么特点？</h3><p><code>Iterator</code> 的特点是只能单向遍历，但是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛 出 <code>ConcurrentModificationException</code> 异常。</p><blockquote><p>比如，有时候我们需要遍历ArrayList，同时做修改的时候，用fo循环会出问题，此时，我们就可以用迭代器 来操作。</p></blockquote><h3 id="如何边遍历边移除-collection-中的元素" tabindex="-1"><a class="header-anchor" href="#如何边遍历边移除-collection-中的元素" aria-hidden="true">#</a> 如何边遍历边移除 Collection 中的元素？</h3><p>唯一正确方式是使用 <code>Iterator.remove()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// do something*</span>
it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arraylist底层数据结构是什么" tabindex="-1"><a class="header-anchor" href="#arraylist底层数据结构是什么" aria-hidden="true">#</a> ArrayList底层数据结构是什么？</h3><p>数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为什么-arraylist-的-elementdata-加上-transient-修饰" tabindex="-1"><a class="header-anchor" href="#为什么-arraylist-的-elementdata-加上-transient-修饰" aria-hidden="true">#</a> 为什么 ArrayList 的 elementData 加上 transient 修饰？</h3><p>从<code>ArrayList</code> 的类定义可以看到 <code>ArrayList</code> 实现了 <code>Serializable</code> 接口，这意味着 <code>ArrayList</code> 支持序列化。<code>transient</code> 的作用是不希望 <code>elementData</code> 数组被序列化，重写了 <code>writeObject</code> 实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//类定义</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
	<span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>

<span class="token comment">//重写writeObject方法</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">{</span>
	<span class="token operator">*</span><span class="token comment">// Write out element count, and any hidden stuff*</span>
	<span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token comment">// Write out array length*</span>
	s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token comment">// Write out all elements in the proper order.*</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每次序列化时，先调用 defaultWriteObject() 方法序列化 ArrayList 中的非 transient 元素，然后遍历 elementData，只序列化已存入的元素，这样既加快了序列化的速度，又减小了序列化之后的文件大小</p></blockquote><h3 id="说说你对序列化的理解" tabindex="-1"><a class="header-anchor" href="#说说你对序列化的理解" aria-hidden="true">#</a> 说说你对序列化的理解</h3><p>序列化（编码）是将对象序列化为二进制形式（字节数组），主要用于网络传输、数据持久化等； 而反序列化（解 码）则是将从网络、磁盘等读取的字节数组还原成原始对象，主要用于网络传输对象的解码，以便完成远程调用。</p><h3 id="既然有数组了-为什么还要有arraylist" tabindex="-1"><a class="header-anchor" href="#既然有数组了-为什么还要有arraylist" aria-hidden="true">#</a> 既然有数组了，为什么还要有ArrayList？</h3><p>我们常说的数组是定死的数组，<code>ArrayList</code> 却是动态数组。<br><code>ArrayList</code>可以使用默认的大小，当元素个数到达一定程度后，会自动扩容</p><h3 id="arraylist有什么优缺点" tabindex="-1"><a class="header-anchor" href="#arraylist有什么优缺点" aria-hidden="true">#</a> ArrayList有什么优缺点？</h3><p>优点：<code>ArrayList</code>是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高 （在内存里是连着放的）。 缺点：因为地址连续，<code>ArrayList</code>要移动数据，所以插入和删除操作效率比较低</p><h3 id="linkedlist-底层数据结构是什么" tabindex="-1"><a class="header-anchor" href="#linkedlist-底层数据结构是什么" aria-hidden="true">#</a> LinkedList 底层数据结构是什么？</h3><p><code>LinkedList</code>基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址。 对于新增 和删除操作，<code>LinkedList</code>比较占优势。 <code>LinkedList</code> 适用于要头尾操作或插入指定位置的场景。</p><blockquote><p>记得：双向链表</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 集合数量</span>
<span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 双向链表的表头</span>
<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span>
<span class="token comment">// 双向链表的表尾</span>
<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token class-name">E</span> item<span class="token punctuation">;</span>
	<span class="token comment">//后继</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
	<span class="token comment">//前驱</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
	<span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arraylist-和-linkedlist-的区别是什么" tabindex="-1"><a class="header-anchor" href="#arraylist-和-linkedlist-的区别是什么" aria-hidden="true">#</a> ArrayList 和 LinkedList 的区别是什么？</h3><p>**ArrayList ** 优点：</p><ul><li><code>ArrayList</code>是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较 高（在内存里是连着放的）。</li><li>缺点：因为地址连续，<code>ArrayList</code>要移动数据，所以插入和删除操作效率比较低。</li></ul><p>**LinkedList ** 优点：</p><ul><li><code>LinkedList</code>基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地 址。对于新增和删除操作，<code>LinkedList</code>比较占优势。</li><li><code>LinkedList</code>适用于要头尾操作或插入指定位置的场景。</li></ul><p>缺点：</p><ul><li>因为 <code>LinkedList</code> 要移动指针，所以查询操作性能比较低。</li></ul><p>**适用场景分析 **</p><ul><li>当需要对数据进行对随机访问的时候，选用 <code>ArrayList</code>。</li><li>当需要对数据进行多次增加删除修改时，采用 <code>LinkedList</code>。</li></ul><p>如果容量固定，并且只会添加到尾部，不会引起扩容，优先采用 <code>ArrayList</code>。 当然，绝大数业务的场景下，使用 <code>ArrayList</code> 就够了，但需要注意避免 <code>ArrayList</code> 的扩容，以及非顺序的插入。</p><h3 id="arraylist-线程安全吗" tabindex="-1"><a class="header-anchor" href="#arraylist-线程安全吗" aria-hidden="true">#</a> ArrayList 线程安全吗？</h3><p>不是线程安全的</p><h3 id="多线程场景下如何使用-arraylist" tabindex="-1"><a class="header-anchor" href="#多线程场景下如何使用-arraylist" aria-hidden="true">#</a> 多线程场景下如何使用 ArrayList？</h3><p>如果遇到多线程场景，可以通过 <code>Collections</code> 的 <code>synchronizedList</code> 方法将其转换成线程安全的容器后再使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> synchronizedList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
synchronizedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;伟哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
synchronizedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;伟哥天下第一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> synchronizedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>synchronizedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说一下hashset-的实现原理" tabindex="-1"><a class="header-anchor" href="#说一下hashset-的实现原理" aria-hidden="true">#</a> 说一下HashSet 的实现原理？</h3><p><code>HashSet</code> 是基于 <code>HashMap</code> 实现的，<code>HashSet</code>的值存放于<code>HashMap</code>的<code>key</code>上，<code>HashMap</code>的<code>value</code>统一为<code>present</code>，因此 <code>HashSet</code> 的实现比较简单，相关 <code>HashSet</code> 的操作，基本上都是直接调用底层 <code>HashMap</code> 的相关方法来完成，<code>HashSet</code> 不允许重复的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//HashSet</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说一下hashmap底层数据结构" tabindex="-1"><a class="header-anchor" href="#说一下hashmap底层数据结构" aria-hidden="true">#</a> 说一下HashMap底层数据结构？</h3><p>JDK7及之前，采用的是数组+链表。 JDK8开始采用的是数组+链表+红黑树。</p><h3 id="为什么要改成数组-链表-红黑树" tabindex="-1"><a class="header-anchor" href="#为什么要改成数组-链表-红黑树" aria-hidden="true">#</a> 为什么要改成数组+链表+红黑树？</h3><p>主要是为了提升在 <code>hash</code> 冲突严重时（链表过长）的查找性能，使用链表的查找性能是 O(n)，而使用红黑树是 O(logn)。</p><h3 id="什么是哈希表" tabindex="-1"><a class="header-anchor" href="#什么是哈希表" aria-hidden="true">#</a> 什么是哈希表？</h3><p>散列表 （Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过 把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫 做散列表。</p><h3 id="说一下hashmap的put过程" tabindex="-1"><a class="header-anchor" href="#说一下hashmap的put过程" aria-hidden="true">#</a> 说一下HashMap的put过程？</h3><ol><li>接收要存储的键值对（K,V）</li><li>根据key计算hash值</li><li>根据hash值计算存储的数字的下标位置</li><li>判断是否发送hash冲突 <ol><li>未发生则直接存入</li></ol></li><li>发生则判断当前节点数据结构是 红黑树 or 链表</li><li>红黑树 则在红黑树中插入数据</li><li>链表 则在链表尾部插入数据</li><li>结束</li></ol><p><img src="`+r+`" alt="image.png"></p><h3 id="使用hashmap时-当两个对象的-hashcode-相同怎么办" tabindex="-1"><a class="header-anchor" href="#使用hashmap时-当两个对象的-hashcode-相同怎么办" aria-hidden="true">#</a> 使用HashMap时，当两个对象的 hashCode 相同怎么办？</h3><p>因为<code>HashCode</code> 相同，不一定就是相等的（<code>equals</code>方法比较），所以两个对象所在数组的下标相同，&quot;碰撞&quot;就此发 生。又因为 <code>HashMap</code> 使用链表存储对象，这个 <code>Node</code> 会存储到链表中。</p><h3 id="hashmap的哈希函数怎么设计的吗" tabindex="-1"><a class="header-anchor" href="#hashmap的哈希函数怎么设计的吗" aria-hidden="true">#</a> HashMap的哈希函数怎么设计的吗？</h3><p><code>hash</code> 函数是先拿到通过 <code>key</code> 的 <code>hashCode</code> ，是 32 位的 <code>int</code> 值，然后让 <code>hashCode</code> 的高 16 位和低 16 位进行异或操作。 两个好处：</p><ol><li>一定要尽可能降低 <code>hash</code> 碰撞，越分散越好；</li><li>算法一定要尽可能高效，因为这是高频操作,因此采用位运算；</li></ol><h3 id="为什么采用-hashcode-的高-16-位和低-16-位异或能降低-hash-碰撞" tabindex="-1"><a class="header-anchor" href="#为什么采用-hashcode-的高-16-位和低-16-位异或能降低-hash-碰撞" aria-hidden="true">#</a> 为什么采用 hashcode 的高 16 位和低 16 位异或能降低 hash 碰撞？</h3><p>因为 key.hashCode()函数调用的是 key 键值类型自带的哈希函数，返回 int 型散列值。 int 值范围为 -2147483648~2147483647，前后加起来大概 40 亿的映射空间。 只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。 但问题是一个 40 亿长度的数组，内存是放不下的。 HashMap 数组的初始大小才 16，用之前需要对数组的长度取模运算，得到的余数才能用来访问数组下标。</p><h3 id="解决hash冲突的有几种方法" tabindex="-1"><a class="header-anchor" href="#解决hash冲突的有几种方法" aria-hidden="true">#</a> 解决hash冲突的有几种方法？</h3><p>**1、再哈希法：**如果hash出的index已经有值，就再hash，不行继续hash，直至找到空的index位置，要相信瞎猫总 能碰上死耗子。这个办法最容易想到。但有2个缺点： 比较浪费空间，消耗效率。根本原因还是数组的长度是固定不变的，不断hash找出空的index，可能越界，这 时就要创建新数组，而老数组的数据也需要迁移。随着数组越来越大，消耗不可小觑。 get不到，或者说get算法复杂。进是进去了，想出来就没那么容易了。 **2、开放地址方法：**如果hash出的index已经有值，通过算法在它前面或后面的若干位置寻找空位，这个和再hash算法差别不大。 <strong>3、建立公共溢出区：</strong> 把冲突的hash值放到另外一块溢出区。 <strong>4、链式地址法：</strong> 把产生hash冲突的hash值以链表形式存储在index位置上。HashMap用的就是该方法。优点是不需 要另外开辟新空间，也不会丢失数据，寻址也比较简单。但是随着hash链越来越长，寻址也是更加耗时。好的hash 算法就是要让链尽量短，最好一个index上只有一个值。也就是尽可能地保证散列地址分布均匀，同时要计算简 单。</p><h3 id="为什么-hashmap-采用拉链法而不是开放地址法" tabindex="-1"><a class="header-anchor" href="#为什么-hashmap-采用拉链法而不是开放地址法" aria-hidden="true">#</a> 为什么 HashMap 采用拉链法而不是开放地址法？</h3><p>我认为 <code>Java</code> 给予 <code>HashMap</code> 的定位是一个相对通用的散列表容器，它应该在面对各种输入的时候都表现稳定。而开 发地址法相对来说容易出现数据堆积，在数据量较大时可能出现连续冲突的情况，性能不够稳定。</p><h3 id="为什么要用异或运算符" tabindex="-1"><a class="header-anchor" href="#为什么要用异或运算符" aria-hidden="true">#</a> 为什么要用异或运算符？</h3><p>保证了对象的 <code>hashCode</code> 的 32 位值只要有一位发生改变，整个 <code>hash()</code> 返回值就会改变。尽可能的减少碰撞</p><h3 id="为什么要做那么多扰动处理" tabindex="-1"><a class="header-anchor" href="#为什么要做那么多扰动处理" aria-hidden="true">#</a> 为什么要做那么多扰动处理？</h3><p>在<code>HashMap</code>中，有个<code>hash()</code>方法，也叫扰动函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> h<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>key.hashCode()</code> ，获取<code>key</code>的<code>hashCode</code>值，如果不进行重写的话返回的是根据内存地址得到的一个<code>int</code>值。 <code>key.hashCode()</code> 获取到的<code>hashcode</code>无符号右移16位并和元<code>hashCode</code>进行 <code>^</code> ，这样做的目的是为了让高位与低进 行混合，让两者都参与运算，以便让<code>hash</code>值分布更加均匀。</p><h3 id="hashmap的-table-的容量如何确定" tabindex="-1"><a class="header-anchor" href="#hashmap的-table-的容量如何确定" aria-hidden="true">#</a> HashMap的 table 的容量如何确定？</h3><ul><li><code>table</code> 数组大小是由 <code>capacity</code> 这个参数确定的，默认是16，也可以构造时传入，最大限制是<code>1&lt;&lt;30；</code></li><li><code>loadFactor</code> 是装载因子，主要目的是用来确认table 数组是否需要动态扩展，默认值是0.75，比如table 数组大 小为 16，装载因子为 0.75 时，<code>threshold</code> 就是12，当 <code>table</code> 的实际大小超过 12 时，<code>table</code>就需要动态扩容；</li><li>扩容时，调用 <code>resize()</code> 方法，将 <code>table</code> 长度变为原来的两倍（注意是 <code>table</code> 长度，而不是 <code>threshold</code>）；</li><li>如果数据很大的情况下，扩展时将会带来性能的损失，在性能要求很高的地方，这种损失很可能很致命。</li></ul><h3 id="默认加载因子为什么是0-75" tabindex="-1"><a class="header-anchor" href="#默认加载因子为什么是0-75" aria-hidden="true">#</a> 默认加载因子为什么是0.75？</h3><p>负载因子为<code>0.75f</code> 是空间与时间的均衡</p><p>因为<code>HashMap</code>的容量一定是2的幂次，与0.25、0.5、0.75、1相乘刚好是一个整数，0.25太小了不考虑</p><p>如果负载因子小，意味着阈值变小。比如容量为16 的 HashMap ，负载因子为0.5f，也就是当阈值为8，那么存储8 个就会扩容到32，出现哈希冲突的可能性变小，但是空间利用率不高。适用于有足够内存并要求查询效率的场景。</p><p>相反如果阈值为1，那么容量为16，就必须存储16个元素才进行扩容，出现冲突的概率变大，极端情况下可能会从 O(1)退化到O(n)。适用于内存敏感但不要求要求查询效率的场景。</p><h3 id="hashmap-的长度为什么是-2-的-n-次方呢" tabindex="-1"><a class="header-anchor" href="#hashmap-的长度为什么是-2-的-n-次方呢" aria-hidden="true">#</a> HashMap 的长度为什么是 2 的 N 次方呢？</h3><p>为了能让 <code>HashMap</code> 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞 我们首先可能会想到 <code>%</code> 取模的操作来实现。 取余（<code>%</code>） 操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&amp;）操作（也就是说 <code>hash % length == hash &amp;(length - 1 )</code> 的前提是 <code>length</code> 是 2 的 n 次方）。并且，采用二进制位操作 &amp;，相对于 % 能够提高运算效 率。</p><p>注意到 <code>HashMap</code> 初始化长度用的是 <code>1&lt;&lt;4</code>，而不是直接写 16。这是为啥呢？其实这样是为了位运算的方便，「位 与运算比算数计算的效率高太多了</p><p>长度 16 或者其他 2 的幂，<code>length - 1</code> 的值是所有二进制位全为 1, 这种情况下，<code>index</code> 的结果等同于 <code>hashcode</code> 后几位的值，只要输入的 <code>hashcode</code> 本身分布均匀，<code>hash</code> 算法的结果就是均匀的</p><h3 id="hashmap-最大容量是多少-为什么" tabindex="-1"><a class="header-anchor" href="#hashmap-最大容量是多少-为什么" aria-hidden="true">#</a> HashMap 最大容量是多少，为什么？</h3><p><code>HashMap</code> 最大容量是 <code>1 &lt;&lt; 30</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>int</code>占四个字节，一个字节占8位，所以是32位整型，也就是说最多32位。那按理说，最大数可以向左移 动31位即2的31次幂，在这里为什么不是2的31次方呢？实际上，二进制数的最左边那一位是符号位，用来表示正 负的，所以，<code>HashMap</code>最大容量是<code>1 &lt;&lt; 30</code></p><h3 id="hashmap为什么用数组而不用arraylist" tabindex="-1"><a class="header-anchor" href="#hashmap为什么用数组而不用arraylist" aria-hidden="true">#</a> HashMap为什么用数组而不用ArrayList？</h3><p>重点是使用数组可以自定义扩容机制，采用基本数组结构，扩容机制可以自己定义，<code>HashMap</code>中数组扩容刚好是2 的次幂，在做取模运算的效率高。</p><p><code>ArrayList</code>底层也是数组，但是扩容机制是1.5倍扩容</p><h3 id="当链表长度-8时-为什么要将链表转换成红黑树" tabindex="-1"><a class="header-anchor" href="#当链表长度-8时-为什么要将链表转换成红黑树" aria-hidden="true">#</a> 当链表长度 &gt;= 8时，为什么要将链表转换成红黑树？</h3><p>因为红黑树的平均查找长度是<code>log(n)</code>，链表的平均查找长度未<code>2\\n</code> 长度为8的时候，红黑树平均查找长度为3，链表平均查找长度为4，所以，当链表长度 &gt;= 8时 ，有必要将链表转换成红黑树</p><h3 id="newhashmap-12-此时hashmap初始容量为多少" tabindex="-1"><a class="header-anchor" href="#newhashmap-12-此时hashmap初始容量为多少" aria-hidden="true">#</a> new HashMap(12);此时HashMap初始容量为多少？</h3><p>容量为16。 在 <code>HashMap</code> 中有个静态方法 <code>tableSizeFor()</code> ， <code>tableSizeFor()</code> 方法保证函数返回值是大于等于给定参数 <code>initi alCapacity</code> 最小的2的幂次方的数值 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
	n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
	n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
	n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
	n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说hashmap的resize-扩容过程" tabindex="-1"><a class="header-anchor" href="#说hashmap的resize-扩容过程" aria-hidden="true">#</a> 说HashMap的resize()扩容过程</h3><p>创建一个新的数组，其容量为旧数组的两倍，并重新计算旧数组中结点的存储位置。</p><p>结点在新数组中的位置只有两 种，原下标位置或原下标+旧数组的大小。</p><p><img src="`+h+'" alt="image.png"></p><h3 id="说说hashmap中get-方法是如何实现的" tabindex="-1"><a class="header-anchor" href="#说说hashmap中get-方法是如何实现的" aria-hidden="true">#</a> 说说HashMap中get()方法是如何实现的？</h3><p>对<code>key</code>的<code>hashCode</code>进行<code>hash</code>值计算，与运算计算下标获取<code>bucket</code>位置，如果在桶的首位上就可以找到就直接返回， 否则在树中找或者链表中遍历找，如果有<code>hash</code>冲突，则利用<code>equals</code>方法去遍历链表查找节点。</p><h3 id="为什么-hashmap-用红黑树而不是平衡二叉树" tabindex="-1"><a class="header-anchor" href="#为什么-hashmap-用红黑树而不是平衡二叉树" aria-hidden="true">#</a> 为什么 HashMap 用红黑树而不是平衡二叉树？</h3><p>红黑树和平衡二叉树的区别在于它们的平衡强弱不同：</p><ul><li>平衡二叉树追求的是一种完全平衡的状态，它的定义是任何结点的左右子树的高度差不会超过 1，这样的优势 是树的结点是很平均分配的；</li><li>红黑树不追求这种完全平衡，而是追求一种弱平衡的状态，就是让整个树最长路径不会超过最短路径的 2 倍。 这样的话，红黑树虽然牺牲了一部分查找的性能效率，但是能够换取一部分维持树平衡状态的成本。</li></ul><p>而我们知道 HashMap 的设计定位应该是一个相对通用的散列表，那么它的设计者会希望这样一个数据结构应该具 备更强大的稳定性，因此它才选择了红黑树</p><h3 id="说说你对红黑树的了解" tabindex="-1"><a class="header-anchor" href="#说说你对红黑树的了解" aria-hidden="true">#</a> 说说你对红黑树的了解</h3><p>红黑树是一种自平衡的二叉查找树，是一种高效的查找树。 红黑树通过如下的性质定义实现自平衡：</p><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点（简称黑高）。</li></ul><h3 id="jdk8中-相对jdk7对hashmap做了哪些改变" tabindex="-1"><a class="header-anchor" href="#jdk8中-相对jdk7对hashmap做了哪些改变" aria-hidden="true">#</a> JDK8中，相对JDK7对HashMap做了哪些改变？</h3><p>JDK1.7及之前：</p><p>数组+链表；创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到 链表中即可。</p><p>JDK1.8：</p><p>数组+链表+红黑树； jdk1.8在解决哈希冲突时，当链表长度大于阈值（默认为8）并且结点总数超过64时，将链表转化为红黑树，以减少搜索时间。</p><p><code>resize</code>扩容优化；引入了红黑树，目的是避免单条链表过长而影响查询效率；</p><h3 id="为什么integer-string适合作hashmap的key呢" tabindex="-1"><a class="header-anchor" href="#为什么integer-string适合作hashmap的key呢" aria-hidden="true">#</a> 为什么Integer，String 适合作HashMap的key呢？</h3><p><code>Integer</code>和 <code>String</code> 的好处在于<code>hash</code> 出来的值不会改变。如果是一个对象，那么他们可能会因为内部引用的改变而 <code>hashCode</code> 值的改变，会导致存储重复的数据或找不到数据的情况。</p><h3 id="hashmap中的-key-我们可以使用任何类作为-key-吗" tabindex="-1"><a class="header-anchor" href="#hashmap中的-key-我们可以使用任何类作为-key-吗" aria-hidden="true">#</a> HashMap中的 key 我们可以使用任何类作为 key 吗？</h3><p>平时使用的最多的就是使用<code>String</code>作为<code>HashMap</code>的<code>key</code>，但是现在我们想使用某个自定 义类作为 <code>HashMap</code> 的 <code>key</code>，那就需要注意以下几点：</p><ul><li>如果类重写了<code>equals</code> 方法，它也应该重写 <code>hashCode</code>方法。</li><li>类的所有实例需要遵循与<code>equals</code>和<code>hashCode</code>相关的规则。</li><li>如果一个类没有使用 <code>equals</code>，你不应该在 <code>hashCode</code>中使用它。</li><li>咱们自定义<code>key</code> 类的最佳实践是使之为不可变的，这样，<code>hashCode</code> 值可以被缓存起来，拥有 更好的性能。不可变的类也可以确保 <code>hashCode</code>和<code>equals</code>在未来不会改变，这样就会解决与可变相关的问题 了。</li></ul><h3 id="为什么重写-equals方法的时-需要重写-hashcode-方法呢" tabindex="-1"><a class="header-anchor" href="#为什么重写-equals方法的时-需要重写-hashcode-方法呢" aria-hidden="true">#</a> 为什么重写 equals 方法的时，需要重写 hashCode 方法呢？</h3><p><code>hashCode</code>和<code>equals</code>两个方法是用来协同判断两个对象是否相等的，采用这种方式的原因是可以提高程序插入和查 询的速度，如果在重写 <code>equals</code>时，不重写<code>hashCode</code>，就会导致在某些场景下，例如将两个相等的自定义对象存储 在<code>Set</code>集合时，就会出现程序执行的异常，为了保证程序的正常执行，所以我们就需要在重写<code>equals</code>时，也一并重 写<code>hashCode</code>方法才行。</p><h3 id="说说什么是-fail-fast" tabindex="-1"><a class="header-anchor" href="#说说什么是-fail-fast" aria-hidden="true">#</a> 说说什么是 fail-fast？</h3><p><code>fail-fast</code>机制是<code>Java</code>集合（ Collection ）中的一种错误机制。</p><p>当多个线程对同一个集合的内容进行 操作时，就可 能会产生<code>fail-fast</code>事件。</p><p>例如：当某一个线程 A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变 了，那么线程 A访 问集合时，就会抛出 <code>ConcurrentModificationException</code> 异常，产生 <code>fail-fast</code>事 件。</p><p>这里的操作主要是指 <code>add</code>、 <code>remove</code> 和<code>clear</code>，对集合元素个数进行修改。</p><p><strong>解决办法</strong> 建议使用 <code>java.util.concurrent</code> 包下的类”去取代“ <code>java.util</code> 包下的类”。</p><p>可以这么理解：</p><p>在遍历之前，把 <code>modCount</code> 记下来 <code>expectModCount</code> ，后面 <code>expectModCount</code> 去 和 <code>modCount</code> 进 行比较，如果不相等了，证明已并发了，被修改了，于是抛出 <code>ConcurrentModificationException</code> 异常。</p>',133);function f(y,g){const n=p("router-link");return c(),l("div",null,[m,a("nav",v,[a("ul",null,[a("li",null,[e(n,{to:"#java集合篇"},{default:t(()=>[s("Java集合篇")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#java-中集合框架类关系图"},{default:t(()=>[s("Java 中集合框架类关系图")]),_:1})]),a("li",null,[e(n,{to:"#集合和数组有什么区别"},{default:t(()=>[s("集合和数组有什么区别？")]),_:1})]),a("li",null,[e(n,{to:"#怎么确保一个集合不能被修改"},{default:t(()=>[s("怎么确保一个集合不能被修改？")]),_:1})]),a("li",null,[e(n,{to:"#iterator-有什么特点"},{default:t(()=>[s("Iterator 有什么特点？")]),_:1})]),a("li",null,[e(n,{to:"#如何边遍历边移除-collection-中的元素"},{default:t(()=>[s("如何边遍历边移除 Collection 中的元素？")]),_:1})]),a("li",null,[e(n,{to:"#arraylist底层数据结构是什么"},{default:t(()=>[s("ArrayList底层数据结构是什么？")]),_:1})]),a("li",null,[e(n,{to:"#为什么-arraylist-的-elementdata-加上-transient-修饰"},{default:t(()=>[s("为什么 ArrayList 的 elementData 加上 transient 修饰？")]),_:1})]),a("li",null,[e(n,{to:"#说说你对序列化的理解"},{default:t(()=>[s("说说你对序列化的理解")]),_:1})]),a("li",null,[e(n,{to:"#既然有数组了-为什么还要有arraylist"},{default:t(()=>[s("既然有数组了，为什么还要有ArrayList？")]),_:1})]),a("li",null,[e(n,{to:"#arraylist有什么优缺点"},{default:t(()=>[s("ArrayList有什么优缺点？")]),_:1})]),a("li",null,[e(n,{to:"#linkedlist-底层数据结构是什么"},{default:t(()=>[s("LinkedList 底层数据结构是什么？")]),_:1})]),a("li",null,[e(n,{to:"#arraylist-和-linkedlist-的区别是什么"},{default:t(()=>[s("ArrayList 和 LinkedList 的区别是什么？")]),_:1})]),a("li",null,[e(n,{to:"#arraylist-线程安全吗"},{default:t(()=>[s("ArrayList 线程安全吗？")]),_:1})]),a("li",null,[e(n,{to:"#多线程场景下如何使用-arraylist"},{default:t(()=>[s("多线程场景下如何使用 ArrayList？")]),_:1})]),a("li",null,[e(n,{to:"#说一下hashset-的实现原理"},{default:t(()=>[s("说一下HashSet 的实现原理？")]),_:1})]),a("li",null,[e(n,{to:"#说一下hashmap底层数据结构"},{default:t(()=>[s("说一下HashMap底层数据结构？")]),_:1})]),a("li",null,[e(n,{to:"#为什么要改成数组-链表-红黑树"},{default:t(()=>[s("为什么要改成数组+链表+红黑树？")]),_:1})]),a("li",null,[e(n,{to:"#什么是哈希表"},{default:t(()=>[s("什么是哈希表？")]),_:1})]),a("li",null,[e(n,{to:"#说一下hashmap的put过程"},{default:t(()=>[s("说一下HashMap的put过程？")]),_:1})]),a("li",null,[e(n,{to:"#使用hashmap时-当两个对象的-hashcode-相同怎么办"},{default:t(()=>[s("使用HashMap时，当两个对象的 hashCode 相同怎么办？")]),_:1})]),a("li",null,[e(n,{to:"#hashmap的哈希函数怎么设计的吗"},{default:t(()=>[s("HashMap的哈希函数怎么设计的吗？")]),_:1})]),a("li",null,[e(n,{to:"#为什么采用-hashcode-的高-16-位和低-16-位异或能降低-hash-碰撞"},{default:t(()=>[s("为什么采用 hashcode 的高 16 位和低 16 位异或能降低 hash 碰撞？")]),_:1})]),a("li",null,[e(n,{to:"#解决hash冲突的有几种方法"},{default:t(()=>[s("解决hash冲突的有几种方法？")]),_:1})]),a("li",null,[e(n,{to:"#为什么-hashmap-采用拉链法而不是开放地址法"},{default:t(()=>[s("为什么 HashMap 采用拉链法而不是开放地址法？")]),_:1})]),a("li",null,[e(n,{to:"#为什么要用异或运算符"},{default:t(()=>[s("为什么要用异或运算符？")]),_:1})]),a("li",null,[e(n,{to:"#为什么要做那么多扰动处理"},{default:t(()=>[s("为什么要做那么多扰动处理？")]),_:1})]),a("li",null,[e(n,{to:"#hashmap的-table-的容量如何确定"},{default:t(()=>[s("HashMap的 table 的容量如何确定？")]),_:1})]),a("li",null,[e(n,{to:"#默认加载因子为什么是0-75"},{default:t(()=>[s("默认加载因子为什么是0.75？")]),_:1})]),a("li",null,[e(n,{to:"#hashmap-的长度为什么是-2-的-n-次方呢"},{default:t(()=>[s("HashMap 的长度为什么是 2 的 N 次方呢？")]),_:1})]),a("li",null,[e(n,{to:"#hashmap-最大容量是多少-为什么"},{default:t(()=>[s("HashMap 最大容量是多少，为什么？")]),_:1})]),a("li",null,[e(n,{to:"#hashmap为什么用数组而不用arraylist"},{default:t(()=>[s("HashMap为什么用数组而不用ArrayList？")]),_:1})]),a("li",null,[e(n,{to:"#当链表长度-8时-为什么要将链表转换成红黑树"},{default:t(()=>[s("当链表长度 >= 8时，为什么要将链表转换成红黑树？")]),_:1})]),a("li",null,[e(n,{to:"#newhashmap-12-此时hashmap初始容量为多少"},{default:t(()=>[s("new HashMap(12);此时HashMap初始容量为多少？")]),_:1})]),a("li",null,[e(n,{to:"#说hashmap的resize-扩容过程"},{default:t(()=>[s("说HashMap的resize()扩容过程")]),_:1})]),a("li",null,[e(n,{to:"#说说hashmap中get-方法是如何实现的"},{default:t(()=>[s("说说HashMap中get()方法是如何实现的？")]),_:1})]),a("li",null,[e(n,{to:"#为什么-hashmap-用红黑树而不是平衡二叉树"},{default:t(()=>[s("为什么 HashMap 用红黑树而不是平衡二叉树？")]),_:1})]),a("li",null,[e(n,{to:"#说说你对红黑树的了解"},{default:t(()=>[s("说说你对红黑树的了解")]),_:1})]),a("li",null,[e(n,{to:"#jdk8中-相对jdk7对hashmap做了哪些改变"},{default:t(()=>[s("JDK8中，相对JDK7对HashMap做了哪些改变？")]),_:1})]),a("li",null,[e(n,{to:"#为什么integer-string适合作hashmap的key呢"},{default:t(()=>[s("为什么Integer，String 适合作HashMap的key呢？")]),_:1})]),a("li",null,[e(n,{to:"#hashmap中的-key-我们可以使用任何类作为-key-吗"},{default:t(()=>[s("HashMap中的 key 我们可以使用任何类作为 key 吗？")]),_:1})]),a("li",null,[e(n,{to:"#为什么重写-equals方法的时-需要重写-hashcode-方法呢"},{default:t(()=>[s("为什么重写 equals 方法的时，需要重写 hashCode 方法呢？")]),_:1})]),a("li",null,[e(n,{to:"#说说什么是-fail-fast"},{default:t(()=>[s("说说什么是 fail-fast？")]),_:1})])])])])]),b])}const M=o(k,[["render",f],["__file","Collection.html.vue"]]);export{M as default};
