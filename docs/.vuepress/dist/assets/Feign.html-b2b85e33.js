import{_ as p,M as c,p as o,q as i,R as n,N as e,V as t,t as a,a1 as l}from"./framework-5866ffd3.js";const d="/FullStackNotes/assets/image-20210714174814204-98b273d6.png",u="/FullStackNotes/assets/image-20210714175102524-bc6dc416.png",r="/FullStackNotes/assets/image-20210714175415087-1e5fb88f.png",g="/FullStackNotes/assets/image-20210714185925910-c9a94410.png",k="/FullStackNotes/assets/image-20210714190041542-c6a7851f.png",m="/FullStackNotes/assets/image-20210714190542730-b5ebacb3.png",v="/FullStackNotes/assets/image-20210714190528450-48a2296c.png",h="/FullStackNotes/assets/image-20210714190640857-a49cc27b.png",b="/FullStackNotes/assets/image-20210714214041796-0d08048a.png",f="/FullStackNotes/assets/image-20210714204557771-9dc28330.png",_="/FullStackNotes/assets/image-20210714204656214-274027d0.png",F="/FullStackNotes/assets/image-20210714205221970-41ce1df7.png",C="/FullStackNotes/assets/image-20210714205623048-5194eaaf.png",x={},y=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),L={class:"table-of-contents"},S=l('<h2 id="feign远程调用" tabindex="-1"><a class="header-anchor" href="#feign远程调用" aria-hidden="true">#</a> Feign远程调用</h2><p>先来看我们以前利用<code>RestTemplate</code>发起远程调用的代码：</p><p><img src="'+d+`" alt="image-20210714174814204"></p><p>存在下面的问题：</p><ul><li><p>代码可读性差，编程体验不统一</p></li><li><p>参数复杂URL难以维护</p></li></ul><p><code>Feign</code>是一个声明式的<code>http</code>客户端，官方地址：https://github.com/OpenFeign/feign</p><p>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p><h3 id="feign使用" tabindex="-1"><a class="header-anchor" href="#feign使用" aria-hidden="true">#</a> Feign使用</h3><p><code>Fegin</code>的使用步骤如下：</p><h4 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1）引入依赖</h4><p>我们在order-service服务的<code>pom</code>文件中引入<code>feign</code>的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加注解" tabindex="-1"><a class="header-anchor" href="#_2-添加注解" aria-hidden="true">#</a> 2）添加注解</h4><p>在order-service的启动类添加注解开启<code>Feign</code>的功能：</p><p><img src="`+u+`" alt="image-20210714175102524"></p><h4 id="_3-编写feign的客户端" tabindex="-1"><a class="header-anchor" href="#_3-编写feign的客户端" aria-hidden="true">#</a> 3）编写Feign的客户端</h4><p>在order-service中新建一个接口，内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加 @FeignClient 注解，指定要调用哪个服务的接口</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;userservice&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：路径要写被调用接口的全路径（类路径 + 方法路径）</p></blockquote><p>这个客户端主要是基于<code>SpringMVC</code>的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：<code>userservice</code></li><li>请求方式：<code>GET</code></li><li>请求路径：<code>/user/{id}</code></li><li>请求参数：<code>Long id</code></li><li>返回值类型：<code>User</code></li></ul><p>这样，<code>Feign</code>就可以帮助我们发送<code>http</code>请求，无需自己使用<code>RestTemplate</code>来发送了。</p><h4 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试" aria-hidden="true">#</a> 4）测试</h4><p><img src="`+r+`" alt="image-20210714175415087"></p><p>是不是看起来优雅多了。</p><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5）总结</h4><p>使用Feign的步骤：</p><p>① 引入依赖</p><p>② 启动类添加<code>@EnableFeignClients</code>注解</p><p>③ 编写<code>FeignClient</code>接口，添加 <code>@FeignClient</code> 注解，指定要调用哪个服务的接口</p><p>④ 使用<code>FeignClient</code>中定义的方法代替<code>RestTemplate</code></p><h3 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置" aria-hidden="true">#</a> 自定义配置</h3><p><code>Feign</code>可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的<code>@Bean</code>覆盖默认<code>Bean</code>即可。</p><p>下面以日志为例来演示如何自定义配置。</p><h4 id="配置文件方式" tabindex="-1"><a class="header-anchor" href="#配置文件方式" aria-hidden="true">#</a> 配置文件方式</h4><p>基于配置文件修改<code>feign</code>的日志级别可以针对单个服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>  
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span> 
      <span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL <span class="token comment">#  日志级别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以针对所有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>  
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span> 
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL <span class="token comment">#  日志级别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而日志的级别分为四种：</p><ul><li><code>NONE</code>：不记录任何日志信息，这是默认值。</li><li><code>BASIC</code>：仅记录请求的方法，<code>URL</code>以及响应状态码和执行时间</li><li><code>HEADERS</code>：在<code>BASIC</code>的基础上，额外记录了请求和响应的头信息</li><li><code>FULL</code>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h4 id="java代码方式" tabindex="-1"><a class="header-anchor" href="#java代码方式" aria-hidden="true">#</a> Java代码方式</h4><p>也可以基于<code>Java</code>代码来修改日志级别，先声明一个类，然后声明一个<code>Logger.Level</code>的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFeignConfiguration</span>  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">;</span> <span class="token comment">// 日志级别为BASIC</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要<strong>全局生效</strong>，将其放到启动类的<code>@EnableFeignClients</code>这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是<strong>局部生效</strong>，则把它放到对应的<code>@FeignClient</code>这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userservice&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="feign使用优化" tabindex="-1"><a class="header-anchor" href="#feign使用优化" aria-hidden="true">#</a> Feign使用优化</h2><p><code>Feign</code>底层发起<code>http</code>请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•<code>URLConnection</code>：默认实现，不支持连接池</p><p>•<code>Apache HttpClient</code> ：支持连接池</p><p>•<code>OKHttp</code>：支持连接池</p><p>因此提高<code>Feign</code>的性能主要手段就是使用<strong>连接池</strong>代替默认的<code>URLConnection</code>。</p><p>这里我们用<code>Apache</code>的<code>HttpClient</code>来演示。</p><h4 id="_1-引入依赖-1" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖-1" aria-hidden="true">#</a> 1）引入依赖</h4><p>在order-service的<code>pom</code>文件中引入<code>Apache</code>的<code>HttpClient</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--httpClient的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-配置连接池" tabindex="-1"><a class="header-anchor" href="#_2-配置连接池" aria-hidden="true">#</a> 2）配置连接池</h4><p>在order-service的<code>application.yml</code>中添加配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># default全局的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC <span class="token comment"># 日志级别，BASIC就是基本的请求和响应信息</span>
  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启feign对HttpClient的支持</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment"># 最大的连接数</span>
    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 每个路径的最大连接数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在<code>FeignClientFactoryBean</code>中的<code>loadBalance</code>方法中打断点：</p><p><img src="`+g+'" alt="image-20210714185925910"></p><p><code>Debug</code>方式启动order-service服务，可以看到这里的<code>client</code>，底层就是<code>Apache HttpClient</code>：</p><p><img src="'+k+'" alt="image-20210714190041542"></p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p><code>Feign</code>的优化：</p><p>1.日志级别尽量用<code>basic</code></p><p>2.使用<code>HttpClient</code>或<code>OKHttp</code>代替<code>URLConnection</code></p><p>① 引入<code>feign-httpClient</code>依赖</p><p>② 配置文件开启<code>httpClient</code>功能，设置连接池参数</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><p>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</p><p>自习观察可以发现，<code>Feign</code>的客户端与服务提供者的<code>controller</code>代码非常相似：</p><p><code>feign</code>客户端：</p><p><img src="'+m+'" alt="image-20210714190542730"></p><p>UserController：</p><p><img src="'+v+'" alt="image-20210714190528450"></p><p>有没有一种办法简化这种重复的代码编写呢？</p><h3 id="继承方式" tabindex="-1"><a class="header-anchor" href="#继承方式" aria-hidden="true">#</a> 继承方式</h3><p>一样的代码可以通过继承来共享：</p><p>1）定义一个<code>API</code>接口，利用定义方法，并基于<code>SpringMVC</code>注解做声明。</p><p>2）<code>Feign</code>客户端和<code>Controller</code>都集成该接口</p><p><img src="'+h+'" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此<code>Controller</code>中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="抽取方式" tabindex="-1"><a class="header-anchor" href="#抽取方式" aria-hidden="true">#</a> 抽取方式</h3><p>将<code>Feign</code>的<code>Client</code>抽取为独立模块，并且把接口有关的<code>POJO</code>、默认的<code>Feign</code>配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将<code>UserClient</code>、<code>User</code>、<code>Feign</code>的默认配置都抽取到一个<code>feign-api</code>包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="'+b+'" alt="image-20210714214041796"></p><h3 id="实现基于抽取的最佳实践" tabindex="-1"><a class="header-anchor" href="#实现基于抽取的最佳实践" aria-hidden="true">#</a> 实现基于抽取的最佳实践</h3><h4 id="_1-抽取" tabindex="-1"><a class="header-anchor" href="#_1-抽取" aria-hidden="true">#</a> 1）抽取</h4><p>首先创建一个<code>module</code>，命名为<code>feign-api</code>：</p><p><img src="'+f+'" alt="image-20210714204557771"></p><p>项目结构：</p><p><img src="'+_+`" alt="image-20210714204656214"></p><p>在<code>feign-api</code>中然后引入<code>feign</code>的<code>starter</code>依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p><img src="`+F+`" alt="image-20210714205221970"></p><h4 id="_2-在order-service中使用feign-api" tabindex="-1"><a class="header-anchor" href="#_2-在order-service中使用feign-api" aria-hidden="true">#</a> 2）在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p><p>在order-service的pom文件中中引入feign-api的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.itcast.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p><h4 id="_3-重启测试" tabindex="-1"><a class="header-anchor" href="#_3-重启测试" aria-hidden="true">#</a> 3）重启测试</h4><p>重启后，发现服务报错了：</p><p><img src="`+C+`" alt="image-20210714205623048"></p><p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p><p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p><h4 id="_4-解决扫描包问题" tabindex="-1"><a class="header-anchor" href="#_4-解决扫描包问题" aria-hidden="true">#</a> 4）解决扫描包问题</h4><p>方式一：</p><p>指定<code>Feign</code>应该扫描的包：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;cn.itcast.feign.clients&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：</p><p>指定需要加载的<code>Client</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>clients <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UserClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,121);function I(j,N){const s=c("router-link");return o(),i("div",null,[y,n("nav",L,[n("ul",null,[n("li",null,[e(s,{to:"#feign远程调用"},{default:t(()=>[a("Feign远程调用")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#feign使用"},{default:t(()=>[a("Feign使用")]),_:1})]),n("li",null,[e(s,{to:"#自定义配置"},{default:t(()=>[a("自定义配置")]),_:1})])])]),n("li",null,[e(s,{to:"#feign使用优化"},{default:t(()=>[a("Feign使用优化")]),_:1})]),n("li",null,[e(s,{to:"#最佳实践"},{default:t(()=>[a("最佳实践")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#继承方式"},{default:t(()=>[a("继承方式")]),_:1})]),n("li",null,[e(s,{to:"#抽取方式"},{default:t(()=>[a("抽取方式")]),_:1})]),n("li",null,[e(s,{to:"#实现基于抽取的最佳实践"},{default:t(()=>[a("实现基于抽取的最佳实践")]),_:1})])])])])]),S])}const B=p(x,[["render",I],["__file","Feign.html.vue"]]);export{B as default};
