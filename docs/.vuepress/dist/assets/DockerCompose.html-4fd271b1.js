import{_ as c,M as o,p as i,q as u,R as s,N as a,V as t,t as n,a1 as p}from"./framework-5866ffd3.js";const r="/FullStackNotes/assets/1674051402479-a53d1fd0-625c-4206-b98c-8f11881811c2-695ed98a.png",d="/FullStackNotes/assets/1674049445308-936302c3-c46b-4b8e-855e-bcf2ac3387fe-64057253.png",k="/FullStackNotes/assets/1674049718897-09c08775-dd51-49b9-bb0a-2e3da4e40b45-bdff5947.png",m="/FullStackNotes/assets/1674049772013-8c2cde2c-b7a4-4e46-915d-ebf851701bf9-21be2540.png",v="/FullStackNotes/assets/1674049811208-ac21384b-571f-4b8d-b9d5-a29b57a9d20b-99f1dfa0.png",b={},g=s("h1",{id:"目录",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),h={class:"table-of-contents"},y=p(`<h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h2 id="初识dockercompose" tabindex="-1"><a class="header-anchor" href="#初识dockercompose" aria-hidden="true">#</a> 初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。</p><p>将 <code>docker run</code> 中的所有参数转换为 <code>Compose</code> 形式</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>version<span class="token operator">:</span> <span class="token string">&quot;3.8&quot;</span>

services<span class="token operator">:</span>
	mysql<span class="token operator">:</span> <span class="token comment">// 对应 --name</span>
		image<span class="token operator">:</span> mysql<span class="token operator">:</span><span class="token number">5.7</span>.<span class="token number">25</span> <span class="token comment">// 对应镜像名称</span>
		environment<span class="token operator">:</span> <span class="token comment">// 对应 -e</span>
			MYSQL_ROOT_PASSWORD<span class="token operator">:</span> <span class="token number">123</span> 
		volumes<span class="token operator">:</span> <span class="token comment">// 对应 -v</span>
			- <span class="token string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span>
			- <span class="token string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span>
	web<span class="token operator">:</span>
		build<span class="token operator">:</span> .
		ports<span class="token operator">:</span>
			- <span class="token string">&quot;8090:8090&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应👇👇👇</p><p><img src="`+r+'" alt="image.png"></p><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于mysql:5.7.25镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于docker build临时构建的镜像容器，映射端口时8090</li></ul>',10),f={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},_=p('<blockquote><p>其实DockerCompose文件可以看做是将多个<code>docker run</code>命令写到一个文件，只是语法稍有差异。</p></blockquote><h2 id="部署微服务集群" tabindex="-1"><a class="header-anchor" href="#部署微服务集群" aria-hidden="true">#</a> 部署微服务集群</h2><p><strong>实现思路</strong>：</p><p>①编写<code>compose</code>文件</p><p>②修改自己的微服务项目，将数据库、<code>nacos</code>地址都命名为<code>docker-compose</code>中的服务名</p><p>③使用maven打包工具，将项目中的每个微服务都打包为 <code>.jar</code></p><p>④将打包好的<code>.jar</code>拷贝到自己微服务项目中的每一个对应的子目录中</p><p>⑤将自己的微服务项目上传至虚拟机，利用 <code>docker-compose up -d</code> 来部署</p><h3 id="compose文件" tabindex="-1"><a class="header-anchor" href="#compose文件" aria-hidden="true">#</a> compose文件</h3><p>假设现在有如下几个服务需要部署</p><p><img src="'+d+`" alt="image.png"></p><p>内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.2&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8848:8848&quot;</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span>
  <span class="token key atrule">userservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user<span class="token punctuation">-</span>service
  <span class="token key atrule">orderservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./order<span class="token punctuation">-</span>service
  <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./gateway
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;10010:10010&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，其中包含5个service服务：</p><ul><li>nacos：作为注册中心和配置中心 <ul><li>image: nacos/nacos-server： 基于nacos/nacos-server镜像构建</li><li>environment：环境变量 <ul><li>MODE: standalone：单点模式启动</li></ul></li><li>ports：端口映射，这里暴露了8848端口</li></ul></li><li>mysql：数据库 <ul><li>image: mysql:5.7.25：镜像版本是mysql:5.7.25</li><li>environment：环境变量 <ul><li>MYSQL_ROOT_PASSWORD: 123：设置数据库root账户的密码为123</li></ul></li><li>volumes：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li>userservice、orderservice、gateway：都是基于Dockerfile临时构建的</li></ul><h3 id="修改微服务配置" tabindex="-1"><a class="header-anchor" href="#修改微服务配置" aria-hidden="true">#</a> 修改微服务配置</h3><p>因为微服务将来要部署为<code>docker</code>容器，而容器之间互联不是通过<code>IP</code>地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//mysql<span class="token punctuation">:</span>3306/cloud_order<span class="token punctuation">?</span>useSSL=false
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> orderservice
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos服务地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到<code>Dockerfile</code>中的<code>jar</code>包名称都是<code>app.jar</code>，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改<code>pom.xml</code>中的打包名称来实现，每个微服务都需要修改</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 服务打包的最终名称 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后：</p><p><img src="`+k+'" alt="image.png"></p><h3 id="拷贝jar包到部署目录" tabindex="-1"><a class="header-anchor" href="#拷贝jar包到部署目录" aria-hidden="true">#</a> 拷贝jar包到部署目录</h3><p>编译打包好的<code>app.jar</code>文件，需要放到<code>Dockerfile</code>的同级目录中。</p><blockquote><p>注意：每个微服务的<code>app.jar</code>放到与服务名称对应的目录，别搞错了</p></blockquote><p><img src="'+m+'" alt="image.png"></p><h3 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h3><p>最后，我们需要将整个项目文件夹上传到虚拟机中，利用<code>DockerCompose</code>部署。</p><p>上传到任意目录：</p><p><img src="'+v+`" alt="image.png"></p><p>部署：</p><p>进入项目目录，然后运行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,35);function q(x,D){const e=o("router-link"),l=o("ExternalLinkIcon");return i(),u("div",null,[g,s("nav",h,[s("ul",null,[s("li",null,[a(e,{to:"#初识dockercompose"},{default:t(()=>[n("初识DockerCompose")]),_:1})]),s("li",null,[a(e,{to:"#部署微服务集群"},{default:t(()=>[n("部署微服务集群")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#compose文件"},{default:t(()=>[n("compose文件")]),_:1})]),s("li",null,[a(e,{to:"#修改微服务配置"},{default:t(()=>[n("修改微服务配置")]),_:1})]),s("li",null,[a(e,{to:"#打包"},{default:t(()=>[n("打包")]),_:1})]),s("li",null,[a(e,{to:"#拷贝jar包到部署目录"},{default:t(()=>[n("拷贝jar包到部署目录")]),_:1})]),s("li",null,[a(e,{to:"#部署"},{default:t(()=>[n("部署")]),_:1})])])])])]),y,s("blockquote",null,[s("p",null,[n("DockerCompose的详细语法参考官网："),s("a",f,[n("https://docs.docker.com/compose/compose-file/"),a(l)])])]),_])}const j=c(b,[["render",q],["__file","DockerCompose.html.vue"]]);export{j as default};
