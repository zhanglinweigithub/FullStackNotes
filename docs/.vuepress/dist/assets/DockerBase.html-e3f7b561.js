import{_ as l,M as t,p as c,q as d,R as n,N as e,V as i,t as a,a1 as r}from"./framework-5866ffd3.js";const o="/FullStackNotes/assets/1674040985291-d6b8f79e-106f-4de9-a67b-4dc1d6540375-7d385fc0.png",p="/FullStackNotes/assets/1674041077728-48ece357-63a0-467c-b335-d1db69afc886-bdee7bb0.png",m="/FullStackNotes/assets/1674041555641-c0ccf847-be1e-4882-b168-862d9cdcce7a-217fed98.png",u="/FullStackNotes/assets/1674042538948-9435650f-3809-4114-838d-2cef0ed54a2a-be576113.png",v="/FullStackNotes/assets/1674042764260-966d0d5a-e6b3-4119-b449-3fde2466a370-35b0dd63.png",h="/FullStackNotes/assets/1674042873555-548c7b76-8c55-49cc-a61b-3be61d4a6d86-67b50bda.png",b="/FullStackNotes/assets/1674043180233-962ed9f4-773e-4c8b-9658-2adc87a374ce-157e42ec.png",k="/FullStackNotes/assets/1674043621675-24540510-69a7-4130-bdfc-4f7c167bfe73-90a19c80.png",g={},x=n("h1",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),f={class:"table-of-contents"},_=r('<h2 id="docker基本操作" tabindex="-1"><a class="header-anchor" href="#docker基本操作" aria-hidden="true">#</a> Docker基本操作</h2><h3 id="镜像操作" tabindex="-1"><a class="header-anchor" href="#镜像操作" aria-hidden="true">#</a> 镜像操作</h3><h4 id="镜像名称" tabindex="-1"><a class="header-anchor" href="#镜像名称" aria-hidden="true">#</a> 镜像名称</h4><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p><img src="'+o+'" alt="image.png"></p><h4 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令" aria-hidden="true">#</a> 镜像命令</h4><p>常见的镜像操作命令如图</p><p><img src="'+p+`" alt="image.png"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取镜像</span>
<span class="token function">docker</span> pull nginx

<span class="token comment"># 查看拉取到的镜像</span>
<span class="token function">docker</span> images

<span class="token comment"># 导出镜像到磁盘 docker save -o [保存的目标文件名称] [镜像名称]</span>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> nginx.tar nginx:latest

<span class="token comment"># 删除本地的 nginx 镜像</span>
<span class="token function">docker</span> rmi nginx:latest

<span class="token comment"># 加载本地压缩包为镜像</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> nginx.tar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器操作" tabindex="-1"><a class="header-anchor" href="#容器操作" aria-hidden="true">#</a> 容器操作</h3><h4 id="容器相关命令" tabindex="-1"><a class="header-anchor" href="#容器相关命令" aria-hidden="true">#</a> 容器相关命令</h4><p><img src="`+m+`" alt="image.png"></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>其中：</p><ul><li>docker run：创建并运行一个容器，处于运行状态</li><li>docker pause：让一个运行的容器暂停</li><li>docker unpause：让一个容器从暂停状态恢复运行</li><li>docker stop：停止一个运行的容器</li><li>docker start：让一个停止的容器再次运行</li><li>docker rm：删除一个容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建并运行nginx容器的命令</span>
<span class="token comment"># --name 给容器起个名 -p 端口映射 -d 后台运行 nginx 镜像名称</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> mynginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx

<span class="token comment"># 进入Nginx容器，修改HTML文件内容，添加“Nginx欢迎您”</span>
<span class="token comment"># -it 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互 bash linux终端交互命令</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mynginx <span class="token function">bash</span>
<span class="token builtin class-name">cd</span> /usr/share/nginx/html
<span class="token comment"># 容器内没有vi命令，无法直接修改，我们用下面的命令来修改</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#Welcome to nginx#Nginx欢迎您#g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样</p><p><img src="`+u+'" alt="image.png"></p><p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在/usr/share/nginx/html</p><h3 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷" aria-hidden="true">#</a> 数据卷</h3><p><strong>数据卷（volume）</strong> 是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><strong>作用</strong>：将数据与容器解耦，这就要用到数据卷了。</p><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="'+v+'" alt="image.png"></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><p><img src="'+h+`" alt="image.png"></p><h4 id="数据卷命令" tabindex="-1"><a class="header-anchor" href="#数据卷命令" aria-hidden="true">#</a> 数据卷命令</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h4 id="创建和查看数据卷" tabindex="-1"><a class="header-anchor" href="#创建和查看数据卷" aria-hidden="true">#</a> 创建和查看数据卷</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建名为 html 的数据卷</span>
<span class="token function">docker</span> volume create html

<span class="token comment"># 查看所有数据</span>
<span class="token function">docker</span> volume <span class="token function">ls</span>

<span class="token comment"># 查看 html 数据卷详细信息卷</span>
<span class="token function">docker</span> volume inspect html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image.png">可以看到，我们创建的html这个数据卷关联的宿主机目录为/var/lib/docker/volumes/html/_data目录</p><h4 id="挂载数据卷" tabindex="-1"><a class="header-anchor" href="#挂载数据卷" aria-hidden="true">#</a> 挂载数据卷</h4><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run /
  <span class="token parameter variable">--name</span> mn /
  <span class="token parameter variable">-v</span> html:/root/html /
  <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80
  nginx /
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li>-v html:/root/htm ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个nginx容器，修改容器内的html目录内的index.html内容</span>
<span class="token comment"># 上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容</span>

<span class="token comment"># 创建容器并挂载数据卷到容器内的HTML目录</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> mynginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-v</span> html:/usr/share/nginx/html <span class="token parameter variable">-d</span> nginx

<span class="token comment"># 进入html数据卷所在位置，并修改HTML内容</span>
<span class="token comment"># 查看html数据卷的位置</span>
<span class="token function">docker</span> volume inspect html
<span class="token comment"># 进入该目录</span>
<span class="token builtin class-name">cd</span> /var/lib/docker/volumes/html/_data
<span class="token comment"># 修改文件</span>
<span class="token function">vi</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 ---&gt; 容器内目录</li></ul><p><img src="`+k+'" alt="image.png"></p><p>语法：</p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul>',50);function N(S,F){const s=t("router-link");return c(),d("div",null,[x,n("nav",f,[n("ul",null,[n("li",null,[e(s,{to:"#docker基本操作"},{default:i(()=>[a("Docker基本操作")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#镜像操作"},{default:i(()=>[a("镜像操作")]),_:1})]),n("li",null,[e(s,{to:"#容器操作"},{default:i(()=>[a("容器操作")]),_:1})]),n("li",null,[e(s,{to:"#数据卷"},{default:i(()=>[a("数据卷")]),_:1})])])])])]),_])}const M=l(g,[["render",N],["__file","DockerBase.html.vue"]]);export{M as default};
