import{_ as i,M as r,p as d,q as p,R as s,N as a,V as t,t as n,v as c,a1 as o}from"./framework-5866ffd3.js";const u="/FullStackNotes/assets/1676871692271-1afd24fb-1279-4f0f-b5b2-2861f66713d1-4a004d7a.png",m="/FullStackNotes/assets/1676872012670-528a6e00-35c1-45f3-862f-d16b39448d13-8f236548.png",v="/FullStackNotes/assets/1676872752771-5407ace4-4002-47ef-ae83-2f5b8a966727-9d34f74c.png",b="/FullStackNotes/assets/1676872996481-89f6337c-45f6-42a9-8716-21ea99a344e4-2749f2d6.png",k="/FullStackNotes/assets/image-20230406195636025-93300d6a.png",g="/FullStackNotes/assets/image-20230406200537517-15e2eab3.png",h={},f=s("p",null,[s("strong",null,"命令比较多，建议使用 CTRL + F 搜索")],-1),O=s("h1",{id:"目录",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),N={class:"table-of-contents"},I=o('<h1 id="docker命令汇总" tabindex="-1"><a class="header-anchor" href="#docker命令汇总" aria-hidden="true">#</a> Docker命令汇总</h1><p><img src="'+u+`" alt="image.png"></p><p>镜像仓库用来保存镜像，可分为远程镜像仓库和本地镜像仓库。</p><p>通过<code>pull</code>命令可以把远程仓库的镜像下载到本地，通过<code>push</code>命令可以把本地仓库的镜像推送到远程</p><p>本地仓库中的镜像可以用来创建容器，一个镜像可以创建多个容器</p><p>容器也可以通过<code>commit</code>命令打包成镜像，提交到本地仓库。</p><h2 id="操作远程仓库的命令" tabindex="-1"><a class="header-anchor" href="#操作远程仓库的命令" aria-hidden="true">#</a> 操作远程仓库的命令</h2><h3 id="login-登录到远程仓库" tabindex="-1"><a class="header-anchor" href="#login-登录到远程仓库" aria-hidden="true">#</a> login：登录到远程仓库</h3><p>login命令可以登录到远程仓库，登录到远程仓库后可可以拉取仓库的镜像了</p><p><strong>login语法</strong></p><blockquote><p><strong>docker login [OPTIONS] [SERVER]</strong><strong>SERVER</strong>：远程仓库地址，默认为docker官方仓库 <strong>OPTIONS</strong>：</p><ul><li><code>-u</code> string：用户名</li><li><code>-p</code> string：密码</li></ul></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login <span class="token parameter variable">-u</span> linwei <span class="token parameter variable">-p</span> <span class="token number">123456</span> <span class="token number">192.168</span>.10.10/docker-lib
<span class="token function">docker</span> login <span class="token number">192.168</span>.10.10/docker-lib
<span class="token function">docker</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search-从远程仓库搜索镜像" tabindex="-1"><a class="header-anchor" href="#search-从远程仓库搜索镜像" aria-hidden="true">#</a> search：从远程仓库搜索镜像</h3><p><strong>search语法</strong></p>`,14),T=s("p",null,[n("**docker search [OPTIONS] TERM ** "),s("strong",null,"OPTIONS"),n(" ：")],-1),A=o("<li><code>-f </code>参数表示根据条件过滤搜索出来的镜像 docker search -f KEY=VALUE TERM</li><li><code>KEY</code><ul><li><code>stars</code> int: 根据热度过滤，如：stars=10表示过滤热度大于10的镜像</li><li><code>is-automated</code> boolean: 根据是否自动构建过滤，如：is-automated=false表示过滤非自动构建的镜像</li><li><code>is-official</code> boolean: 根据是否官方发布过滤，如：is-official=false表示过滤非官方发布的镜像</li></ul></li>",2),E=s("code",null," --format",-1),y=s("li",null,[s("code",null,"COLUMN"),s("ul",null,[s("li",null,".Name ：显示镜像的名称列"),s("li",null,".Description ：显示镜像的描述列"),s("li",null,".StarCount ：显示镜像的热度一列"),s("li",null,".IsOfficial ：显示镜像是否是官方发布一列"),s("li",null,".IsAutomated ：显示镜像是否是自动构建一列")])],-1),_=o(`<p><strong>TERM</strong> ：镜像的关键词</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜索centos镜像</span>
<span class="token function">docker</span> search centos
<span class="token comment"># 搜索centos镜像，只展示5个</span>
<span class="token function">docker</span> search <span class="token parameter variable">--limit</span> <span class="token number">5</span> centos
<span class="token comment"># 搜索热度大于100并且不是自动构建的centos镜像</span>
<span class="token function">docker</span> search <span class="token parameter variable">-f</span> <span class="token assign-left variable">stars</span><span class="token operator">=</span><span class="token number">100</span> <span class="token parameter variable">-f</span> is-automated<span class="token operator">=</span>true centos
<span class="token comment"># 搜索非官方发布的centos镜像，搜索结果只展示名称和热度，列之间用TAB键隔开</span>
<span class="token function">docker</span> search <span class="token parameter variable">-f</span> is-official<span class="token operator">=</span>false <span class="token parameter variable">--format</span> <span class="token string">&quot;table{{.Name}}<span class="token entity" title="\\t">\\t</span>{{.StarCount}}&quot;</span> centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>search命令可以从远程仓库搜索镜像</p><p><img src="`+m+`" alt="image.png"></p><p>列含义：</p><table><thead><tr><th><strong>NAME</strong></th><th><strong>DESCRIPTION</strong></th><th><strong>STARS</strong></th><th><strong>OFFICIAL</strong></th><th><strong>AUTOMATED</strong></th></tr></thead><tbody><tr><td>镜像名称</td><td>镜像描述</td><td>镜像热度，类似于github的 starts</td><td>是否是官方发布</td><td>是否自动构建</td></tr></tbody></table><h3 id="push-把本地镜像推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#push-把本地镜像推送到远程仓库" aria-hidden="true">#</a> push：把本地镜像推送到远程仓库</h3><p>push可以把本地仓库中的镜像推送到远程仓库，不过需要先登录远程仓库</p><p><strong>push语法</strong></p><blockquote><p><strong>docker push [OPTIONS] NAME[:TAG]</strong><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>--disable-content-trust</code> ：推送时远程仓库不校验签名，默认为true</li></ul></blockquote><p><strong>NAME</strong> ：镜像名称</p><blockquote><p><strong>TAG</strong> ：镜像版本号，可省略，默认为latest</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push my-image:1.1.0
<span class="token function">docker</span> push my-image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pull-从远程仓库拉取或更新镜像" tabindex="-1"><a class="header-anchor" href="#pull-从远程仓库拉取或更新镜像" aria-hidden="true">#</a> pull：从远程仓库拉取或更新镜像</h3><p>pull命令可以从远程仓库拉取镜像，如果本地仓库已经存在该镜像，则会更新</p><p><strong>pull语法</strong></p><blockquote><p><strong>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</strong><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-a</code> : 拉取镜像的所有版本号</li><li><code>--disable-content-trust</code> ：推送时远程仓库不校验签名，默认为 true</li><li><code>-q</code> : 安静模式，推送过程中不展示详细信息</li></ul><p><strong>NAME</strong> ：镜像名称 <strong>TAG</strong> ：镜像版本号，可省略，默认为latest <strong>DIGEST</strong> ： 镜像的摘要，每个镜像都有对应的名称、id、摘要信息，每个摘要信息能唯一代表一个镜像</p></blockquote><p><img src="`+v+`" alt="image.png"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull centos
<span class="token function">docker</span> pull <span class="token parameter variable">-q</span> centos:5.11
<span class="token function">docker</span> pull <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span> centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作本地镜像的命令" tabindex="-1"><a class="header-anchor" href="#操作本地镜像的命令" aria-hidden="true">#</a> 操作本地镜像的命令</h2><h3 id="images-显示所有镜像" tabindex="-1"><a class="header-anchor" href="#images-显示所有镜像" aria-hidden="true">#</a> images：显示所有镜像</h3><p>images命令可以显示本地存在的所有镜像</p><p><strong>images语法</strong></p>`,23),x=s("p",null,[s("strong",null,"docker images [OPTIONS] [REPOSITORY[:TAG]]"),s("strong",null,"OPTIONS"),n(" ：可选参数")],-1),R=o("<li><code>-a</code> : 显示所有镜像，包含中间映像（默认情况下中间映像是隐藏的）</li><li><code>-f</code> filter: 根据条件过滤镜像 <ul><li>docker images -f KEY=VALUE [REPOSITORY[:TAG]]</li><li>KEY： <ul><li><code>dangling</code> boolean：过滤悬挂的镜像，如：dangling=true表示只显示悬挂的镜像</li><li><code>label</code> string: 根据标签过滤，如：label=version表示显示有version标签的镜像，label=version=1.0 表示显示version=1.0的镜像</li><li><code>before</code> image: 显示在某个镜像之前创建的镜像，如： before=centos:5.8表示显示在centos:5.8这个镜像之前创建的镜像</li><li><code>since</code> image: 显示在某个 存在之后创建的镜像，如：since=centos:5.8表示显示在centos:5.8这个镜像存在之后的镜像</li><li><code>reference</code> string：模糊匹配，如：reference=cent:5, 显示名称已cent开头版本号已5开头的 镜像</li></ul></li></ul></li><li><code>-q</code> : 只显示镜像id</li><li><code>no-trunc</code> ：显示完整的镜像id。默认情况下，镜 像的id只显示前12位，no-trunc参数会将镜像id完整的显示出来</li><li><code>--digests</code> ：显示镜像的摘要 信息</li>",5),C=s("code",null,"--format",-1),S=o("<li>COLUMN: <ul><li><code> .ID</code> ：显示镜像的名称列</li><li><code>.Repository</code> ：显示镜像的描述列</li><li><code>.Tag</code> ：显示镜像的热度一列</li><li><code>.Digest</code> ：显示镜像是否是官方发布一列</li><li><code>.CreatedSince</code> ：显示镜像是否是自动构建一列</li><li><code>.CreatedAt</code> ：显示镜像是否是自动构建一列</li><li><code>.Size</code> ：显示镜像是否是自动构建一列</li></ul></li>",1),q=s("p",null,[s("strong",null,"REPOSITORY"),n(" ：镜像路径 "),s("strong",null,"TAG"),n(" ：镜像版本")],-1),P=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 显示本地所有镜像</span>
<span class="token function">docker</span> images
<span class="token comment"># 显示本地所有镜像，只显示id列并且不截断</span>
<span class="token function">docker</span> images <span class="token parameter variable">-q</span> --no-trunc
<span class="token comment"># 显示centos镜像信息</span>
<span class="token function">docker</span> images centos
<span class="token comment"># 显示列中包含cent关键字的所有镜像</span>
<span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> cent
<span class="token comment"># 显示本地所有镜像，并显示摘要列</span>
<span class="token function">docker</span> images <span class="token parameter variable">--digests</span>
<span class="token comment"># 显示在cengos:latest镜像之后创建的latest版本的所有镜像</span>
<span class="token function">docker</span> images <span class="token parameter variable">-f</span> <span class="token assign-left variable">since</span><span class="token operator">=</span>centos:latest <span class="token parameter variable">-f</span> <span class="token assign-left variable">reference</span><span class="token operator">=</span>*:latest
<span class="token comment"># 显示所有镜像信息，只显示镜像id、摘要、创建时间3列，列之间用TAB键隔开</span>
<span class="token function">docker</span> images <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Digest}}<span class="token entity" title="\\t">\\t</span>{{.CreatedAt}}&quot;</span>
<span class="token comment"># 显示在centos:5.11镜像之前创建的镜像，只显示镜像仓库路径、版本号、创建时间3列，列之间用TAB键隔开</span>
<span class="token function">docker</span> images <span class="token parameter variable">-f</span> <span class="token assign-left variable">before</span><span class="token operator">=</span>centos:5.11 <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.Repository}}<span class="token entity" title="\\t">\\t</span>{{.Tag}}<span class="token entity" title="\\t">\\t</span>{{.CreatedAt}}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image.png"></p><p>列含义：</p><table><thead><tr><th><strong>REPOSITORY</strong></th><th><strong>TAG</strong></th><th><strong>IMAGE ID</strong></th><th><strong>CREATED</strong></th><th><strong>SIZE</strong></th></tr></thead><tbody><tr><td>仓库路径</td><td>镜像版本</td><td>镜像id</td><td>创建时间</td><td>镜像大小</td></tr></tbody></table><h3 id="rmi-删除本地镜像" tabindex="-1"><a class="header-anchor" href="#rmi-删除本地镜像" aria-hidden="true">#</a> rmi：删除本地镜像</h3><p>rmi命令可以删除一个或多个本地镜像，通常情况应该用rm表示删除命令，但是在doker命令中rm 表示删除容 器，所以用rmi表示删除镜像，其中的 i 是image的首字母</p><p><strong>rmi语法</strong></p><blockquote><p><strong>docker rmi [OPTIONS] IMAGE [IMAGE...]</strong><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-f </code>: 强制删除，如果镜像有对应的容器正在运行，则不允许直接删除镜像，需要强制删除</li><li><code>-- no-prune</code> ：不删除该镜像的过程镜像，默认是删除的</li></ul><p><strong>IMAGE</strong> ：镜像id或仓库路径名称</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除centos镜像</span>
<span class="token function">docker</span> rmi tomcat
<span class="token comment"># 删除centos:5.11镜像</span>
<span class="token function">docker</span> rmi centos:5.11
<span class="token comment"># 删除id为621ceef7494a的镜像</span>
<span class="token function">docker</span> rmi 621ceef7494a
<span class="token comment"># 同时删除tomcat、centos和redis镜像</span>
<span class="token function">docker</span> rmi tomcat centos redis
<span class="token comment"># 强制删除tomcat镜像，就算此时有tomcat容器正在运行，镜像也会被删除</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tag-标记镜像-将其归入仓库" tabindex="-1"><a class="header-anchor" href="#tag-标记镜像-将其归入仓库" aria-hidden="true">#</a> tag：标记镜像，将其归入仓库</h3><p><code>tag</code>命令可以基于一个镜像，创建一个新版本的镜像并归入本地仓库，此时该镜像在仓库中存在两个 版本，可以 根据这两个镜像创建不同的容器</p><p><strong>tag语法</strong></p><blockquote><p><strong>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</strong><strong>SOURCE_IMAGE</strong> : 原镜像 <strong>TARGET_IMAGE</strong> ：新镜像 <strong>TAG</strong> ：镜像的版本号</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 基于redis:latest镜像创建my-redis1.0镜像，并把新镜像归入redis-lib仓库</span>
<span class="token function">docker</span> tag redis:latest redis-lib/my-redis:1.0
<span class="token comment"># 基于621ceef7494a镜像创建my-redis:test-100m镜像，并把新镜像归入redis-lib仓库</span>
<span class="token function">docker</span> tag 621ceef7494a redis-lib/my-redis:test-100m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="history-查看镜像的创建历史" tabindex="-1"><a class="header-anchor" href="#history-查看镜像的创建历史" aria-hidden="true">#</a> history：查看镜像的创建历史</h3><p>history命令用来查看某一个镜像的创建历史，也就是镜像的提交记录</p><p><strong>history语法</strong></p>`,17),M=s("p",null,[s("strong",null,"docker history [OPTIONS] IMAGE"),s("strong",null,"OPTIONS"),n(" ：可选参数")],-1),G=s("li",null,[s("code",null,"-H"),n(" boolean: 已可读的格式打印日期和大小，默认为true")],-1),D=s("li",null,[s("code",null,"-q"),n(" : 只显示镜像id")],-1),w=s("li",null,[s("code",null,"no-trunc"),n(" ：输出 结果不截取，正常情况下查看到的结果如果某一列太长会被截取")],-1),L=s("code",null,"--format",-1),U=o("<li>COLUMN <ul><li><code>.ID </code>：镜像的ID</li><li><code>.CreatedSince</code> ：镜像创建的时长</li><li><code>.CreatedAt</code> ：镜像创建的时间戳</li><li><code>.CreatedBy</code> ：镜像创建使用的命令</li><li><code> .Size</code> ：镜像的大小</li><li><code> .Comment</code> ：镜像的评论</li></ul></li>",1),Y=s("p",null,[s("strong",null,"IMAGE"),n(" ：镜像")],-1),B=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 显示centos镜像的创建历史</span>
<span class="token function">docker</span> <span class="token function">history</span> centos
<span class="token comment"># 显示centos镜像的创建历史，时间和大小转换为人类可读的格式</span>
<span class="token function">docker</span> <span class="token function">history</span> <span class="token parameter variable">-H</span><span class="token operator">=</span>true centos
<span class="token comment"># 显示centos镜像的创建历史，只显示ID、创建时间戳和创建时的命令3列，列之间使用TAB键隔开</span>
<span class="token function">docker</span> <span class="token function">history</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.CreatedAt}}<span class="token entity" title="\\t">\\t</span>{{.CreatedBy}}&quot;</span> centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="save-将镜像打包成文件" tabindex="-1"><a class="header-anchor" href="#save-将镜像打包成文件" aria-hidden="true">#</a> save：将镜像打包成文件</h3><p>save命令可以把一个镜像或多个镜像打包到一个文件中，需要特别注意和export命令的区分</p><ul><li>save命令打包的是镜像，包含镜像的所有信息</li><li>exprot命令打包的是容器，只是保存容器当时的快照，历史记录和元数据信息将会丢失</li></ul><p><strong>save语法</strong></p><blockquote><p><strong>docker save [OPTIONS] IMAGE [IMAGE...]</strong><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-o</code> string: 指定目标文件，和linux原生命令 &gt; 有相同作用</li></ul><p><strong>IMAGE</strong> ：镜像</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将centos镜像打包成my-images.tar</span>
<span class="token function">docker</span> save centos <span class="token operator">&gt;</span> /home/my-images.tar
<span class="token comment"># 将centos镜像和redis镜像打包到my-images.tar</span>
<span class="token function">docker</span> save centos redis <span class="token operator">&gt;</span> /home/my-images.tar
<span class="token comment"># 将centos镜像和redis镜像打包到my-images.tar</span>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> /home/my-images.tar centos redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="load-从指定文件中加载镜像" tabindex="-1"><a class="header-anchor" href="#load-从指定文件中加载镜像" aria-hidden="true">#</a> load：从指定文件中加载镜像</h3><p>load命令可以从指定文件中加载镜像，该文件需要是save命令保存的文件</p><p><strong>load语法</strong></p><blockquote><p><strong>docker load [OPTIONS]</strong><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-i</code> string: 指定文件的路径</li><li><code>-q</code> ：安静模式输出</li></ul></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从my-images.tar文件中加载镜像</span>
<span class="token function">docker</span> load <span class="token operator">&lt;</span> /home/my-images.tar
<span class="token comment"># 从my-images.tar文件中加载镜像</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> /home/my-images.tar
<span class="token comment"># 使用安静模式从my-images.tar文件中加载镜像</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> /home/my-images.tar <span class="token parameter variable">-q</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作容器的命令" tabindex="-1"><a class="header-anchor" href="#操作容器的命令" aria-hidden="true">#</a> 操作容器的命令</h2><h3 id="run-创建一个容器并运行" tabindex="-1"><a class="header-anchor" href="#run-创建一个容器并运行" aria-hidden="true">#</a> run：创建一个容器并运行</h3><p>run命令可以创建一个容器并运行，如果创建容器的镜像不存在则会从远程镜像仓库下载</p><p>运行容器的同时还能给容器发送一个命令</p><p><strong>run语法</strong></p><blockquote><p><strong>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</strong><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-i </code>: 以交互模式运行，通常与<code>-t</code>一起使用</li><li><code>-t</code> : 为容器分配一个伪终端，通常与<code>-i</code>一起使用</li><li><code>-d</code> : 后台模式运行容器，并返回容器id</li><li><code>-p</code> list: 指定端口映射，格式为 <code>宿主机端口:容器端口</code></li><li><code>-P</code> : 随机分配端口映射</li><li><code>--name</code> string: 给容器指定一个名称</li><li><code>-m</code> bytes: 限制容器可以使用的内存大 小，单位可选b、k、m、g</li><li><code>-v</code> list: 把宿主机的磁盘路径挂载到容器的某个路径</li><li><code>--volumes-from</code> list: 绑定别的容器某个路径到此容器的某个路径</li><li><code>-w</code> : 指定容器的工作目录，默认是根目录</li><li><code>--rm</code> : 当容器停止运行时自动删除</li><li><code>--hostname</code> string: 指定容器的主机名</li></ul><p><strong>IMAGE</strong> ：镜像 <strong>COMMAND</strong> ：需要运行的命令 <strong>ARG</strong> ：命令的参数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个centos容器，并运行</span>
<span class="token function">docker</span> run centos
<span class="token comment"># 创建一个centos容器，并以交互模式运行</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> centos
<span class="token comment"># 创建一个centos容器，并后台模式运行</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos
<span class="token comment"># 创建一个centos容器，重命名为my-centos，并以交互模式运行，并在容器中运行bash命令</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-centos centos /bin/bash
<span class="token comment"># 创建一个spring-boot容器并以交互模式运行，容器重命名为my-boot，并把主机的80端口映射到容</span>
<span class="token comment"># 器的8080端口，此时访问主机ip+80端口即可访问容器中的sping-boot项目</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-boot <span class="token parameter variable">-p</span> <span class="token number">80</span>:8080 spring-boot
<span class="token comment"># 创建一个spring-boot容器并以交互模式运行，容器重命名为my-boot，并把主机/logs/my-boot/的</span>
<span class="token comment"># 目录绑定到容器的/logs目录，此时my-boot项目的日志可以在主机的/logs/my-boot目录中查看</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-boot <span class="token parameter variable">-v</span> /logs/my-boot/:/logs/ spring-boot
<span class="token comment"># 创建一个spring-boot容器并以交互模式运行，容器重命名为my-boot；把主机的80端口映射到容器</span>
<span class="token comment"># 的8080端口；把主机/logs/my-boot/的路径绑定到容器的/logs目录；给容器分配最大500M的内</span>
<span class="token comment"># 存；指定spring-boot的配置文件为test</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-boot <span class="token parameter variable">-p</span> <span class="token number">80</span>:8080 <span class="token parameter variable">-v</span> /logs/my-boot/:/logs/ <span class="token parameter variable">-m</span> 500M spring-boot <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start-启动容器" tabindex="-1"><a class="header-anchor" href="#start-启动容器" aria-hidden="true">#</a> start：启动容器</h3><p>start命令可以启动一个或多个已经停止的容器</p><p><strong>start语法</strong></p><blockquote><p>docker start [OPTIONS] CONTAINER [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li>-<code>a</code> : 将容器的标准输出或标准错误附加到终端</li><li><code>-i</code> : 为容器附加一个标准输入终端</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动已经停止的tomcat容器</span>
<span class="token function">docker</span> start tomcat
<span class="token comment"># 启动已经停止的tomcat和centos容器</span>
<span class="token function">docker</span> start tomcat centos
<span class="token comment"># 启动已经停止的my-spring-boot容器，并输出日志</span>
<span class="token function">docker</span> start <span class="token parameter variable">-a</span> my-spring-boot
<span class="token comment"># 启动已经停止centos容器，并附加一个输入终端</span>
<span class="token function">docker</span> start <span class="token parameter variable">-i</span> centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="restart-重启容器" tabindex="-1"><a class="header-anchor" href="#restart-重启容器" aria-hidden="true">#</a> restart：重启容器</h3><p>restart可以对一个或多个容器进行重启。</p><p>如果容器是未启动的则会启动，如果是正在运行中的，则 会重启</p><p><strong>restart语法</strong></p><blockquote><p>docker restart [OPTIONS] CONTAINER [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-t</code> int: 在重启之前等待几秒，默认10秒</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重启centos容器</span>
<span class="token function">docker</span> restart centos
<span class="token comment"># 20秒之后重启centos和tomcat容器，如果20秒内还未停止则直接杀死然后重启</span>
<span class="token function">docker</span> restart <span class="token parameter variable">-t</span> <span class="token number">20</span> centos tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stop-停止容器" tabindex="-1"><a class="header-anchor" href="#stop-停止容器" aria-hidden="true">#</a> stop：停止容器</h3><p><code>stop</code>命令可以停止一个或多个正在运行的容器</p><p><code>kill</code>命令也可以用来停止容器</p><p>不同的是：</p><ul><li><code>stop</code>命令允许容器在停止之前有一定的时间来进行额外操作，如释放链接、关闭请求等</li><li><code>kill</code>命令则会直接强制杀死容器</li></ul><p><strong>stop语法</strong></p><blockquote><p>docker stop [OPTIONS] CONTAINER [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-t</code> int: 等待n秒后如果还没停止，直接杀死，默认10秒</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 停止tomcat容器</span>
<span class="token function">docker</span> stop tomcat
<span class="token comment"># 停止tomcat和centos容器</span>
<span class="token function">docker</span> stop tomcat centos
<span class="token comment"># 停止tomcat容器，如果5秒内还未停止则直接杀死</span>
<span class="token function">docker</span> stop <span class="token parameter variable">-t</span> <span class="token number">5</span> tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kill-杀死容器" tabindex="-1"><a class="header-anchor" href="#kill-杀死容器" aria-hidden="true">#</a> kill：杀死容器</h3><p>kill命令可以杀死一个或多个正在运行的容器</p><p><strong>kill语法</strong></p><blockquote><p>docker kill [OPTIONS] CONTAINER [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-s</code> string: 给容器发送一个信号，信号编号和<code>linux</code>原生命令<code>kill</code>的信号编号一致，默认值9 <ul><li><code>1</code> ：杀死并重新加载，也可用 <code>HUP</code> 表示</li><li><code>9</code> ：强制杀死，也可用 <code>KILL</code> 表示，默认值</li><li><code>15</code> ：正 常停止，也可用 <code>TERM</code> 表示</li></ul></li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 杀死tomcat容器</span>
<span class="token function">docker</span> <span class="token function">kill</span> tomcat
<span class="token comment"># 强制杀死tomcat容器</span>
<span class="token function">docker</span> <span class="token function">kill</span> <span class="token parameter variable">-s</span> <span class="token number">9</span> tomcat
<span class="token comment"># 强制杀死tomcat容器</span>
<span class="token function">docker</span> <span class="token function">kill</span> <span class="token parameter variable">-s</span> KILL tomcat
<span class="token comment"># 杀死tomcat和centos容器</span>
<span class="token function">docker</span> <span class="token function">kill</span> tomcat centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rm-删除容器" tabindex="-1"><a class="header-anchor" href="#rm-删除容器" aria-hidden="true">#</a> rm：删除容器</h3><p><code>rm</code>命令可以删除一个或多个容器 如果容器正在运行，则需要通过<code>-f</code>参数强制删除</p><p><strong>rm语法</strong></p><blockquote><p>docker rm [OPTIONS] CONTAINER [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-f</code> ：强制删除，即使容器正在运行也可以删除</li><li><code>-l</code> ：删除容器之间的网络关系，而不是容器本 身</li><li><code>-v</code> : 删除容器和它挂载的卷</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除centos容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> centos
<span class="token comment"># 强制删除centos容器，即使容器正在运行也会被删除</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> centos
<span class="token comment"># 删除centos容器，并删除它挂载的卷</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> centos
<span class="token comment"># 删除所有已经停止的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
<span class="token comment"># 移除容器my-nginx对容器my-db的连接，连接名db</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-l</span> db 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pause-暂停容器" tabindex="-1"><a class="header-anchor" href="#pause-暂停容器" aria-hidden="true">#</a> pause：暂停容器</h3><p>pause命令可以暂停一个或多个正在运行的容器</p><p><strong>pause语法</strong></p><blockquote><p>docker pause CONTAINER [CONTAINER...]</p><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 暂停正在运行的centos容器</span>
<span class="token function">docker</span> pause centos
<span class="token comment"># 暂停正在运行的centos和tomcat容器</span>
<span class="token function">docker</span> pause centos tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unpause-取消暂停容器" tabindex="-1"><a class="header-anchor" href="#unpause-取消暂停容器" aria-hidden="true">#</a> unpause：取消暂停容器</h3><p><code>unpause</code>命令可以对一个或多个暂停的容器取消暂停</p><p><strong>pause语法</strong></p><blockquote><p>docker unpause CONTAINER [CONTAINER...]</p><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 取消暂停的centos容器</span>
<span class="token function">docker</span> unpause centos
<span class="token comment"># 取消暂停centos和tomcat容器</span>
<span class="token function">docker</span> unpause centos tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-创建一个容器" tabindex="-1"><a class="header-anchor" href="#create-创建一个容器" aria-hidden="true">#</a> create：创建一个容器</h3><p><code>create</code>命令可以创建一个容器，但不运行它</p><p>在需要的时候可以使用<code>start</code>命令启动 和<code>run</code>命令的用法几乎一致，都会创建一个容器，如果容器依赖的镜像不存在都会从远程仓库拉取</p><p><code>run</code>命令创建容器后会运行容器</p><p><code>create</code>命令只是创建容器，不运行</p><p><strong>create语法</strong></p><blockquote><p>docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>create</code>命令和<code>run</code>命令的可选参数一样</li></ul><p><strong>IMAGE</strong> ：镜像</p><p><strong>COMMAND</strong> ：需要运行的命令</p><p><strong>ARG</strong> ：命令的参数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个centos容器</span>
<span class="token function">docker</span> create centos
<span class="token comment"># 创建一个centos容器，start启动时以交互模式运行</span>
<span class="token function">docker</span> create <span class="token parameter variable">-it</span> centos
<span class="token comment"># 创建一个centos容器，start启动时后台模式运行</span>
<span class="token function">docker</span> create <span class="token parameter variable">-d</span> centos
<span class="token comment"># 创建一个centos容器，重命名为my-centos，start时以交互模式运行，并在容器中运行bash命令</span>
<span class="token function">docker</span> create <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-centos centos /bin/bash

<span class="token comment"># 创建一个spring-boot容器，重命名为my-boot，并把主机的80端口映射到容器的8080端口，start</span>
<span class="token comment"># 时以交互模式运行，此时访问主机ip+80端口即可访问容器中的sping-boot项目</span>
<span class="token function">docker</span> create <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-boot <span class="token parameter variable">-p</span> <span class="token number">80</span>:8080 spring-boot

<span class="token comment"># 创建一个spring-boot容器，容器重命名为my-boot，并把主机/logs/my-boot/的目录绑定到容器</span>
<span class="token comment"># 的/logs目录，start时以交互模式运行，此时my-boot项目的日志可以在主机的/logs/my-boot目录</span>
<span class="token comment"># 中查看</span>
<span class="token function">docker</span> create <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-boot <span class="token parameter variable">-v</span> /logs/my-boot/:/logs/ spring-boot

<span class="token comment"># 创建一个spring-boot容器，容器重命名为my-boot；把主机的80端口映射到容器的8080端口；把</span>
<span class="token comment"># 主机/logs/my-boot/的路径绑定到容器的/logs目录；给容器分配最大500M的内存；指定spring-boot的配置文件为test；# start时以交互模式运行</span>
<span class="token function">docker</span> create <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-boot <span class="token parameter variable">-p</span> <span class="token number">80</span>:8080 <span class="token parameter variable">-v</span> /logs/my-boot/:/logs/ <span class="token parameter variable">-m</span> 500M spring-boot <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec-在容器中执行命令" tabindex="-1"><a class="header-anchor" href="#exec-在容器中执行命令" aria-hidden="true">#</a> exec：在容器中执行命令</h3><p>exce命令可以在一个运行中的容器中执行一个命令</p><p><strong>exec语法</strong></p><blockquote><p>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-d</code> : 命令在后台运行</li><li>-i ：保持标准输入，通常和 <code>-t</code> 一起使用</li><li><code>-t</code> : 分配一个伪终端，通常和 <code>- i</code> 一起使用</li><li><code>-w</code> string: 指定容器的路径</li></ul><p><strong>CONTAINER</strong> ：容器</p><p><strong>COMMAND</strong> ：要执行的命令</p><p><strong>ARG</strong> ：命令的参数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在centos容器中运行pwd命令</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> centos <span class="token builtin class-name">pwd</span>
<span class="token comment"># 为centos容器分配一个输入终端</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> centos /bin/bash
<span class="token comment"># 在centos镜像中的bin目录执行ls命令</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-w</span> /bin centos <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ps-查看容器列表" tabindex="-1"><a class="header-anchor" href="#ps-查看容器列表" aria-hidden="true">#</a> ps：查看容器列表</h3><p>ps命令可以列出所有容器的列表，查看容器的基本信息。</p><p>不加任何参数的情况下，默认只展示正在运行的容器</p><p><img src="`+k+`" alt="image-20230406195636025"></p><p>列含义如下</p><table><thead><tr><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>容器id</td><td>对应的镜 像</td><td>容器启动时运行的 命令</td><td>创建时间</td><td>绑定的的端 口</td><td>容器名 称</td></tr></tbody></table><p><strong>ps语法</strong></p><blockquote><p>docker ps [OPTIONS]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><p><code>-a</code> : 显示所有容器，默认只显示正在运行的</p></li><li><p><code>-f</code> filter: 根据条件过滤容器，语法如下</p></li><li><p>docker ps -f KEY=VALUE</p></li><li><p>KEY的可选值如下</p><ul><li><code>id</code> : 根据容器id过滤</li><li><code>name</code> : 查看容器名称中包含给定字段的容器</li><li><code>exited</code> : 根据容器退出的错 误码进行过滤</li><li><code>status</code> : 根据容器的状态进行过滤，状态可选值有：created、paused、 exited、dead、running、restarting、removing</li><li><code>before</code> : 只显示在某个容器之前创建的容器</li><li><code>since</code> : 只显示在某个容器之后创建的容器</li><li><code>volume</code> : 过滤绑定了某个目录的容器，只针对运行 中的容器</li><li><code>publish</code> : 根据宿主机端口过滤，只针对运行中的容器</li><li><code>expose</code> : 根据容器端口过滤，只针对运行中的容器</li></ul></li><li><p><code>-n</code> int：显示最后创建的n个容器，包含所有状态</p></li><li><p><code>-l</code> : 显示最新创建的容器，包含所有状态</p></li><li><p><code>-q</code> : 只显示容器id</p></li><li><p><code>-s</code> : 显示容器大小，默认不显示该列</p></li><li><p><code>--no-trunc</code> ：显示内容不截断，默认情 况下显示的容器是截断后的信息</p></li></ul></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看运行中的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment"># 查看所有容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
<span class="token comment"># 查看所有容器，并显示容器大小</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-s</span>
<span class="token comment"># 查看所有容器，显示内容不截断</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> --no-trunc
<span class="token comment"># 查看容器名称中包含cent的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>cent
<span class="token comment"># 查看状态是created的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">status</span><span class="token operator">=</span>created
<span class="token comment"># 查看在centos之前创建的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">before</span><span class="token operator">=</span>centos
<span class="token comment"># 查看绑定了宿主机80端口并且正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">publish</span><span class="token operator">=</span><span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inspect-获取容器或镜像的元数据" tabindex="-1"><a class="header-anchor" href="#inspect-获取容器或镜像的元数据" aria-hidden="true">#</a> inspect：获取容器或镜像的元数据</h3><p><code>inspect</code>命令可以获取一个或多个容器或者镜像的元数据信息</p><p>元数据信息可以理解为容器或者镜像的详情，它比 <code>ps</code> 命令显示的内容要详细的多。</p><p>比如说端口映 射、挂载目录等，显示格式为<code>json</code>类型</p><p><strong>inspect语法</strong></p><blockquote><p>docker inspect [OPTIONS] CONTAINER|IMAGE [CONTAINER|IMAGE...]</p><p><strong>OPTIONS</strong> ：可选参数</p><p><code>-f</code> string: 格式化输出结果，inspect默认显示整个文件的详情，-f参数可以指定只显示某些属 性</p><p><code>--s</code> : 只对容器有效，显示容器的配置文件行数和大小，显示的结果中会多出<code>SizeRw</code>、 <code>SizeRootFs</code>两个参数</p><p><code>--type</code> string: 指定要inspect的类型，container表示容器，image表示 镜像，默认是容器。</p><p>比如我有一个tomcat镜像，同时有一个名称为tomcat的容器，就可以用-- type参数来指定要inspect是tomcat容器还是tomcat镜像</p><p><strong>CONTAINER</strong> ：容器</p><p><strong>IMAGE</strong> ：镜像</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看tomcat容器的元数据信息</span>
<span class="token function">docker</span> inspect tomcat
<span class="token comment"># 查看tomcat镜像的元数据信息</span>
<span class="token function">docker</span> inspect <span class="token parameter variable">--type</span><span class="token operator">=</span>image tomcat
<span class="token comment"># 查看tomcat容器的ip地址</span>
<span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span>
tomcat
<span class="token comment"># 查看tomcat容器的ip地址</span>
<span class="token function">docker</span> inspect tomcat <span class="token operator">|</span> <span class="token function">grep</span> IPAddress
<span class="token comment"># 查看tomcat容器的端口映射</span>
<span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token string">&quot;{{.HostConfig.PortBindings}}&quot;</span> tomcat
<span class="token comment"># 查看tomcat容器的挂载目录</span>
<span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token string">&quot;{{.HostConfig.Binds}}&quot;</span> tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stats-监控容器的资源使用情况" tabindex="-1"><a class="header-anchor" href="#stats-监控容器的资源使用情况" aria-hidden="true">#</a> stats：监控容器的资源使用情况</h3><p><code>stats</code>命令可以可以监控容器的资源使用情况，如<code>cpu</code>使用情况、内存使用情况等。</p><p>每秒刷新一次， 直到使用 <code>ctrl+c</code> 退出</p><p><img src="`+g+`" alt="image-20230406200537517"></p><p>列含义如下</p><table><thead><tr><th>CONTAINER ID</th><th>NAME</th><th>CPU %</th><th>MEM USAGE/LIMIT</th><th>MEM %</th><th>NET I/O</th><th>BLOCK I/O</th><th>PIDS</th></tr></thead><tbody><tr><td>容器id</td><td>容器名 称</td><td>cpu使用百分比</td><td>使用内存大小/ 最大可用内存</td><td>内存使用 百分比</td><td>网络 IO</td><td>磁盘IO</td><td>容器内线程或 进程的数量</td></tr></tbody></table><p><strong>stats语法</strong></p><blockquote><p>docker stats [OPTIONS] [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-a</code> filter: 显示所有容器的资源使用情况，默认只显示正在运行的</li><li><code>--format</code> string：格式化输 出结果</li><li><code>--no-stream</code> : 不间隔刷新，只显示第一次统计结果</li><li><code>--no-trunc</code> : 不截断显示信息，默认 情况下有些字段只显示简略信息，如容器id</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 监控所有正在运行的容器的资源使用情况</span>
<span class="token function">docker</span> stats
<span class="token comment"># 监控所有容器的资源使用情况，包含未启动的容器</span>
<span class="token function">docker</span> stats <span class="token parameter variable">-a</span>
<span class="token comment"># 只监控centos容器的资源使用情况</span>
<span class="token function">docker</span> stats centos
<span class="token comment"># 监控centos容器的资源使用情况，显示结果不刷新</span>
<span class="token function">docker</span> stats --no-stream centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="top-查看容器中运行的进程信息" tabindex="-1"><a class="header-anchor" href="#top-查看容器中运行的进程信息" aria-hidden="true">#</a> top：查看容器中运行的进程信息</h3><p><code>top</code>可以查看容器的进程信息， <code>docker exec CONTAINER ps</code> 也可以查看容器的进程。</p><p>不同的是：</p><ul><li>前者查看的是容器运行在宿主机的进程id。</li><li>后者查看的是容器内的进程id</li></ul><p><strong>top语法</strong></p><blockquote><p>docker top CONTAINER [ps OPTIONS]</p><p><strong>CONTAINER</strong> ：容器</p><p><strong>OPTIONS</strong> ：ps命令的可选参数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看centos镜像的宿主机进程id</span>
<span class="token function">docker</span> <span class="token function">top</span> centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rename-重命名容器" tabindex="-1"><a class="header-anchor" href="#rename-重命名容器" aria-hidden="true">#</a> rename：重命名容器</h3><p><code>rename</code>可以对容器进行重命名，在容器<code>run</code>时如果没有使用<code>--name</code>参数指定容器名称，可以使用 <code>rename</code>进行命名</p><p><strong>rename语法</strong></p><blockquote><p>docker rename CONTAINER NEW_NAME</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将centos容器重命名为my-centos</span>
<span class="token function">docker</span> <span class="token function">rename</span> centos my-centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="attach-连接到容器内" tabindex="-1"><a class="header-anchor" href="#attach-连接到容器内" aria-hidden="true">#</a> attach：连接到容器内</h3><p><code>attach</code>可以连接到容器内，这个容器必须是正在运行的容器，不是运行状态时，会报错</p><p>当使用 <code>ctrl+c</code> 或 <code>exit</code> 等命令退出容器时，会导致容器停止运行。</p><p>所以，不建议在生产环境使用该命令。生产环境可以使用<code>exec</code>命令进入容器</p><p><strong>attach语法</strong></p><blockquote><p>docker attach [OPTIONS] CONTAINER</p><p><strong>OPTIONS</strong> ：可选参数</p><p><code>--sig-proxy=false</code> boolean: 默认<code>true</code>，为<code>false</code>时可以防止容器遇到 <code>ctrl+c</code> 退出信号时停止运行</p><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入正在运行的centos镜像内</span>
<span class="token function">docker</span> attach centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-更新一个或多个容器的配置" tabindex="-1"><a class="header-anchor" href="#update-更新一个或多个容器的配置" aria-hidden="true">#</a> update：更新一个或多个容器的配置</h3><p>update可以对容器的配置进行更新</p><p><strong>update语法</strong></p><blockquote><p>docker update [OPTIONS] CONTAINER [CONTAINER...]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-m</code> bytes: 指定容器的内存大小，单位可选b、k、m、g</li><li><code>--memory-swap</code> bytes：</li><li>-<code>-cpu demecial</code>：cpu资源，如1.5表示可以使用宿主机的1.5个cpu资源</li><li>-<code>-cpuset-cpus</code> string：容器 可以使用宿主机的cpu内核编号， 0-3 表示4个内核都可以使用， 1,3 表示只能使用1和3号内 核</li><li><code>--restart</code> string: 指定容器的退出的重启策略。 <ul><li><code>no</code>：不重启；</li><li><code>on-failure</code>：容器非正常退出 时重启；</li><li><code>on-failure:3</code>：非正常退出时重启3次；</li><li><code>alaways</code>：总是重启；</li><li><code>unless-stopped</code>：在容 器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li></ul></li><li><code>--pidslimit</code> int: 限制容器进程或线程的数量，默认-1表示不限制</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新centos镜像的内存为2G</span>
<span class="token function">docker</span> update --memory-swap <span class="token parameter variable">-1</span> <span class="token parameter variable">-m</span> 2g centos
<span class="token comment"># 更新容器的重启策略</span>
<span class="token function">docker</span> update <span class="token parameter variable">--restart</span> on-failure:3 centos
<span class="token comment"># 更新tomcat容器的最大线程数为2000</span>
<span class="token function">docker</span> update --pids-limit <span class="token number">2000</span> tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logs-查看容器的日志" tabindex="-1"><a class="header-anchor" href="#logs-查看容器的日志" aria-hidden="true">#</a> logs：查看容器的日志</h3><p><strong>logs语法</strong></p><blockquote><p>docker logs [OPTIONS] CONTAINER</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-f</code> : 跟踪日志的实时输出</li><li><code>--until</code> string：查看某个时间点之前的日志，格式：2021-06- 03T19:30:20Z。或使用相对时间10m，表示10分钟之前</li><li><code>--since</code> string：查看某个时间点之 后的日志，格式：2021-06-03T19:30:20Z。使用相对时间10m，表示10分钟之内</li><li><code>-n</code> int: 查看 最后几行日志，默认显示全部</li><li><code>-t</code> : 日志中显示时间戳</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看tomcat最后10行日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-n</span> <span class="token number">10</span> tomcat
<span class="token comment"># 查看tomcat最后10行日志，并实时监控日志输出</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token parameter variable">-f</span> tomcat
<span class="token comment"># 查看最近10分钟的日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--since</span> 10m tomcat
<span class="token comment"># 查看6月3号9点到10点之间的日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--since</span> <span class="token number">2021</span>-06-03T9:00:00 <span class="token parameter variable">--until</span> <span class="token number">2021</span>-06-03T10:00:00 tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-阻塞容器-直到容器退出并打印它的退出代码" tabindex="-1"><a class="header-anchor" href="#wait-阻塞容器-直到容器退出并打印它的退出代码" aria-hidden="true">#</a> wait：阻塞容器，直到容器退出并打印它的退出代码</h3><p>wait命令可以阻塞一个或多个容器直到容器退出并打印出他们的退出代码</p><p><strong>wait语法</strong></p><blockquote><p>docker wait CONTAINER [CONTAINER...]</p><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 阻塞centos容器，直到它退出并打印退出状态码</span>
<span class="token function">docker</span> <span class="token function">wait</span> centos
<span class="token comment"># 此时新打开一个终端，将centos容器stop掉，切换到wait的终端就可以看到打出一个状态码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="port-列出端口的映射关系" tabindex="-1"><a class="header-anchor" href="#port-列出端口的映射关系" aria-hidden="true">#</a> port：列出端口的映射关系</h3><p><strong>port语法</strong></p><blockquote><p>docker port CONTAINER [PRIVATE_PORT[/PROTO]]</p><p><strong>CONTAINER</strong> ：容器</p><p><strong>PRIVATE_PORT</strong> ：容器端口</p><p><strong>PROTO</strong> ：端口使用的协议</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看my-boot容器的端口映射</span>
<span class="token function">docker</span> port my-boot
<span class="token comment"># 查看my-boot容器的8080端口映射的宿主机端口</span>
<span class="token function">docker</span> port my-boot <span class="token number">8080</span>
<span class="token comment"># 查看my-boot容器使用tcp协议的8080端口映射的宿主机端口</span>
<span class="token function">docker</span> port my-boot <span class="token number">8080</span>/tcp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="export-将容器打包成一个文件" tabindex="-1"><a class="header-anchor" href="#export-将容器打包成一个文件" aria-hidden="true">#</a> export：将容器打包成一个文件</h3><p><code>export</code>命令可以将容器打包到一个文件中，它和<code>save</code>命令比较容易混淆</p><p><code>export</code>和<code>save</code>的不同之处在于：</p><ul><li><code>save</code>打包的是镜像</li><li><code>export</code>打包的是容器，是容器当时的快照，至于容器的历史记录和元数据信息都会丢失。还有，<code>export</code>的文件在被<code>import</code>成一个镜像时，可以重新指定镜像的名称和版本号</li></ul><p><strong>export语法</strong></p><blockquote><p>docker export [OPTIONS] CONTAINER</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-o</code> string: 指定打包文件</li></ul><p><strong>CONTAINER</strong> ：容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将my-boot容器打包到my-boot.tar文件</span>
<span class="token function">docker</span> <span class="token builtin class-name">export</span> <span class="token parameter variable">-o</span> /tmp/my-boot.tar my-boot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-从本地文件或远程文件导入镜像到本地仓库" tabindex="-1"><a class="header-anchor" href="#import-从本地文件或远程文件导入镜像到本地仓库" aria-hidden="true">#</a> import：从本地文件或远程文件导入镜像到本地仓库</h3><p><code>import</code>可以从本地文件或远程文件中导入镜像到本地仓库</p><p>如果是从文件中导入，这个文件需要是<code>export</code>命令导出的文件</p><p><strong>import语法</strong></p><blockquote><p>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</p><p><strong>OPTIONS</strong> ：可选参数</p><ul><li><code>-m</code> string: 添加描述信息</li><li><code>-c</code> list: 对创建的容器使用dokerfile指令</li></ul><p><strong>file</strong> ：文件地址</p><p><strong>URL</strong> ：URL地址</p><p><strong>-</strong>：从标准输入终端导入，通常和 linux中的cat命令一起使用</p><p><strong>REPOSITORY</strong> ：本地镜像仓库地址</p><p><strong>TAG</strong> ：镜像版本号</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从my-boot.tar文件创建镜像</span>
<span class="token function">cat</span> /tmp/my-boot.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> -
<span class="token comment"># 从my-boot.tar文件创建镜像</span>
<span class="token function">docker</span> <span class="token function">import</span> /tmp/my-boot.tar
<span class="token comment"># 从my-boot.tar文件创建镜像，并指定镜像名称为my-boot-test、版本号为1.0</span>
<span class="token function">docker</span> <span class="token function">import</span> /tmp/my-boot.tar my-boot-test:1.0
<span class="token comment"># 从my-boot.tar文件创建镜像，备注信息为测试，并指定镜像名称为my-boot-test、版本号为1.0</span>
<span class="token function">docker</span> <span class="token function">import</span> <span class="token parameter variable">--message</span> <span class="token string">&#39;测试&#39;</span> /tmp/my-boot.tar my-boot-test:1.0
<span class="token comment"># 从远程服务器的my-boot.tar文件创建镜像</span>
<span class="token function">docker</span> <span class="token function">import</span> http://192.168.100.1:8080/images/my-boot.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,146);function V(l,F){const e=r("router-link");return d(),p("div",null,[f,O,s("nav",N,[s("ul",null,[s("li",null,[a(e,{to:"#操作远程仓库的命令"},{default:t(()=>[n("操作远程仓库的命令")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#login-登录到远程仓库"},{default:t(()=>[n("login：登录到远程仓库")]),_:1})]),s("li",null,[a(e,{to:"#search-从远程仓库搜索镜像"},{default:t(()=>[n("search：从远程仓库搜索镜像")]),_:1})]),s("li",null,[a(e,{to:"#push-把本地镜像推送到远程仓库"},{default:t(()=>[n("push：把本地镜像推送到远程仓库")]),_:1})]),s("li",null,[a(e,{to:"#pull-从远程仓库拉取或更新镜像"},{default:t(()=>[n("pull：从远程仓库拉取或更新镜像")]),_:1})])])]),s("li",null,[a(e,{to:"#操作本地镜像的命令"},{default:t(()=>[n("操作本地镜像的命令")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#images-显示所有镜像"},{default:t(()=>[n("images：显示所有镜像")]),_:1})]),s("li",null,[a(e,{to:"#rmi-删除本地镜像"},{default:t(()=>[n("rmi：删除本地镜像")]),_:1})]),s("li",null,[a(e,{to:"#tag-标记镜像-将其归入仓库"},{default:t(()=>[n("tag：标记镜像，将其归入仓库")]),_:1})]),s("li",null,[a(e,{to:"#history-查看镜像的创建历史"},{default:t(()=>[n("history：查看镜像的创建历史")]),_:1})]),s("li",null,[a(e,{to:"#save-将镜像打包成文件"},{default:t(()=>[n("save：将镜像打包成文件")]),_:1})]),s("li",null,[a(e,{to:"#load-从指定文件中加载镜像"},{default:t(()=>[n("load：从指定文件中加载镜像")]),_:1})])])]),s("li",null,[a(e,{to:"#操作容器的命令"},{default:t(()=>[n("操作容器的命令")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#run-创建一个容器并运行"},{default:t(()=>[n("run：创建一个容器并运行")]),_:1})]),s("li",null,[a(e,{to:"#start-启动容器"},{default:t(()=>[n("start：启动容器")]),_:1})]),s("li",null,[a(e,{to:"#restart-重启容器"},{default:t(()=>[n("restart：重启容器")]),_:1})]),s("li",null,[a(e,{to:"#stop-停止容器"},{default:t(()=>[n("stop：停止容器")]),_:1})]),s("li",null,[a(e,{to:"#kill-杀死容器"},{default:t(()=>[n("kill：杀死容器")]),_:1})]),s("li",null,[a(e,{to:"#rm-删除容器"},{default:t(()=>[n("rm：删除容器")]),_:1})]),s("li",null,[a(e,{to:"#pause-暂停容器"},{default:t(()=>[n("pause：暂停容器")]),_:1})]),s("li",null,[a(e,{to:"#unpause-取消暂停容器"},{default:t(()=>[n("unpause：取消暂停容器")]),_:1})]),s("li",null,[a(e,{to:"#create-创建一个容器"},{default:t(()=>[n("create：创建一个容器")]),_:1})]),s("li",null,[a(e,{to:"#exec-在容器中执行命令"},{default:t(()=>[n("exec：在容器中执行命令")]),_:1})]),s("li",null,[a(e,{to:"#ps-查看容器列表"},{default:t(()=>[n("ps：查看容器列表")]),_:1})]),s("li",null,[a(e,{to:"#inspect-获取容器或镜像的元数据"},{default:t(()=>[n("inspect：获取容器或镜像的元数据")]),_:1})]),s("li",null,[a(e,{to:"#stats-监控容器的资源使用情况"},{default:t(()=>[n("stats：监控容器的资源使用情况")]),_:1})]),s("li",null,[a(e,{to:"#top-查看容器中运行的进程信息"},{default:t(()=>[n("top：查看容器中运行的进程信息")]),_:1})]),s("li",null,[a(e,{to:"#rename-重命名容器"},{default:t(()=>[n("rename：重命名容器")]),_:1})]),s("li",null,[a(e,{to:"#attach-连接到容器内"},{default:t(()=>[n("attach：连接到容器内")]),_:1})]),s("li",null,[a(e,{to:"#update-更新一个或多个容器的配置"},{default:t(()=>[n("update：更新一个或多个容器的配置")]),_:1})]),s("li",null,[a(e,{to:"#logs-查看容器的日志"},{default:t(()=>[n("logs：查看容器的日志")]),_:1})]),s("li",null,[a(e,{to:"#wait-阻塞容器-直到容器退出并打印它的退出代码"},{default:t(()=>[n("wait：阻塞容器，直到容器退出并打印它的退出代码")]),_:1})]),s("li",null,[a(e,{to:"#port-列出端口的映射关系"},{default:t(()=>[n("port：列出端口的映射关系")]),_:1})]),s("li",null,[a(e,{to:"#export-将容器打包成一个文件"},{default:t(()=>[n("export：将容器打包成一个文件")]),_:1})]),s("li",null,[a(e,{to:"#import-从本地文件或远程文件导入镜像到本地仓库"},{default:t(()=>[n("import：从本地文件或远程文件导入镜像到本地仓库")]),_:1})])])])])]),I,s("blockquote",null,[T,s("ul",null,[A,s("li",null,[E,n(" 参数用来指定搜索出来的镜像的显示的格式 "),s("ul",null,[s("li",null,'docker search --format "[table] '+c(l.COLUMN)+"["+c(l.COLUMN)+'...]" TERM',1)])]),y])]),_,s("blockquote",null,[x,s("ul",null,[R,s("li",null,[C,n(" string: 指定镜像显示的格式，格式详见下文 "),s("ul",null,[s("li",null,'docker images --format "[table] '+c(l.COLUMN)+"["+c(l.COLUMN)+'...]" [REPOSITORY[:TAG]]',1),S])])]),q]),P,s("blockquote",null,[M,s("ul",null,[G,D,w,s("li",null,[L,n(" string: 指定镜像显示的格式 "),s("ul",null,[s("li",null,'docker history --format "[table] '+c(l.COLUMN)+"["+c(l.COLUMN)+'...]" IMAGE',1),U])])]),Y]),B])}const H=i(h,[["render",V],["__file","DockerCommand.html.vue"]]);export{H as default};
