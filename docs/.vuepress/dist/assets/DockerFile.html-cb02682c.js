import{_ as r,M as o,p as d,q as t,R as a,N as n,V as l,t as e,a1 as i}from"./framework-5866ffd3.js";const p="/FullStackNotes/assets/1674047922303-b4452544-568e-481c-b8a4-8272d5a153b1-780b1015.png",u="/FullStackNotes/assets/1674048024472-ff0ec242-eea0-4679-9132-423a9028f7a1-44496564.png",v={},k=a("h1",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),e(" 目录")],-1),m={class:"table-of-contents"},b=i('<h1 id="dockerfile自定义镜像" tabindex="-1"><a class="header-anchor" href="#dockerfile自定义镜像" aria-hidden="true">#</a> Dockerfile自定义镜像</h1><p>常见的镜像在<code>DockerHub</code>就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="镜像结构" tabindex="-1"><a class="header-anchor" href="#镜像结构" aria-hidden="true">#</a> 镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以<code>MySQL</code>为例，来看看镜像的组成结构</p><p><img src="'+p+'" alt="image.png"></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="dockerfile语法" tabindex="-1"><a class="header-anchor" href="#dockerfile语法" aria-hidden="true">#</a> Dockerfile语法</h2><p>我们只需要告诉<code>Docker</code>，我们的镜像的组成，需要哪些<code>BaseImage</code>、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来<code>Docker</code>会帮助我们构建镜像。</p><p><strong>而描述上述信息的文件就是Dockerfile文件。</strong></p><p><strong><code>Dockerfile</code><strong>就是一个文本文件，其中包含一个个的</strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层<code>Layer</code>。</p><p><img src="'+u+'" alt="image.png"></p>',14),h={href:"https://docs.docker.com/engine/reference/builder",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="构建java项目" tabindex="-1"><a class="header-anchor" href="#构建java项目" aria-hidden="true">#</a> 构建Java项目</h2><h3 id="基于ubuntu构建java项目" tabindex="-1"><a class="header-anchor" href="#基于ubuntu构建java项目" aria-hidden="true">#</a> 基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li>步骤1：新建一个空文件夹 docker-demo</li><li>步骤2：拷贝Java的 <code>.jar</code>包文件到 docker-demo 这个目录</li><li>步骤3：拷贝jdk的压缩包 jdk8.tar.gz 文件到 docker-demo 这个目录</li><li>步骤4：编写<code>Dockerfile</code>文件到 docker-demo 这个目录</li></ul><p>其中的内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment"># 配置环境变量，JDK的安装目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>

<span class="token comment"># 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>

<span class="token comment"># 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> /</span>
&amp;&amp; tar -xf ./jdk8.tar.gz / #解压
&amp;&amp; mv ./jdk1.8.0_144 ./java8 # 重命名

<span class="token comment"># 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>步骤5：进入 docker-demo 目录</li><li>步骤6：运行命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># . 表示 dockerfile 所在的目录 javaweb:1.0 构建完成的镜像名称</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>

<span class="token function">docker</span> images

<span class="token comment"># 启动镜像</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> web <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8090 <span class="token parameter variable">-d</span> javaweb:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),_={href:"http://192.168.150.101:8090/hello/count",target:"_blank",rel:"noopener noreferrer"},j=i(`<h3 id="基于java8构建java项目" tabindex="-1"><a class="header-anchor" href="#基于java8构建java项目" aria-hidden="true">#</a> 基于Java8构建Java项目</h3><p>大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了<code>JDK</code>的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li>① 新建一个空的目录，然后在目录中新建一个文件，命名为 Dockerfile</li><li>② 拷贝<code>.jar</code>到这个目录中</li><li>③ 编写Dockerfile文件： <ul><li>a ）基于java:8-alpine作为基础镜像</li><li>b ）将<code>app.jar</code>拷贝到镜像中</li><li>c ）暴露端口</li><li>d ）编写入口<code>ENTRYPOINT</code></li></ul></li></ul><p>内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>④ 使用docker build命令构建镜像</li></ul><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker build -t javaweb:2.0 .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>⑤ 使用docker run创建容器并运行</li></ul><p>小结：</p><ol><li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</li></ol>`,13);function g(D,w){const s=o("router-link"),c=o("ExternalLinkIcon");return d(),t("div",null,[k,a("nav",m,[a("ul",null,[a("li",null,[n(s,{to:"#镜像结构"},{default:l(()=>[e("镜像结构")]),_:1})]),a("li",null,[n(s,{to:"#dockerfile语法"},{default:l(()=>[e("Dockerfile语法")]),_:1})]),a("li",null,[n(s,{to:"#构建java项目"},{default:l(()=>[e("构建Java项目")]),_:1}),a("ul",null,[a("li",null,[n(s,{to:"#基于ubuntu构建java项目"},{default:l(()=>[e("基于Ubuntu构建Java项目")]),_:1})]),a("li",null,[n(s,{to:"#基于java8构建java项目"},{default:l(()=>[e("基于Java8构建Java项目")]),_:1})])])])])]),b,a("p",null,[e("更新详细语法说明，请参考官网文档： "),a("a",h,[e("https://docs.docker.com/engine/reference/builder"),n(c)])]),f,a("p",null,[e("最后访问 "),a("a",_,[e("http://192.168.150.101:8090/hello/count"),n(c)]),e("，其中的ip改成你的虚拟机ip")]),j])}const J=r(v,[["render",g],["__file","DockerFile.html.vue"]]);export{J as default};
